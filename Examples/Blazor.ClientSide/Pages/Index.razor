@page "/"
@using Binance.Net.Interfaces
@using Blazor.DataProvider
@using CryptoExchange.Net.Sockets

@inject BinanceDataProvider _dataProvider

<div>
    <h3>24h data</h3>
    @foreach (var tick in _ticks)
    {
        <div>@tick.Symbol | @tick.PriceChangePercent%</div>
    }
</div>

@code
{
    private IEnumerable<IBinanceTick> _ticks = new List<IBinanceTick>();
    private UpdateSubscription _subscription;

    protected override async Task OnInitializedAsync()
    {
        var callResult = await _dataProvider.Get24HPrices();
        if (callResult)
            _ticks = callResult.Data;

        // IMPORTANT
        // Webassembly does not support the current implementation of websocket connection
        // To use websocket updates, see Blazor.ServerSide

        //var subResult = await _dataProvider.SubscribeTickerUpdates(HandleTickUpdates);
        //if (subResult)
        //    _subscription = subResult.Data;
    }

    //private void HandleTickUpdates(DataEvent<IEnumerable<IBinanceTick>> update)
    //{
    //    foreach (var tick in update.Data)
    //    {
    //        var symbol = _ticks.Single(t => t.Symbol == tick.Symbol);
    //        symbol.PriceChangePercent = tick.PriceChangePercent;
    //    }

    //    InvokeAsync(StateHasChanged);
    //}
}