using Binance.Net.Converters;
using Binance.Net.Enums;

namespace Binance.Net.Objects.Models
{
    /// <summary>
    /// Order info
    /// </summary>
    public record BinanceOrderBase
    {
        /// <summary>
        /// The symbol the order is for
        /// </summary>
        [JsonPropertyName("symbol")]
        public string Symbol { get; set; } = string.Empty;
        /// <summary>
        /// The order id generated by Binance
        /// </summary>
        [JsonPropertyName("orderId")]
        public long Id { get; set; }

        /// <summary>
        /// Id of the order list this order belongs to
        /// </summary>
        [JsonPropertyName("orderListId")]
        public long OrderListId { get; set; }

        /// <summary>
        /// Original order id
        /// </summary>
        [JsonPropertyName("origClientOrderId")]
        public string OriginalClientOrderId { get; set; } = string.Empty;

        /// <summary>
        /// The order id as assigned by the client
        /// </summary>
        [JsonPropertyName("clientOrderId")]
        public string ClientOrderId { get; set; } = string.Empty;

        private decimal _price;

        /// <summary>
        /// The price of the order
        /// </summary>
        [JsonPropertyName("price")]
        public decimal Price
        {
            get
            {
                if (_price == 0 && Type == SpotOrderType.Market && QuantityFilled != 0)
                    return QuoteQuantityFilled / QuantityFilled;
                return _price;
            }
            set => _price = value;
        }

        /// <summary>
        /// The original quantity of the order, as specified in the order parameters by the user
        /// </summary>
        [JsonPropertyName("origQty")]
        public decimal Quantity { get; set; }
        /// <summary>
        /// The currently executed quantity of the order
        /// </summary>
        [JsonPropertyName("executedQty")]
        public decimal QuantityFilled { get; set; }
        /// <summary>
        /// The currently executed amount of quote asset. Amounts to Sum(quantity * price) of executed trades for this order
        /// </summary>
        [JsonPropertyName("cummulativeQuoteQty")]
        public decimal QuoteQuantityFilled { get; set; }
        /// <summary>
        /// The original quote order quantity of the order, as specified in the order parameters by the user
        /// </summary>
        [JsonPropertyName("origQuoteOrderQty")]
        public decimal QuoteQuantity { get; set; }

        /// <summary>
        /// The status of the order
        /// </summary>
        [JsonPropertyName("status")]
        public OrderStatus Status { get; set; }

        /// <summary>
        /// How long the order is active
        /// </summary>
        [JsonPropertyName("timeInForce")]
        public TimeInForce TimeInForce { get; set; }
        /// <summary>
        /// The type of the order
        /// </summary>
        [JsonPropertyName("type")]
        public SpotOrderType Type { get; set; }
        /// <summary>
        /// The side of the order
        /// </summary>
        [JsonPropertyName("side")]
        public OrderSide Side { get; set; }
        /// <summary>
        /// The stop price
        /// </summary>
        [JsonPropertyName("stopPrice")]
        public decimal? StopPrice { get; set; }

        /// <summary>
        /// The iceberg quantity
        /// </summary>
        [JsonPropertyName("icebergQty")]
        public decimal? IcebergQuantity { get; set; }
        /// <summary>
        /// The time the order was submitted
        /// </summary>
        [JsonPropertyName("time"), JsonConverter(typeof(DateTimeConverter))]
        public DateTime CreateTime { get; set; }
        /// <summary>
        /// The time the order was last updated
        /// </summary>
        [JsonConverter(typeof(DateTimeConverter))]
        [JsonPropertyName("updateTime")]
        public DateTime? UpdateTime { get; set; }
        /// <summary>
        /// The time the transaction was executed (when canceling order)
        /// </summary>
        [JsonConverter(typeof(DateTimeConverter))]
        [JsonPropertyName("transactTime")]
        public DateTime? TransactTime { get; set; }
        /// <summary>
        /// When the order started working
        /// </summary>
        [JsonConverter(typeof(DateTimeConverter))]
        [JsonPropertyName("workingTime")]
        public DateTime? WorkingTime { get; set; }
        /// <summary>
        /// Is working
        /// </summary>
        [JsonPropertyName("isWorking")]
        public bool? IsWorking { get; set; }
        /// <summary>
        /// If isolated margin (for margin account orders)
        /// </summary>
        [JsonPropertyName("isIsolated")]
        public bool? IsIsolated { get; set; }
        /// <summary>
        /// Quantity which is still open to be filled
        /// </summary>
        public decimal QuantityRemaining => Quantity - QuantityFilled;

        /// <summary>
        /// The average price the order was filled
        /// </summary>
        public decimal? AverageFillPrice
        {
            get
            {
                if (QuantityFilled == 0)
                    return null;

                return QuoteQuantityFilled / QuantityFilled;
            }
        }

        /// <summary>
        /// Self trade prevention mode
        /// </summary>
        [JsonPropertyName("selfTradePreventionMode"), JsonConverter(typeof(EnumConverter))]
        public SelfTradePreventionMode SelfTradePreventionMode { get; set; }
    }
}
