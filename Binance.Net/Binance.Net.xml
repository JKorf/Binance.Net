<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Binance.Net</name>
    </assembly>
    <members>
        <member name="T:Binance.Net.BinanceClient">
            <summary>
            Client providing access to the Binance REST Api
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceClient.#ctor">
            <summary>
            Create a new instance of BinanceClient using the default options
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceClient.#ctor(Binance.Net.Objects.Spot.BinanceClientOptions)">
            <summary>
            Create a new instance of BinanceClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Binance.Net.BinanceClient.SetDefaultOptions(Binance.Net.Objects.Spot.BinanceClientOptions)">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Binance.Net.BinanceClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.BinanceClient.Ping(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetServerTime(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetExchangeInfo(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOrderBook(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSymbolTrades(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetHistoricalSymbolTrades(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetHistoricalSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAggregatedTrades(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAggregatedTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetKlines(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetCurrentAvgPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetCurrentAvgPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.Get24HPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.Get24HPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.Get24HPricesList(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.Get24HPricesListAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAllPrices(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAllPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetBookPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAllBookPrices(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSystemStatus(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSystemStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.Withdraw(System.String,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="amount">The amount to withdraw</param>
            <param name="name">Name for the transaction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.WithdrawAsync(System.String,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="amount">The amount to withdraw</param>
            <param name="name">Name for the transaction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetDepositHistory(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetDepositHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetWithdrawalHistory(System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetWithdrawalHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetDepositAddress(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="asset">Asset to get address for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetDepositAddressAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="asset">Asset to get address for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAccountStatus(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAccountStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetTradingStatus(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetDustLog(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetDustLogAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.DustTransfer(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.DustTransferAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAssetDividendRecords(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAssetDividendRecordsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAssetDetails(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAssetDetailsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetTradeFee(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal fee for an symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetTradeFeeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trade fee for a symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSubAccounts(System.String,System.Nullable{Binance.Net.Enums.SubAccountStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="accountStatus">Filter the list by account status</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSubAccountsAsync(System.String,System.Nullable{Binance.Net.Enums.SubAccountStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="accountStatus">Filter the list by account status</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSubAccountTransferHistory(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of sub account transfers
            </summary>
            <param name="email">Filter the history by email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSubAccountTransferHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of sub account transfers
            </summary>
            <param name="email">Filter the history by email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.TransferSubAccount(System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one sub account to another
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.TransferSubAccountAsync(System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one sub account to another
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSubAccountStatus(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSubAccountStatusAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PlaceTestOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="orderResponseType">What kind of response should be returned</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PlaceTestOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="orderResponseType">What kind of response should be returned</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PlaceOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.CancelOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">The new client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOpenOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAllOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PlaceOCOOrder(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PlaceOCOOrderAsync(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.CancelOCOOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.CancelOCOOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOCOOrder(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either listClientOrderId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOCOOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either orderListId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOCOOrders(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOCOOrdersAsync(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOpenOCOOrders(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOpenOCOOrdersAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMyTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMyTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.Transfer(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.TransferAsync(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.Borrow(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.BorrowAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.Repay(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.RepayAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMarginAssets(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMarginAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMarginPairs(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMarginPairsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PlaceMarginOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.PlaceMarginOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.CancelMarginOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.CancelMarginOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetTransferHistory(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetTransferHistoryAsync(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetLoans(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="limit">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetLoansAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="limit">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetRepays(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="size">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetRepaysAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Filter by number</param>
            <param name="size">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetInterestHistory(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetInterestHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetForceLiquidationHistory(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetForceLiquidationHistoryAsync(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMarginAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMarginAccountOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMarginAccountOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOpenMarginAccountOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetOpenMarginAccountOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAllMarginAccountOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetAllMarginAccountOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMyMarginAccountTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMyMarginAccountTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMaxBorrowAmount(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMaxBorrowAmountAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMaxTransferAmount(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.GetMaxTransferAmountAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.KeepAliveUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.StopUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.StartMarginUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to 
            <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. 
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.StartMarginUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to 
            <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. 
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.KeepAliveMarginUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user for margin account stream listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.KeepAliveMarginUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream for margin account listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.CloseMarginUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.CloseMarginUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceClient.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.BinanceFuturesClient">
            <summary>
            Client providing access to the Binance Futures REST Api
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.#ctor">
            <summary>
            Create a new instance of BinanceFuturesClient using the default options
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.#ctor(Binance.Net.Objects.Futures.BinanceFuturesClientOptions)">
            <summary>
            Create a new instance of BinanceFuturesClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.SetDefaultOptions(Binance.Net.Objects.Futures.BinanceFuturesClientOptions)">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.Ping(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance Futures API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance Futures API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetServerTime(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetExchangeInfo(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOrderBook(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetSymbolTrades(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetHistoricalSymbolTrades(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetHistoricalSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAggregatedTrades(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAggregatedTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetKlines(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetMarkPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetMarkPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllMarkPrices(System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllMarkPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetFundingRates(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetFundingRatesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.Get24HPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.Get24HPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.Get24HPrices(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.Get24HPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllPrices(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetBookPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllBookPrices(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllLiquidationOrders(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all Liquidation Orders
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get  liquidation orders history</param>
            <param name="endTime">End time to get liquidation orders history</param>
            <param name="limit">Max number of results. Default:100 Max:1000</param>
            <param name="ct">Cancellation token</param>
            <returns>The all liquidation orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllLiquidationOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all Liquidation Orders
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get  liquidation orders history</param>
            <param name="endTime">End time to get liquidation orders history</param>
            <param name="limit">Max number of results. Default:100 Max:1000</param>
            <param name="ct">Cancellation token</param>
            <returns>The all liquidation orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOpenInterest(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetBracket(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets info</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetBracketAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetBrackets(System.Threading.CancellationToken)">
            <summary>
            Gets all Notional and Leverage Brackets
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets info</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetBracketsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all Notional and Leverage Brackets.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.PlaceOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill/GootTillCrossing)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">A unique id among open orders. Automatically generated if not sent.</param>
            <param name="stopPrice">Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders.</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.CancelOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">The new client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOpenOrders(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific current orders. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific current orders. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOpenOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetFuturesAccountBalance(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetFuturesAccountBalanceAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.ChangeInitialLeverage(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.ChangeInitialLeverageAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.ChangeMarginType(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.ChangeMarginTypeAsync(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.ModifyPositionMargin(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.ModifyPositionMarginAsync(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetMarginChangeHistory(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetMarginChangeHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOpenPositions(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user positions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetOpenPositionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user positions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetMyTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetMyTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetIncomeHistory(System.String,System.Nullable{Binance.Net.Enums.IncomeType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.GetIncomeHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.IncomeType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.StartUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.KeepAliveUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.StopUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesClient.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.BinanceFuturesSocketClient">
            <summary>
            Client providing access to the Binance Futures Websocket Api
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.#ctor">
            <summary>
            Create a new instance of BinanceFuturesSocketClient with default options
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.#ctor(Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions)">
            <summary>
            Create a new instance of BinanceFuturesSocketClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SetDefaultOptions(Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions)">
            <summary>
            Set the default options to be used when creating new socket clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToMarkPriceUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToMarkPriceUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllMarkPriceUpdates(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllMarkPriceUpdatesAsync(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            /// <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToKlineUpdates(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToKlineUpdates(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdates(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllMiniTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllMiniTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToSymbolTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToSymbolTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToBookTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToBookTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllBookTickerUpdates(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllBookTickerUpdatesAsync(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToLiquidationUpdates(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToLiquidationUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllLiquidationUpdates(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToAllLiquidationUpdatesAsync(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdates(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToOrderBookUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the <see cref="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)"/> method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdateMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.SubscribeToUserDataUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the <see cref="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)"/> method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdateMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.AuthenticateSocket(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceFuturesSocketClient.Unsubscribe(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.BinanceHelpers">
            <summary>
            Helper methods for the Binance API
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.UsedWeight(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Get the used weight from the response headers
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ClampQuantity(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamp a quantity between a min and max quantity and floor to the closest step
            </summary>
            <param name="minQuantity"></param>
            <param name="maxQuantity"></param>
            <param name="stepSize"></param>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ClampPrice(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamp a price between a min and max price
            </summary>
            <param name="minPrice"></param>
            <param name="maxPrice"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.FloorPrice(System.Decimal,System.Decimal)">
            <summary>
            Floor a price to the closest tick
            </summary>
            <param name="tickSize"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ValidateBinanceSymbol(System.String)">
            <summary>
            Validate the string is a valid Binance symbol.
            </summary>
            <param name="symbolString">string to validate</param>
        </member>
        <member name="T:Binance.Net.BinanceSocketClient">
            <summary>
            Client providing access to the Binance websocket Api
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.#ctor">
            <summary>
            Create a new instance of BinanceSocketClient with default options
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.#ctor(Binance.Net.Objects.Spot.BinanceSocketClientOptions)">
            <summary>
            Create a new instance of BinanceSocketClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SetDefaultOptions(Binance.Net.Objects.Spot.BinanceSocketClientOptions)">
            <summary>
            Set the default options to be used when creating new socket clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAggregatedTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAggregatedTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToKlineUpdates(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToKlineUpdates(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToSymbolMiniTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToSymbolMiniTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAllSymbolMiniTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToSymbolTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToSymbolTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAllSymbolTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToBookTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToBookTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAllBookTickerUpdates(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToAllBookTickerUpdatesAsync(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToPartialOrderBookUpdates(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToPartialOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToOrderBookUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the <see cref="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)"/> method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountInfoMessage">The event handler for whenever an account info update is received</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the <see cref="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)"/> method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountInfoMessage">The event handler for whenever an account info update is received</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco order status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.AuthenticateSocket(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.Unsubscribe(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.BinanceSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceSymbolOrderBook.#ctor(System.String,Binance.Net.Objects.Spot.BinanceOrderBookOptions)">
            <summary>
            Create a new instance
            </summary>
            <param name="symbol">The symbol of the order book</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:Binance.Net.BinanceSymbolOrderBook.DoStart">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSymbolOrderBook.DoResync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.Enums.AccountType">
            <summary>
            Type of account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Spot">
            <summary>
            Spot account type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Margin">
            <summary>
            Margin account type
            </summary>>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Futures">
            <summary>
            Futures account type
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.DepositStatus">
            <summary>
            The status of a deposit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ExecutionType">
            <summary>
            The type of execution
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Replaced">
            <summary>
            Replaced
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FuturesMarginChangeDirectionType">
            <summary>
            The direction to change futures margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginChangeDirectionType.Add">
            <summary>
            Add margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginChangeDirectionType.Reduce">
            <summary>
            Reduce Margin
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FuturesMarginType">
            <summary>
            Type of Margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginType.Isolated">
            <summary>
            Isolated margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginType.Cross">
            <summary>
            Crossed margin
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.IncomeType">
            <summary>
            Type of futures income
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.Transfer">
            <summary>
            Transfer into account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.WelcomeBonus">
            <summary>
            Futures welcome bonus
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.RealizedPnL">
            <summary>
            Futures realized profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.FundingFee">
            <summary>
            Futures funding fee
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.Commission">
            <summary>
            Futures trading commission
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.InsuranceClear">
            <summary>
            Insurance clear
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.IndicatorType">
            <summary>
            Types of indicators
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.UnfilledRatio">
            <summary>
            Unfilled ratio
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.ExpirationRatio">
            <summary>
            Expired orders ratio
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.CancellationRatio">
            <summary>
            Cancelled orders ratio
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.KlineInterval">
            <summary>
            The interval for the kline
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            3m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.TwoHour">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FourHour">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.SixHour">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.EightHour">
            <summary>
            8h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.TwelveHour">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThreeDay">
            <summary>
            3d
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneWeek">
            <summary>
            1w
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneMonth">
            <summary>
            1M
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ListOrderStatus">
            <summary>
            List order status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Executing">
            <summary>
            Executing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Done">
            <summary>
            Executed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ListStatusType">
            <summary>
            List status type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.Response">
            <summary>
            Failed action
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.ExecutionStarted">
            <summary>
            Placed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.Done">
            <summary>
            Order list is done
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.MarginStatus">
            <summary>
            Status of a margin action
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Pending">
            <summary>
            Pending to execution
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Completed">
            <summary>
            Executed, waiting to be confirmed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Confirmed">
            <summary>
            Successfully loaned/repayed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Failed">
            <summary>
            execution failed, nothing happened to your account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderRejectReason">
            <summary>
            The reason the order was rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.None">
            <summary>
            Not rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownInstrument">
            <summary>
            Unknown instrument
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.MarketClosed">
            <summary>
            Closed market
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.PriceQuantityExceedsHardLimits">
            <summary>
            Quantity out of bounds
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownOrder">
            <summary>
            Unknown order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.DuplicateOrder">
            <summary>
            Duplicate
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownAccount">
            <summary>
            Unkown account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.InsufficientBalance">
            <summary>
            Not enough balance
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.AccountInactive">
            <summary>
            Account not active
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.AccountCannotSettle">
            <summary>
            Cannot settle
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderResponseType">
            <summary>
            Response type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Acknowledge">
            <summary>
            Ack only
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Result">
            <summary>
            Resulting order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Full">
            <summary>
            Full order info
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderSide">
            <summary>
            The side of an order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderStatus">
            <summary>
            The status of an orderн
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.New">
            <summary>
            Order is new
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.PartiallyFilled">
            <summary>
            Order is partly filled, still has quantity left to fill
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Filled">
            <summary>
            The order has been filled and completed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Canceled">
            <summary>
            The order has been canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.PendingCancel">
            <summary>
            The order is in the process of being canceled  (currently unused)
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Rejected">
            <summary>
            The order has been rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Expired">
            <summary>
            The order has expired
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Insurance">
            <summary>
            Liquidation with Insurance Fund
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Adl">
            <summary>
            Counterparty Liquidation
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderType">
            <summary>
            The type of an order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Limit">
            <summary>
            Limit orders will be placed at a specific price. If the price isn't available in the order book for that asset the order will be added in the order book for someone to fill.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Market">
            <summary>
            Market order will be placed without a price. The order will be executed at the best price available at that time in the order book.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopLoss">
            <summary>
            Stop loss order. Will execute a market order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopLossLimit">
            <summary>
            Stop loss order. Will execute a limit order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Stop">
            <summary>
            Stop loss order. Will execute a market order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopMarket">
            <summary>
            Stop loss order. Will be executed at the best price available at that time in the order book
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfit">
            <summary>
            Take profit order. Will execute a market order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfitMarket">
            <summary>
            Take profit order. Will be executed at the best price available at that time in the order book
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfitLimit">
            <summary>
            Take profit order. Will execute a limit order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.LimitMaker">
            <summary>
            Same as a limit order, however it will fail if the order would immediately match, therefor preventing taker orders
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TralingStopMaret">
            <summary>
            Trailing stop order will be placed without a price. The order will be executed at the best price available at that time in the order book.
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.RateLimitInterval">
            <summary>
            Rate limit on what unit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Second">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Minute">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Day">
            <summary>
            Days
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.RateLimitType">
            <summary>
            Type of rate limit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.RequestWeight">
            <summary>
            Request weight
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.Orders">
            <summary>
            Order amount
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.RawRequests">
            <summary>
            Raw requests
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SideEffectType">
            <summary>
            Side effect for a margin order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.NoSideEffect">
            <summary>
            Normal trade
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.MarginBuy">
            <summary>
            Margin trade order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.AutoRepay">
            <summary>
            Make auto repayment after order is filled
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SubAccountStatus">
            <summary>
            Status of the sub account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountStatus.Enabled">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountStatus.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SymbolFilterType">
            <summary>
            Filter type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.Unknown">
            <summary>
            Unknown filter type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.Price">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.PricePercent">
            <summary>
            Price percent filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.LotSize">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MarketLotSize">
            <summary>
            Market lot size filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MinNotional">
            <summary>
            Min notional filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxNumberOrders">
            <summary>
            Max orders filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxNumberIcebergOrders">
            <summary>
            Max iceberg orders filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxNumberAlgorithmicOrders">
            <summary>
            Max algo orders filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.IcebergParts">
            <summary>
            Max iceberg parts filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxPosition">
            <summary>
            Max position filter
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SymbolStatus">
            <summary>
            Status of a symbol
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PreTrading">
            <summary>
            Not trading yet
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Trading">
            <summary>
            Trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PostTrading">
            <summary>
            No longer trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.EndOfDay">
            <summary>
            Not trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Halt">
            <summary>
            Halted
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.AuctionMatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Break">
            <summary>
            
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SystemStatus">
            <summary>
            Status of the Binance system
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SystemStatus.Normal">
            <summary>
            Operational
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SystemStatus.Maintenance">
            <summary>
            In maintenance
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TimeInForce">
            <summary>
            The time the order will be active for
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.GoodTillCancel">
            <summary>
            GoodTillCancel orders will stay active until they are filled or canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.ImmediateOrCancel">
            <summary>
            ImmediateOrCancel orders have to be at least partially filled upon placing or will be automatically canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.FillOrKill">
            <summary>
            FillOrKill orders have to be entirely filled upon placing or will be automatically canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.GootTillCrossing">
            <summary>
            GootTillCrossing orders will post only
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TradeRulesBehaviour">
            <summary>
            Trade rules behaviour
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.ThrowError">
            <summary>
            Throw an error if not complying
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.AutoComply">
            <summary>
            Auto adjust order when not complying
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TransferDirection">
            <summary>
            Direction of a transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirection.RollIn">
            <summary>
            Roll-in
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirection.RollOut">
            <summary>
            Roll-out
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TransferDirectionType">
            <summary>
            Transfer direction
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirectionType.MainToMargin">
            <summary>
            From main account to margin account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirectionType.MarginToMain">
            <summary>
            From margin account to main account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.WithdrawalStatus">
            <summary>
            The status of a withdrawal
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.EmailSend">
            <summary>
            Email has been send
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Canceled">
            <summary>
            Withdrawal has been canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.AwaitingApproval">
            <summary>
            Withdrawal is awaiting approval
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Rejected">
            <summary>
            Withdrawal has been rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Processing">
            <summary>
            Withdrawal is processing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Failure">
            <summary>
            Withdrawal has failed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Completed">
            <summary>
            Withdrawal has been processed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.WorkingType">
            <summary>
            Type of working
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WorkingType.Mark">
            <summary>
            Mark price type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WorkingType.Contract">
            <summary>
            Contract price type
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceAggregatedTrade">
            <summary>
            Compressed aggregated trade information. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.Price">
            <summary>
            The price of trades in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.Quantity">
            <summary>
            The total quantity of trades in the aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.TradeTime">
            <summary>
            The timestamp of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceBookPrice">
            <summary>
            Book tick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestBidPrice">
            <summary>
            Price of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestBidQuantity">
            <summary>
            Quantity of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestAskPrice">
            <summary>
            Price of the best ask
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestAskQuantity">
            <summary>
            Quantity of the best ask
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceClient">
            <summary>
            Interface for the Binance client
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Ping(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetServerTime(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetExchangeInfo(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOrderBook(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSymbolTrades(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetHistoricalSymbolTrades(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetHistoricalSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAggregatedTrades(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAggregatedTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetKlines(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetCurrentAvgPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetCurrentAvgPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Get24HPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Get24HPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Get24HPricesList(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Get24HPricesListAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAllPrices(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAllPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetBookPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAllBookPrices(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSystemStatus(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSystemStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Withdraw(System.String,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="amount">The amount to withdraw</param>
            <param name="name">Name for the transaction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.WithdrawAsync(System.String,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="amount">The amount to withdraw</param>
            <param name="name">Name for the transaction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetDepositHistory(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetDepositHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetWithdrawalHistory(System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetWithdrawalHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetDepositAddress(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="asset">Asset to get address for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetDepositAddressAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="asset">Asset to get address for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAccountStatus(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAccountStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetTradingStatus(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetDustLog(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetDustLogAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.DustTransfer(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.DustTransferAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAssetDividendRecords(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAssetDividendRecordsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAssetDetails(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAssetDetailsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetTradeFee(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal fee for an symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetTradeFeeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trade fee for a symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSubAccounts(System.String,System.Nullable{Binance.Net.Enums.SubAccountStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="accountStatus">Filter the list by account status</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSubAccountsAsync(System.String,System.Nullable{Binance.Net.Enums.SubAccountStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="accountStatus">Filter the list by account status</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSubAccountTransferHistory(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of sub account transfers
            </summary>
            <param name="email">Filter the history by email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSubAccountTransferHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of sub account transfers
            </summary>
            <param name="email">Filter the history by email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.TransferSubAccount(System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one sub account to another
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.TransferSubAccountAsync(System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one sub account to another
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSubAccountStatus(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetSubAccountStatusAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PlaceTestOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="orderResponseType">What kind of response should be returned</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PlaceTestOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="orderResponseType">What kind of response should be returned</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PlaceOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.CancelOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">The new client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOpenOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAllOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PlaceOCOOrder(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PlaceOCOOrderAsync(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.CancelOCOOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.CancelOCOOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOCOOrder(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either listClientOrderId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOCOOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either orderListId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOCOOrders(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOCOOrdersAsync(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOpenOCOOrders(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOpenOCOOrdersAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMyTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMyTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Transfer(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.TransferAsync(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Borrow(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.BorrowAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.Repay(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.RepayAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMarginAssets(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMarginAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMarginPairs(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMarginPairsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PlaceMarginOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.PlaceMarginOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.CancelMarginOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.CancelMarginOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetTransferHistory(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetTransferHistoryAsync(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetLoans(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="limit">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetLoansAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="limit">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetRepays(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="size">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetRepaysAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Filter by number</param>
            <param name="size">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetInterestHistory(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetInterestHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetForceLiquidationHistory(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetForceLiquidationHistoryAsync(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMarginAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMarginAccountOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMarginAccountOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOpenMarginAccountOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetOpenMarginAccountOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAllMarginAccountOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetAllMarginAccountOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMyMarginAccountTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMyMarginAccountTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMaxBorrowAmount(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMaxBorrowAmountAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMaxTransferAmount(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.GetMaxTransferAmountAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.StartUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.KeepAliveUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.StopUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.StartMarginUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to 
            <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. 
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.StartMarginUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to 
            <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. 
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.KeepAliveMarginUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user for margin account stream listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.KeepAliveMarginUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream for margin account listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.CloseMarginUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.CloseMarginUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesClient">
            <summary>
            Interface for the Binance Futures client
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.Ping(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetServerTime(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetExchangeInfo(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOrderBook(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAggregatedTrades(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAggregatedTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetSymbolTrades(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetHistoricalSymbolTrades(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetHistoricalSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetKlines(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetMarkPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetMarkPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllMarkPrices(System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllMarkPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetFundingRates(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetFundingRatesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.Get24HPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.Get24HPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.Get24HPrices(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.Get24HPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllPrices(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetBookPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllBookPrices(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllLiquidationOrders(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all Liquidation Orders
            </summary>
            <param name="Symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get  liquidation orders history</param>
            <param name="endTime">End time to get liquidation orders history</param>
            <param name="limit">Max number of results. Default:100 Max:1000</param>
            <param name="ct">Cancellation token</param>
            <returns>The all liquidation orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllLiquidationOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all Liquidation Orders
            </summary>
            <param name="Symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get  liquidation orders history</param>
            <param name="endTime">End time to get liquidation orders history</param>
            <param name="limit">Max number of results. Default:100 Max:1000</param>
            <param name="ct">Cancellation token</param>
            <returns>The all liquidation orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOpenInterest(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest
            </summary>
            <param name="Symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="Symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetBracket(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets
            </summary>
            <param name="Symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetBracketAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets.
            </summary>
            <param name="Symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetBrackets(System.Threading.CancellationToken)">
            <summary>
            Gets all Notional and Leverage Brackets
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetBracketsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all Notional and Leverage Brackets.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOpenOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.PlaceOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="orderResponseType">The type of response to receive</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.CancelOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">The new client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOpenOrders(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific current orders. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific current orders. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.ChangeInitialLeverage(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.ChangeInitialLeverageAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.ChangeMarginType(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.ChangeMarginTypeAsync(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.ModifyPositionMargin(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.ModifyPositionMarginAsync(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetMarginChangeHistory(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetMarginChangeHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetMyTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetMyTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetFuturesAccountBalance(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets Futures Account Balance
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetFuturesAccountBalanceAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets Futures Account Balance
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetIncomeHistory(System.String,System.Nullable{Binance.Net.Enums.IncomeType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetIncomeHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.IncomeType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOpenPositions(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user positions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.GetOpenPositionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user positions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.StartUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to <see cref="M:Binance.Net.BinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})"/>. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.KeepAliveUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.StopUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesClient.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.LastQuantityFilled">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Type">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Time">
            <summary>
            Forced time
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesMarkPrice">
            <summary>
            Mark Price and Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.MarkPrice">
            <summary>
            The current market price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.FundingRate">
            <summary>
            The last funding rate
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.NextFundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesSocketClient">
            <summary>
            Interface for the Binance Futures socket client
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToMarkPriceUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToMarkPriceUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllMarkPriceUpdates(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllMarkPriceUpdatesAsync(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToKlineUpdates(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToKlineUpdates(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdates(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllMiniTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllMiniTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToBookTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToBookTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllBookTickerUpdates(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllBookTickerUpdatesAsync(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToLiquidationUpdates(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToLiquidationUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllLiquidationUpdates(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllLiquidationUpdatesAsync(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdates(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToOrderBookUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the <see cref="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)"/> method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdateMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToUserDataUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the <see cref="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)"/> method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdateMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceKline">
            <summary>
            Candlestick information for symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.OpenTime">
            <summary>
            The time this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Open">
            <summary>
            The price at which this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.High">
            <summary>
            The highest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Low">
            <summary>
            The lowest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Close">
            <summary>
            The price at which this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Volume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.QuoteAssetVolume">
            <summary>
            The volume traded during this candlestick in the asset form
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TakerBuyBaseAssetVolume">
            <summary>
            Taker buy base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TakerBuyQuoteAssetVolume">
            <summary>
            Taker buy quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceMiniTick">
            <summary>
            MiniTick info
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.LastPrice">
            <summary>
            Close Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.OpenPrice">
            <summary>
            Open Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.HighPrice">
            <summary>
            High
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.LowPrice">
            <summary>
            Low
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.TotalTradedBaseAssetVolume">
            <summary>
            Total traded base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.TotalTradedQuoteAssetVolume">
            <summary>
            Total traded quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceOrderBook">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Symbol">
            <summary>
            The symbol of the order book (only filled from stream updates)
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Bids">
            <summary>
            The list of bids
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Asks">
            <summary>
            The list of asks
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceSocketClient">
            <summary>
            Interface for the Binance socket client
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToSymbolMiniTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToSymbolMiniTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToAllSymbolMiniTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToKlineUpdates(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToKlineUpdates(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToOrderBookUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToBookTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToBookTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToAggregatedTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToAggregatedTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToSymbolTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToSymbolTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToAllSymbolTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToPartialOrderBookUpdates(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToPartialOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Spot.MarketData.BinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the <see cref="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)"/> method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountInfoMessage">The event handler for whenever an account info update is received</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SubscribeToUserDataUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the <see cref="M:Binance.Net.BinanceClient.StartUserStream(System.Threading.CancellationToken)"/> method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountInfoMessage">The event handler for whenever an account info update is received</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco order status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceTick">
            <summary>
            Price statistics of the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.PriceChange">
            <summary>
            The actual price change in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.PriceChangePercent">
            <summary>
            The price change in percentage in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.WeightedAveragePrice">
            <summary>
            The weighted average price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.PrevDayClosePrice">
            <summary>
            The close price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.OpenTime">
            <summary>
            Time at which this 24 hours opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.CloseTime">
            <summary>
            Time at which this 24 hours closed
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.FirstTradeId">
            <summary>
            The first trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.LastTradeId">
            <summary>
            The last trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.TotalTrades">
            <summary>
            The amount of trades made in the last 24 hours
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceTrade">
            <summary>
            Information about a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.OrderId">
            <summary>
            The order id the trade belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Symbol">
            <summary>
            The symbol the trade is for
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.TradeTime">
            <summary>
            The time the trade was made
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.BuyerIsMaker">
            <summary>
            Whether account was the buyer in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.IsBestMatch">
            <summary>
            Whether trade was made with the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceCombinedStream`1">
            <summary>
            Represents the binance result for combined data on a single socket connection
            See on https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md
            Combined streams
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Binance.Net.Objects.BinanceCombinedStream`1.Stream">
            <summary>
            The stream combined
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceCombinedStream`1.Data">
            <summary>
            The data of stream
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceOrderBookEntry">
            <summary>
            An entry in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookEntry.Price">
            <summary>
            The price of this order book entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookEntry.Quantity">
            <summary>
            The quantity of this price in the order book
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceQueryRecords`1">
            <summary>
            Query results
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Binance.Net.Objects.BinanceQueryRecords`1.Rows">
            <summary>
            The list records
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceQueryRecords`1.Total">
            <summary>
            The total count of the records
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceRateLimit">
            <summary>
            Rate limit info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Interval">
            <summary>
            The interval the rate limit uses to count
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Type">
            <summary>
            The type the rate limit applies to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.IntervalNumber">
            <summary>
            The amount of calls the limit is
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Limit">
            <summary>
            The amount of calls the limit is
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceStreamEvent">
            <summary>
            A event received by a Binance websocket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceStreamEvent.Event">
            <summary>
            The type of the event
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceStreamEvent.EventTime">
            <summary>
            The time the event happened
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolFilter">
            <summary>
            A filter for order placed on a symbol. Can be either a <see cref="T:Binance.Net.Objects.BinanceSymbolPriceFilter"/>, <see cref="T:Binance.Net.Objects.BinanceSymbolLotSizeFilter"/>, <see cref="T:Binance.Net.Objects.BinanceSymbolMinNotionalFilter"/>, <see cref="T:Binance.Net.Objects.BinanceSymbolMaxAlgorithmicOrdersFilter"/> or <see cref="T:Binance.Net.Objects.BinanceSymbolIcebergPartsFilter"/> or <see cref="T:Binance.Net.Objects.BinanceSymbolMaxPositionFilter"/>
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolFilter.FilterType">
            <summary>
            The type of this filter
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolPriceFilter">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolPriceFilter.MinPrice">
            <summary>
            The minimal price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolPriceFilter.MaxPrice">
            <summary>
            The max price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolPriceFilter.TickSize">
            <summary>
            The tick size of the price. The price can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolPercentPriceFilter">
            <summary>
            Price percentage filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolPercentPriceFilter.MultiplierUp">
            <summary>
            The max factor the price can deviate up
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolPercentPriceFilter.MultiplierDown">
            <summary>
            The max factor the price can deviate down
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolPercentPriceFilter.AveragePriceMinutes">
            <summary>
            The amount of minutes the average price of trades is calculated over. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceFuturesSymbolPercentPriceFilter">
            <summary>
            Price percentage filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceFuturesSymbolPercentPriceFilter.MultiplierUp">
            <summary>
            The max factor the price can deviate up
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceFuturesSymbolPercentPriceFilter.MultiplierDown">
            <summary>
            The max factor the price can deviate down
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceFuturesSymbolPercentPriceFilter.MultiplierDecimal">
            <summary>
            The amount of minutes the average price of trades is calculated over. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolLotSizeFilter">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolMarketLotSizeFilter">
            <summary>
            Market lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMarketLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMarketLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMarketLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolMinNotionalFilter">
            <summary>
            Min notional filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMinNotionalFilter.MinNotional">
            <summary>
            The minimal total size of an order. This is calculated by Price * Quantity.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMinNotionalFilter.ApplyToMarketOrders">
            <summary>
            Whether or not this filter is applied to market orders. If so the average trade price is used.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMinNotionalFilter.AveragePriceMinutes">
            <summary>
            The amount of minutes the average price of trades is calculated over for market orders. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolMaxOrdersFilter">
            <summary>
            Nax orders filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMaxOrdersFilter.MaxNumberOrders">
            <summary>
            The max number of orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolMaxIcebergOrdersFilter">
            <summary>
            Max iceberg orders filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMaxIcebergOrdersFilter.MaxNumberIcebergOrders">
            <summary>
            The max number of iceberg orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolMaxAlgorithmicOrdersFilter">
            <summary>
            Max algo orders filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMaxAlgorithmicOrdersFilter.MaxNumberAlgorithmicOrders">
            <summary>
            The max number of Algorithmic orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolIcebergPartsFilter">
            <summary>
            Max iceberg parts filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolIcebergPartsFilter.Limit">
            <summary>
            The max parts of an iceberg order for this symbol.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSymbolMaxPositionFilter">
            <summary>
            The max position filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSymbolMaxPositionFilter.MaxPosition">
            <summary>
            The max position an account can have on the base asset of a symbol.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.BinanceFuturesClientOptions">
            <summary>
            Options for the binance client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.AutoTimestampRecalculationInterval">
            <summary>
            Interval for refreshing the auto timestamp calculation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TimestampOffset">
            <summary>
            A manual offset for the timestamp. Should only be used if AutoTimestamp and regular time synchronization on the OS is not reliable enough
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TradeRulesBehaviour">
            <summary>
            Whether to check the trade rules when placing new orders and what to do if the trade isn't valid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TradeRulesUpdateInterval">
            <summary>
            How often the trade rules should be updated. Only used when TradeRulesBehaviour is not None
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Сustom url to connect via mirror website</param>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions">
            <summary>
            Binance socket client options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.BaseSocketCombinedAddress">
            <summary>
            The base address for combined data in socket connections
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.SocketSubscriptionsCombineTarget">
            <summary>
            The amount of subscriptions that should be made on a single socket connection. Not all exchanges support multiple subscriptions on a single socket.
            Setting this to a higher number increases subscription speed, but having more subscriptions on a single connection will also increase the amount of traffic on that single connection.
            Not available on Binance.
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Сustom url to connect via mirror website</param>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.AccountAlias">
            <summary>
            Account alias
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.Balance">
            <summary>
            The total balance of this asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.WithdrawAvailable">
            <summary>
            The total balance available for withdraw for this asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.UpdateTime">
            <summary>
            The time of balance was updated
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder">
            <summary>
            The result of cancel order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.CummulativeQuantity">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.CummulativeQuoteQuantity">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ExecutedQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OriginalQuantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OriginalType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.PriceRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult">
            <summary>
            Result from a change margin type request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult.Code">
            <summary>
            Response code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult.Message">
            <summary>
            Response message
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory">
            <summary>
            Futures income history result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Symbol">
            <summary>
            Symbol for the resulting income history, may be null if not associated with a trading pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.IncomeType">
            <summary>
            Type of income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Income">
            <summary>
            Amount of income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Asset">
            <summary>
            Base asset for the income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Info">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Time">
            <summary>
            Time of the income
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult">
            <summary>
            Response to the change in initial leverage request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.Leverage">
            <summary>
            New leverage multiplier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.MaxNotionalValue">
            <summary>
            Maximum value that can be held
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.Symbol">
            <summary>
            Symbol the request is for
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult">
            <summary>
            Result of the margin change history request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Amount">
            <summary>
            Request amount of margin used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Asset">
            <summary>
            Base asset used for margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Symbol">
            <summary>
            Symbol margin is placed on
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Time">
            <summary>
            Time of the margin change request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Type">
            <summary>
            Direction of the margin change request
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder">
            <summary>
            The result of query order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.AvgPrice">
            <summary>
            The average price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.CummulativeQuantity">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.CummulativeQuoteQuantity">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ExecutedQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.OriginalQuantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.OriginalType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.PriceRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.CreatedTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.CummulativeQuoteQuantity">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ExecutedQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.OriginalQuantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.PriceRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.EntryPrice">
            <summary>
            The entry price of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.MarginType">
            <summary>
            Type of margin used for the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.IsAutoAddMargin">
            <summary>
            Does the position add margin automatically?
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.IsolatedMargin">
            <summary>
            Amount of isolated margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.Leverage">
            <summary>
            The current initial leverage of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.LiquidationPrice">
            <summary>
            The Liquidation price of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.MarkPrice">
            <summary>
            The Market price of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.MaxNotionalValue">
            <summary>
            The notional value limit of current initial leverage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.Quantity">
            <summary>
            The quantity of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.Symbol">
            <summary>
            The symbol the position is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.UnrealizedPnL">
            <summary>
            The price of the unrealized PnL
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult">
            <summary>
            Result of the requested margin amount change
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Amount">
            <summary>
            New margin amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Code">
            <summary>
            Request response code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.MaxNotionalValue">
            <summary>
            Maximum margin value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Type">
            <summary>
            Direction of the requested margin change
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo">
            <summary>
            Exchange info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.TimeZone">
            <summary>
            The timezone the server uses
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.ServerTime">
            <summary>
            The current server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.RateLimits">
            <summary>
            The rate limits used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.Symbols">
            <summary>
            All symbols supported
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.ExchangeFilters">
            <summary>
            Filters
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory">
            <summary>
            Funding rate information for Futures trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.FundingRate">
            <summary>
            The finding rate for the given symbol and time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.FundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.LastQuantityFilled">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Type">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Time">
            <summary>
            Forced time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice">
            <summary>
            Mark Price and Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.MarkPrice">
            <summary>
            The current market price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.FundingRate">
            <summary>
            The last funding rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.NextFundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest.OpenInterest">
            <summary>
            Open Interest info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Filters">
            <summary>
            Filters for order on this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaintMarginPercent">
            <summary>
            The maintenance margin percent
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PricePrecision">
            <summary>
            The price Precision
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuantityPrecision">
            <summary>
            The quantity precision
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.RequiredMarginPercent">
            <summary>
            The required margin percent
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.BaseAsset">
            <summary>
            The base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuoteAsset">
            <summary>
            The quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.BaseAssetPrecision">
            <summary>
            The precision of the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuoteAssetPrecision">
            <summary>
            The precision of the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.OrderTypes">
            <summary>
            Allowed order types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Name">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.TimeInForce">
            <summary>
            Allowed order time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PriceFilter">
            <summary>
            Filter for the max accuracy of the price for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.LotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MarketLotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol, specifically for market orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaxOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaxAlgoOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PricePercentFilter">
            <summary>
            Filter for the maximum deviation of the price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket">
            <summary>
            Notional and Leverage Brackets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket.Brackets">
            <summary>
            Brackets
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket">
            <summary>
            Bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.Bracket">
            <summary>
            Notianl bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.InitialLeverage">
            <summary>
            Max initial leverge for this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.NotionalCap">
            <summary>
            Cap notional of this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.NotionalFloor">
            <summary>
            Notionl threshold of this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.MaintMarginRatio">
            <summary>
            Maintenance ratio for this bracket
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidationData">
            <summary>
            A event received by a Binance websocket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidationData.Data">
            <summary>
            The data of the event
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Side">
            <summary>
            Liquidation Sided
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Type">
            <summary>
            Liquidation order type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.TimeInForce">
            <summary>
            Liquidation Time in Force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Quantity">
            <summary>
            Liquidation Original Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Price">
            <summary>
            Liquidation order price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.AveragePrice">
            <summary>
            Liquidation Average Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Status">
            <summary>
            Liquidation Order Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.LastQuantityFilled">
            <summary>
            Liquidation Last Filled Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.QuantityFilled">
            <summary>
            Liquidation Accumulated fill quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Time">
            <summary>
            Liquidation Trade Time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.MarkPrice">
            <summary>
            Mark Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.FundingRate">
            <summary>
            Next Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.NextFundingTime">
            <summary>
            Next Funding Time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.LastPrice">
            <summary>
            Close Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.OpenPrice">
            <summary>
            Open Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.HighPrice">
            <summary>
            High
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.LowPrice">
            <summary>
            Low
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.TotalTradedBaseAssetVolume">
            <summary>
            Total traded base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.TotalTradedQuoteAssetVolume">
            <summary>
            Total traded quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Symbol">
            <summary>
            The symbol of the order book (only filled from stream updates)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.TransactionTime">
            <summary>
            The time the event happened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.FirstUpdateId">
            <summary>
            The ID of the first update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.LastUpdateIdStream">
            <summary>
            The ID of the last update Id in last stream
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Bids">
            <summary>
            The list of diff bids
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Asks">
            <summary>
            The list of diff asks
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.WalletBalance">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.CrossBalance">
            <summary>
            The amount that is locked in a trade
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition">
            <summary>
            Information about an asset position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.Symbol">
            <summary>
            The symbol this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.PositionAmount">
            <summary>
            The amount of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.EntryPrice">
            <summary>
            The entry price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.RealizedPnL">
            <summary>
            The accumulated realized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.UnRealizedPnL">
            <summary>
            The Unrealized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.MarginType">
            <summary>
            The margin type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.IsolatedWallet">
            <summary>
            The isolated wallet (if isolated position)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate">
            <summary>
            Update data about an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.ClientOrderId">
            <summary>
            The new client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.TimeInForce">
            <summary>
            The timespan the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.AveragePrice">
            <summary>
            The average price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.StopPrice">
            <summary>
            The stop price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.ExecutionType">
            <summary>
            The execution type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.OrderId">
            <summary>
            The id of the order as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.QuantityOfLastFilledTrade">
            <summary>
            The quantity of the last filled trade of this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.AccumulatedQuantityOfFilledTrades">
            <summary>
            The quantity of all trades that were filled for this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.PriceLastFilledTrade">
            <summary>
            The price of the last filled trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Commission">
            <summary>
            The commission payed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.CommissionAsset">
            <summary>
            The asset the commission was taken from
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.OrderCreationTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.TradeId">
            <summary>
            The trade id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.BuyerIsMaker">
            <summary>
            Whether the buyer is the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.IsReduce">
            <summary>
            Is this reduce only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.StopPriceWorking">
            <summary>
            Stop price working type
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.BinanceClientOptions">
            <summary>
            Options for the binance client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.AutoTimestampRecalculationInterval">
            <summary>
            Interval for refreshing the auto timestamp calculation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.TimestampOffset">
            <summary>
            A manual offset for the timestamp. Should only be used if AutoTimestamp and regular time synchronization on the OS is not reliable enough
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.TradeRulesBehaviour">
            <summary>
            Whether to check the trade rules when placing new orders and what to do if the trade isn't valid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.TradeRulesUpdateInterval">
            <summary>
            How often the trade rules should be updated. Only used when TradeRulesBehaviour is not None
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Сustom url to connect via mirror website</param>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Spot.BinanceSocketClientOptions">
            <summary>
            Binance socket client options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceSocketClientOptions.BaseSocketCombinedAddress">
            <summary>
            The base address for combined data in socket connections
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceSocketClientOptions.SocketSubscriptionsCombineTarget">
            <summary>
            The amount of subscriptions that should be made on a single socket connection. Not all exchanges support multiple subscriptions on a single socket.
            Setting this to a higher number increases subscription speed, but having more subscriptions on a single connection will also increase the amount of traffic on that single connection.
            Not available on Binance.
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceSocketClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceSocketClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Spot.BinanceOrderBookOptions">
            <summary>
            Binance symbol order book options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceOrderBookOptions.Limit">
            <summary>
            The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceOrderBookOptions.UpdateInterval">
            <summary>
            Update interval in milliseconds, either 100 or 1000. Defaults to 1000
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceOrderBookOptions.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create new options
            </summary>
            <param name="limit">The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.ExecutedQuantity">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Quantity">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory">
            <summary>
            Interest history entry info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestAmount">
            <summary>
            The amount of interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestAccuredTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestRate">
            <summary>
            Interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Principal">
            <summary>
            Principal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Type">
            <summary>
            Type of interest
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount">
            <summary>
            Information about margin account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.BorrowEnabled">
            <summary>
            Boolean indicating if this account can borrow
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TradeEnabled">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TransferEnabled">
            <summary>
            Boolean indicating if this account can transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.MarginLevel">
            <summary>
            Aggregate level of margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalAssetOfBtc">
            <summary>
            Aggregate total balance as BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalLiabilityOfBtc">
            <summary>
            Aggregate total liability balance of BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalNetAssetOfBtc">
            <summary>
            Aggregate total available net balance of BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.Balances">
            <summary>
            Balance list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Borrowed">
            <summary>
            The amount that was borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Interest">
            <summary>
            Commission to need pay by borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAmount">
            <summary>
            The result amount of getting maxBorrowable or maxTransferable 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAmount.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset">
            <summary>
            Margin asset info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.FullName">
            <summary>
            Full name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.Name">
            <summary>
            Short name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.IsBorrowable">
            <summary>
            Is borrowable
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.IsMortgageable">
            <summary>
            Is mortgageable
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.MinimalBorrowAmount">
            <summary>
            Minimal amount which can be borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.MinimalRepayAmount">
            <summary>
            Minimal amount which can be repaid
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair">
            <summary>
            Margin pair info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.BaseAsset">
            <summary>
            Base asset of the pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.QuoteAsset">
            <summary>
            Quote asset of the pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsBuyAllowed">
            <summary>
            Is buying allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsSellAllowed">
            <summary>
            Is selling allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsMarginTrade">
            <summary>
            Is margin trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginTransaction">
            <summary>
            The result of transferring, borrow or repay response
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginTransaction.TransactionId">
            <summary>
            The Transaction id as assigned by Binance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceLoan">
            <summary>
            Loan info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Asset">
            <summary>
            The asset of the loan
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Principal">
            <summary>
            Principal repaid 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Time">
            <summary>
            Time of repay completed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Status">
            <summary>
            The status of the loan
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceRepay">
            <summary>
            Repay info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Asset">
            <summary>
            The asset of the repay
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.TransactionId">
            <summary>
            The transaction id of the repay
            </summary>`
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Amount">
            <summary>
            Total amount repaid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Principal">
            <summary>
            Principal repaid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Time">
            <summary>
            Time of repay completed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Status">
            <summary>
            The status of the repay
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory">
            <summary>
            Transfer history entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Amount">
            <summary>
            Amount of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Asset">
            <summary>
            Asset of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Status">
            <summary>
            Status of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Timestamp">
            <summary>
            Timestamp of the transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Direction">
            <summary>
            Direction of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.Binance24HPrice">
            <summary>
            Price statistics of the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.Symbol">
            <summary>
            The symbol the price is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.PriceChange">
            <summary>
            The actual price change in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.PriceChangePercent">
            <summary>
            The price change in percentage in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.WeightedAveragePrice">
            <summary>
            The weighted average price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.PrevDayClosePrice">
            <summary>
            The close price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.LastPrice">
            <summary>
            The most recent trade price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.OpenPrice">
            <summary>
            The open price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.HighPrice">
            <summary>
            The highest price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.LowPrice">
            <summary>
            The lowest price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.TotalTradedBaseAssetVolume">
            <summary>
            The volume traded in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.TotalTradedQuoteAssetVolume">
            <summary>
            The quote asset volume traded in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.OpenTime">
            <summary>
            Time at which this 24 hours opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.CloseTime">
            <summary>
            Time at which this 24 hours closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.FirstTradeId">
            <summary>
            The first trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.LastTradeId">
            <summary>
            The last trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.TotalTrades">
            <summary>
            The amount of trades made in the last 24 hours
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade">
            <summary>
            Compressed aggregated trade information. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.Price">
            <summary>
            The price of trades in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.Quantity">
            <summary>
            The total quantity of trades in the aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.TradeTime">
            <summary>
            The timestamp of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.WasBestPriceMatch">
            <summary>
            Whether the trade was matched at the best price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice">
            <summary>
            Current average price details for a symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice.Minutes">
            <summary>
            Duration in minutes
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice.Price">
            <summary>
            The average price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice">
            <summary>
            Information about the best price/quantity available for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestBidPrice">
            <summary>
            The highest bid price for the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestBidQuantity">
            <summary>
            The quantity of the highest bid price currently in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestAskPrice">
            <summary>
            The lowest ask price for the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestAskQuantity">
            <summary>
            The quantity of the lowest ask price currently in the order book
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo">
            <summary>
            Exchange info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.TimeZone">
            <summary>
            The timezone the server uses
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.ServerTime">
            <summary>
            The current server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.RateLimits">
            <summary>
            The rate limits used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.Symbols">
            <summary>
            All symbols supported
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.ExchangeFilters">
            <summary>
            Filters
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceKline">
            <summary>
            Candlestick information for symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.OpenTime">
            <summary>
            The time this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.Open">
            <summary>
            The price at which this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.High">
            <summary>
            The highest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.Low">
            <summary>
            The lowest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.Close">
            <summary>
            The price at which this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.Volume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.QuoteAssetVolume">
            <summary>
            The volume traded during this candlestick in the asset form
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.TakerBuyBaseAssetVolume">
            <summary>
            Taker buy base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.TakerBuyQuoteAssetVolume">
            <summary>
            Taker buy quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Symbol">
            <summary>
            The symbol of the order book (only filled from stream updates)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.LastUpdateIdStream">
            <summary>
            Setter for last update id, need for Json.Net
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.FirstUpdateId">
            <summary>
            The id of this update, can be synced with <see cref="M:Binance.Net.BinanceClient.GetOrderBook(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)"/> to update the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Bids">
            <summary>
            The list of bids
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.BidsStream">
            <summary>
            Setter for bids (needed forJson.Net)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Asks">
            <summary>
            The list of asks
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.AsksStream">
            <summary>
            Setter for asks (needed forJson.Net)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinancePrice">
            <summary>
            The price of a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinancePrice.Symbol">
            <summary>
            The symbol the price is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinancePrice.Price">
            <summary>
            The price of the symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade">
            <summary>
            Recent trade info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.OrderId">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.QuoteQuantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.TradeTime">
            <summary>
            The timestamp of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.BuyerIsMaker">
            <summary>
            Whether the buyer is maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.IsBestMatch">
            <summary>
            Whether the trade was made at the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbol">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Name">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseAsset">
            <summary>
            The base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseAssetPrecision">
            <summary>
            The precision of the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteAsset">
            <summary>
            The quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteAssetPrecision">
            <summary>
            The precision of the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.OrderTypes">
            <summary>
            Allowed order types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IceBergAllowed">
            <summary>
            Ice berg orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IsSpotTradingAllowed">
            <summary>
            Spot trading orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IsMarginTradingAllowed">
            <summary>
            Margin trading orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.OCOAllowed">
            <summary>
            If OCO(One Cancels Other) orders are allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteOrderQuantityMarketAllowed">
            <summary>
            Whether or not it is allowed to specify the quantity of a market order in the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseCommissionPrecision">
            <summary>
            The precision of the base asset commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteCommissionPrecision">
            <summary>
            The precision of the quote asset commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Filters">
            <summary>
            Filters for order on this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IceBergPartsFilter">
            <summary>
            Filter for max amount of iceberg parts for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.LotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MarketLotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol, specifically for market orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxIcebergOrdersFilter">
            <summary>
            Filter for max iceberg orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxAlgorithmicOrdersFilter">
            <summary>
            Filter for max algorithmic orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MinNotionalFilter">
            <summary>
            Filter for the minimal size of an order for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.PriceFilter">
            <summary>
            Filter for the max accuracy of the price for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.PricePercentFilter">
            <summary>
            Filter for the maximum deviation of the price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxPositionFilter">
            <summary>
            Filter for the max position
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade">
            <summary>
            Aggregated information about trades for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Symbol">
            <summary>
            The symbol the trade was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregated trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Price">
            <summary>
            The price of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Quantity">
            <summary>
            The combined quantity of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.TradeTime">
            <summary>
            The time of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Ignore">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice">
            <summary>
            Book tick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.UpdateId">
            <summary>
            Update id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestBidPrice">
            <summary>
            Price of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestBidQuantity">
            <summary>
            Quantity of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestAskPrice">
            <summary>
            Price of the best ask
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestAskQuantity">
            <summary>
            Quantity of the best ask
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData">
            <summary>
            Wrapper for kline information for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData.Symbol">
            <summary>
            The symbol the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline">
            <summary>
            The kline data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.OpenTime">
            <summary>
            The open time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Symbol">
            <summary>
            The symbol this candlestick is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Interval">
            <summary>
            The interval of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.FirstTrade">
            <summary>
            The first trade id in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.LastTrade">
            <summary>
            The last trade id in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Open">
            <summary>
            The open price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Close">
            <summary>
            The close price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.High">
            <summary>
            The highest price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Low">
            <summary>
            The lowest price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Volume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Final">
            <summary>
            Boolean indicating whether this candlestick is closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.QuoteAssetVolume">
            <summary>
            The quote volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TakerBuyBaseAssetVolume">
            <summary>
            The volume of active buy
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TakerBuyQuoteAssetVolume">
            <summary>
            The quote volume of active buy
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.ToKline">
            <summary>
            Casts this object to a <see cref="T:Binance.Net.Objects.Spot.MarketData.BinanceKline"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick">
            <summary>
            MiniTick info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.Symbol">
            <summary>
            The symbol this data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.LastPrice">
            <summary>
            The current day close price. This is the latest price for this symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.OpenPrice">
            <summary>
            Todays open price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.HighPrice">
            <summary>
            Todays high price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.LowPrice">
            <summary>
            Todays low price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.TotalTradedBaseAssetVolume">
            <summary>
            Total traded volume in the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.TotalTradedQuoteAssetVolume">
            <summary>
            Total traded volume in the quote asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick">
            <summary>
            Tick info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.Symbol">
            <summary>
            The symbol this data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.PriceChange">
            <summary>
            The price change of this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.PriceChangePercent">
            <summary>
            The price change percentage of this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.WeightedAveragePrice">
            <summary>
            The weighted average
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.PrevDayClosePrice">
            <summary>
            The close price of the previous day
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.LastPrice">
            <summary>
            The current day close price. This is the latest price for this symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.OpenPrice">
            <summary>
            Todays open price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.HighPrice">
            <summary>
            Todays high price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.LowPrice">
            <summary>
            Todays low price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.TotalTradedBaseAssetVolume">
            <summary>
            Total traded volume in the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.TotalTradedQuoteAssetVolume">
            <summary>
            Total traded volume in the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.FirstTradeId">
            <summary>
            The first trade id of today
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.LastTradeId">
            <summary>
            The last trade id of today
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.TotalTrades">
            <summary>
            The total trades of id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.OpenTime">
            <summary>
            The open time of these stats
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.CloseTime">
            <summary>
            The close time of these stats
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade">
            <summary>
            Aggregated information about trades for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Symbol">
            <summary>
            The symbol the trade was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.OrderId">
            <summary>
            The id of this aggregated trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Price">
            <summary>
            The price of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Quantity">
            <summary>
            The combined quantity of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.BuyerOrderId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.SellerOrderId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.TradeTime">
            <summary>
            The time of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.IsBestMatch">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.MakerCommission">
            <summary>
            Commission percentage to pay when making trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.TakerCommission">
            <summary>
            Commission percentage to pay when taking trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.BuyerCommission">
            <summary>
            Commission percentage to buy when buying
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.SellerCommission">
            <summary>
            Commission percentage to buy when selling
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanTrade">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanWithdraw">
            <summary>
            Boolean indicating if this account can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanDeposit">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.UpdateTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.AccountType">
            <summary>
            The type of account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.Balances">
            <summary>
            List of assets with their current balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder">
            <summary>
            Information about a canceled order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Symbol">
            <summary>
            The symbol the order was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.OrderId">
            <summary>
            The order id as generated by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.ClientOrderId">
            <summary>
            The new client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.OriginalClientOrderId">
            <summary>
            The client order id the order was
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.OrderListId">
            <summary>
            The order list id as generated by Binance, only for OCO orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Price">
            <summary>
            The price the order was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Quantity">
            <summary>
            Original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.QuantityFilled">
            <summary>
            Executed quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.QuoteQuantityFilled">
            <summary>
            Cummulative quote quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Status">
            <summary>
            Status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.TimeInForce">
            <summary>
            Time in force of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Type">
            <summary>
            Type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Side">
            <summary>
            Side of the order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrder">
            <summary>
            Information regarding a specific order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.OrderId">
            <summary>
            The order id generated by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.OrderListId">
            <summary>
            The order list id as generated by Binance, only for OCO orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.OriginalClientOrderId">
            <summary>
            Original order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.QuantityFilled">
            <summary>
            The currently executed quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.TimeInForce">
            <summary>
            How long the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.StopPrice">
            <summary>
            The stop price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.IcebergQuantity">
            <summary>
            The iceberg quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.CreateTime">
            <summary>
            The time the order was submitted
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.UpdateTime">
            <summary>
            The time the order was last updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.IsWorking">
            <summary>
            Is working
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList">
            <summary>
            The result of placing a new OCO order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.OrderListId">
            <summary>
            The id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ContingencyType">
            <summary>
            The contingency type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListStatusType">
            <summary>
            The order list status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListOrderStatus">
            <summary>
            The order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListClientOrderId">
            <summary>
            The client id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.TransactionTime">
            <summary>
            The transaction time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.Symbol">
            <summary>
            The symbol of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.Orders">
            <summary>
            The order in this list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.OrderReports">
            <summary>
            The order details
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderId">
            <summary>
            Order reference
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.OrderListId">
            <summary>
            Id of the order list this order belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.CreateTime">
            <summary>
            The time the order was placed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.QuantityFilled">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.StopPrice">
            <summary>
            The StopPrice of the order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.TradeId">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Price">
            <summary>
            Price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Quantity">
            <summary>
            Quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Commission">
            <summary>
            Commission paid over this trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.CommissionAsset">
            <summary>
            The asset the commission is paid in
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.OrderListId">
            <summary>
            Id of the order list this order belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.OriginalClientOrderId">
            <summary>
            Original order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.CreateTime">
            <summary>
            The time the order was placed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.QuantityFilled">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Fills">
            <summary>
            Fills for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.MarginBuyBorrowAmount">
            <summary>
            Only present if a margin trade happened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.MarginBuyBorrowAsset">
            <summary>
            Only present if a margin trade happened
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceTrade">
            <summary>
            Information about a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Symbol">
            <summary>
            The symbol the trade is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Id">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.OrderId">
            <summary>
            The order id the trade belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.OrderListId">
            <summary>
            Id of the order list this order belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.QuoteQuantity">
            <summary>
            The quote quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Commission">
            <summary>
            The commission paid for the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.CommissionAsset">
            <summary>
            The asset the commission is paid in
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.TradeTime">
            <summary>
            The time the trade was made
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsBuyer">
            <summary>
            Whether account was the buyer in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsMaker">
            <summary>
            Whether account was the maker in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsBestMatch">
            <summary>
            Whether trade was made with the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount">
            <summary>
            Sub account details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Email">
            <summary>
            The email associated with the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Status">
            <summary>
            The status of the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Activated">
            <summary>
            Whether or not the sub account has been activated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Mobile">
            <summary>
            The mobile associated with the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.GoogleAuthentication">
            <summary>
            If Google authentication is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.CreateTime">
            <summary>
            The time the sub account was created
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus">
            <summary>
            Sub-account Status on Margin/Futures
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsAccountEnabled">
            <summary>
            Sub account user enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsActive">
            <summary>
            Sub account user active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.CreateTime">
            <summary>
            The time the sub account was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsMarginEnabled">
            <summary>
            Is Margin enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.isFutureEnabled">
            <summary>
            Is Futures enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.MobileNumber">
            <summary>
            User mobile number
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer">
            <summary>
            Sub account transfer info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.From">
            <summary>
            From which email the transfer originated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.To">
            <summary>
            To which email the transfer was to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Asset">
            <summary>
            The asset of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Quantity">
            <summary>
            The quantity of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Timestamp">
            <summary>
            The timestamp of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult">
            <summary>
            Sub account transfer result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult.Success">
            <summary>
            Whether the transfer was successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult.TransactionId">
            <summary>
            The transaction id of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.Time">
            <summary>
            Time of last account update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.MakerCommission">
            <summary>
            Commission percentage to pay when making trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.TakerCommission">
            <summary>
            Commission percentage to pay when taking trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.BuyerCommission">
            <summary>
            Commission percentage to buy when buying
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.SellerCommission">
            <summary>
            Commission percentage to buy when selling
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanTrade">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanWithdraw">
            <summary>
            Boolean indicating if this account can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanDeposit">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.AccountType">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.Balances">
            <summary>
            List of assets with their current balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate">
            <summary>
            Update when asset is withdrawn/deposited 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.Asset">
            <summary>
            The asset which changed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.BalanceDelta">
            <summary>
            The balance delta
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.ClearTime">
            <summary>
            The time the deposit/withdrawal was cleared
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList">
            <summary>
            Order list info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.OrderListId">
            <summary>
            The id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ContingencyType">
            <summary>
            The contingency type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListStatusType">
            <summary>
            The order list status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListOrderStatus">
            <summary>
            The order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListClientOrderId">
            <summary>
            The client id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.TransactionTime">
            <summary>
            The transaction time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.Symbol">
            <summary>
            The symbol of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.Orders">
            <summary>
            The order in this list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId">
            <summary>
            Order reference
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate">
            <summary>
            Update data about an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.ClientOrderId">
            <summary>
            The new client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.TimeInForce">
            <summary>
            The timespan the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.StopPrice">
            <summary>
            The stop price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.IcebergQuantity">
            <summary>
            The iceberg quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OriginalClientOrderId">
            <summary>
            The original client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.ExecutionType">
            <summary>
            The execution type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.RejectReason">
            <summary>
            The reason the order was rejected
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OrderId">
            <summary>
            The id of the order as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastQuantityFilled">
            <summary>
            The quantity of the last filled trade of this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuantityFilled">
            <summary>
            The quantity of all trades that were filled for this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastPriceFilled">
            <summary>
            The price of the last filled trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Commission">
            <summary>
            The commission payed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.CommissionAsset">
            <summary>
            The asset the commission was taken from
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.UpdateTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.TradeId">
            <summary>
            The trade id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.IsWorking">
            <summary>
            Is working
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.BuyerIsMaker">
            <summary>
            Whether the buyer is the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.CreateTime">
            <summary>
            Time the order was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuoteQuantity">
            <summary>
            Quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastQuoteQuantity">
            <summary>
            Last quote asset transacted quantity (i.e. LastPrice * LastQuantity)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OrderListId">
            <summary>
            This id of the corresponding order list. (-1 if not part of an order list)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.I">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus">
            <summary>
            Account status info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus.Message">
            <summary>
            The result message
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus.Success">
            <summary>
            Success boolean
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus.Objects">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress">
            <summary>
            Deposit address info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Address">
            <summary>
            The deposit address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Success">
            <summary>
            Whether the call was successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.AddressTag">
            <summary>
            Address tag
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Asset">
            <summary>
            Asset the address is for
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDepositList">
            <summary>
            Wrapper for list of deposits
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositList.List">
            <summary>
            The list of deposits
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositList.Success">
            <summary>
            Boolean indicating if the deposit list retrieval was successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositList.Message">
            <summary>
            Message what went wrong if retrieving wasn't successful
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDeposit">
            <summary>
            Information about a deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.InsertTime">
            <summary>
            Time the deposit was added to Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Amount">
            <summary>
            The amount deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Asset">
            <summary>
            The asset deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Address">
            <summary>
            The address of the deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Status">
            <summary>
            The status of the deposit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord">
            <summary>
            Dividend record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Timestamp">
            <summary>
            Timestamp of the transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustLog">
            <summary>
            Dust log details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.TransferredTotal">
            <summary>
            Total transferred
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.ServiceChargeTotal">
            <summary>
            Total service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.Logs">
            <summary>
            Detail logs
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.OperateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails">
            <summary>
            Dust log entry details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.ServiceChargeAmount">
            <summary>
            Service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.UId">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.OperateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.TransferredAmount">
            <summary>
            Transferred amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.FromAsset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult">
            <summary>
            Result of dust transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TotalServiceCharge">
            <summary>
            Total service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TotalTransferred">
            <summary>
            Total transferred
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TransferResult">
            <summary>
            Transfer entries
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry">
            <summary>
            Dust transfer entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.Amount">
            <summary>
            Amount of dust
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.FromAsset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.Timestamp">
            <summary>
            Timestamp of conversion
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.ServiceChargeAmount">
            <summary>
            Service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.TransferredAmount">
            <summary>
            BNB result amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus">
            <summary>
            The status of Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus.Message">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee">
            <summary>
            Trade fee info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.Symbol">
            <summary>
            The symbol this fee is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.MakerFee">
            <summary>
            The fee for trades where you're the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.TakerFee">
            <summary>
            The fee for trades where you're the taker
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus">
            <summary>
            Trade status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.IsLocked">
            <summary>
            Is locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.PlannedRecoverTime">
            <summary>
            Planned time of recovery
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.TriggerConditions">
            <summary>
            Conditions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.Indicators">
            <summary>
            Dictionary of indicator lists for symbols
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceIndicator">
            <summary>
            Indicator info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.IndicatorType">
            <summary>
            Indicator name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.CurrentValue">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.TriggerValue">
            <summary>
            Trigger value
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails">
            <summary>
            Asset details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.MinimalWithdrawAmount">
            <summary>
            Minimal amount you can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.DepositStatus">
            <summary>
            Whether deposits are enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.WithdrawStatus">
            <summary>
            Whether withdrawing is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.WithdrawFee">
            <summary>
            Fee for withdrawing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.DepositTip">
            <summary>
            Status string for deposit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalList">
            <summary>
            Wrapper for list of withdrawals
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalList.List">
            <summary>
            The list of withdrawals
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalList.Success">
            <summary>
            Boolean indicating if the withdrawal list retrieval was successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalList.Message">
            <summary>
            Message what went wrong if retrieving wasn't successful
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal">
            <summary>
            Information about a withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Id">
            <summary>
            The id of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.ApplyTime">
            <summary>
            The time the withdrawal was applied for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Amount">
            <summary>
            The amount of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Address">
            <summary>
            The address the asset was withdrawn to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.AddressTag">
            <summary>
            Tag for the address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.TransactionFee">
            <summary>
            Transaction fee for the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Asset">
            <summary>
            The asset that was withdrawn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced">
            <summary>
            Result of placing a withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced.Success">
            <summary>
            Boolean indicating the success of submitting the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced.Message">
            <summary>
            Message describing what went wrong if not successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced.Id">
            <summary>
            The id
            </summary>
        </member>
    </members>
</doc>
