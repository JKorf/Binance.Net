<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Binance.Net</name>
    </assembly>
    <members>
        <member name="T:Binance.Net.BinanceClient">
            <summary>
            Client providing access to the Binance REST Api
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.System">
            <summary>
            System endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Account">
            <summary>
            Account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.SubAccount">
            <summary>
            Sub account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Margin">
            <summary>
            Margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.IsolatedMargin">
            <summary>
            Isolated Margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Spot">
            <summary>
            Spot endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Lending">
            <summary>
            Lending endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Mining">
            <summary>
            Mining endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Dust">
            <summary>
            Dust endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Withdraw">
            <summary>
            Withdraw endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Deposit">
            <summary>
            Deposit endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Brokerage">
            <summary>
            Brokerage endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Futures">
            <summary>
            Futures endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceClient.#ctor">
            <summary>
            Create a new instance of BinanceClient using the default options
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceClient.#ctor(Binance.Net.Objects.Spot.BinanceClientOptions)">
            <summary>
            Create a new instance of BinanceClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Binance.Net.BinanceClient.SetDefaultOptions(Binance.Net.Objects.Spot.BinanceClientOptions)">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Binance.Net.BinanceClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.BinanceClient.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.BinanceHelpers">
            <summary>
            Helper methods for the Binance API
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.UsedWeight(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Get the used weight from the response headers
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.UsedOrderCount(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Get the used weight from the response headers
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ClampQuantity(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamp a quantity between a min and max quantity and floor to the closest step
            </summary>
            <param name="minQuantity"></param>
            <param name="maxQuantity"></param>
            <param name="stepSize"></param>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ClampPrice(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamp a price between a min and max price
            </summary>
            <param name="minPrice"></param>
            <param name="maxPrice"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.FloorPrice(System.Decimal,System.Decimal)">
            <summary>
            Floor a price to the closest tick
            </summary>
            <param name="tickSize"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.Floor(System.Decimal)">
            <summary>
            Floor
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ValidateBinanceSymbol(System.String)">
            <summary>
            Validate the string is a valid Binance symbol.
            </summary>
            <param name="symbolString">string to validate</param>
        </member>
        <member name="T:Binance.Net.BinanceSocketClient">
            <summary>
            Client providing access to the Binance websocket Api
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceSocketClient.Spot">
            <summary>
            Spot subscriptions
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceSocketClient.Futures">
            <summary>
            Futures subscriptions
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.#ctor">
            <summary>
            Create a new instance of BinanceSocketClient with default options
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.#ctor(Binance.Net.Objects.Spot.BinanceSocketClientOptions)">
            <summary>
            Create a new instance of BinanceSocketClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SetDefaultOptions(Binance.Net.Objects.Spot.BinanceSocketClientOptions)">
            <summary>
            Set the default options to be used when creating new socket clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.AuthenticateSocket(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.Unsubscribe(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.Enums.AccountType">
            <summary>
            Type of account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Spot">
            <summary>
            Spot account type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Margin">
            <summary>
            Margin account type
            </summary>>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Futures">
            <summary>
            Futures account type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Leveraged">
            <summary>
            Leveraged account type
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.DepositStatus">
            <summary>
            The status of a deposit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ExecutionType">
            <summary>
            The type of execution
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Replaced">
            <summary>
            Replaced
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FuturesMarginChangeDirectionType">
            <summary>
            The direction to change futures margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginChangeDirectionType.Add">
            <summary>
            Add margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginChangeDirectionType.Reduce">
            <summary>
            Reduce Margin
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FuturesMarginType">
            <summary>
            Type of Margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginType.Isolated">
            <summary>
            Isolated margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginType.Cross">
            <summary>
            Crossed margin
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.IncomeType">
            <summary>
            Type of futures income
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.Transfer">
            <summary>
            Transfer into account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.WelcomeBonus">
            <summary>
            Futures welcome bonus
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.RealizedPnL">
            <summary>
            Futures realized profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.FundingFee">
            <summary>
            Futures funding fee
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.Commission">
            <summary>
            Futures trading commission
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.InsuranceClear">
            <summary>
            Insurance clear
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.IndicatorType">
            <summary>
            Types of indicators
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.UnfilledRatio">
            <summary>
            Unfilled ratio
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.ExpirationRatio">
            <summary>
            Expired orders ratio
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.CancellationRatio">
            <summary>
            Cancelled orders ratio
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.IsolatedMarginTransferDirection">
            <summary>
            Transfer direction for isolated margin transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IsolatedMarginTransferDirection.Spot">
            <summary>
            Spot
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IsolatedMarginTransferDirection.IsolatedMargin">
            <summary>
            Isolated margin
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.KlineInterval">
            <summary>
            The interval for the kline
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            3m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.TwoHour">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FourHour">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.SixHour">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.EightHour">
            <summary>
            8h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.TwelveHour">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThreeDay">
            <summary>
            3d
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneWeek">
            <summary>
            1w
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneMonth">
            <summary>
            1M
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.LendingType">
            <summary>
            Lending type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.LendingType.Daily">
            <summary>
            Flexible
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.LendingType.Regular">
            <summary>
            Fixed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.LendingType.CustomizedFixed">
            <summary>
            Customized fixed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ListOrderStatus">
            <summary>
            List order status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Executing">
            <summary>
            Executing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Done">
            <summary>
            Executed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ListStatusType">
            <summary>
            List status type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.Response">
            <summary>
            Failed action
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.ExecutionStarted">
            <summary>
            Placed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.Done">
            <summary>
            Order list is done
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.MarginLevelStatus">
            <summary>
            Margin level status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.Excessive">
            <summary>
            Excessive
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.MarginCall">
            <summary>
            Margin call
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.PreLiquidation">
            <summary>
            Pre-liquidation
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.ForceLiquidation">
            <summary>
            Force liquidation
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.MarginStatus">
            <summary>
            Status of a margin action
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Pending">
            <summary>
            Pending to execution
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Completed">
            <summary>
            Executed, waiting to be confirmed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Confirmed">
            <summary>
            Successfully loaned/repayed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Failed">
            <summary>
            execution failed, nothing happened to your account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.MinerStatus">
            <summary>
            Miner status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MinerStatus.All">
            <summary>
            All miners
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MinerStatus.Valid">
            <summary>
            Valid
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MinerStatus.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MinerStatus.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderRejectReason">
            <summary>
            The reason the order was rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.None">
            <summary>
            Not rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownInstrument">
            <summary>
            Unknown instrument
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.MarketClosed">
            <summary>
            Closed market
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.PriceQuantityExceedsHardLimits">
            <summary>
            Quantity out of bounds
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownOrder">
            <summary>
            Unknown order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.DuplicateOrder">
            <summary>
            Duplicate
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownAccount">
            <summary>
            Unkown account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.InsufficientBalance">
            <summary>
            Not enough balance
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.AccountInactive">
            <summary>
            Account not active
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.AccountCannotSettle">
            <summary>
            Cannot settle
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderResponseType">
            <summary>
            Response type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Acknowledge">
            <summary>
            Ack only
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Result">
            <summary>
            Resulting order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Full">
            <summary>
            Full order info
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderSide">
            <summary>
            The side of an order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderStatus">
            <summary>
            The status of an orderн
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.New">
            <summary>
            Order is new
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.PartiallyFilled">
            <summary>
            Order is partly filled, still has quantity left to fill
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Filled">
            <summary>
            The order has been filled and completed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Canceled">
            <summary>
            The order has been canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.PendingCancel">
            <summary>
            The order is in the process of being canceled  (currently unused)
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Rejected">
            <summary>
            The order has been rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Expired">
            <summary>
            The order has expired
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Insurance">
            <summary>
            Liquidation with Insurance Fund
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Adl">
            <summary>
            Counterparty Liquidation
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderType">
            <summary>
            The type of an order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Limit">
            <summary>
            Limit orders will be placed at a specific price. If the price isn't available in the order book for that asset the order will be added in the order book for someone to fill.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Market">
            <summary>
            Market order will be placed without a price. The order will be executed at the best price available at that time in the order book.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopLoss">
            <summary>
            Stop loss order. Will execute a market order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopLossLimit">
            <summary>
            Stop loss order. Will execute a limit order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Stop">
            <summary>
            Stop loss order. Will execute a market order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopMarket">
            <summary>
            Stop loss order. Will be executed at the best price available at that time in the order book
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfit">
            <summary>
            Take profit order. Will execute a market order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfitMarket">
            <summary>
            Take profit order. Will be executed at the best price available at that time in the order book
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfitLimit">
            <summary>
            Take profit order. Will execute a limit order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.LimitMaker">
            <summary>
            Same as a limit order, however it will fail if the order would immediately match, therefor preventing taker orders
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TrailingStopMarket">
            <summary>
            Trailing stop order will be placed without a price. The order will be executed at the best price available at that time in the order book.
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.PeriodInterval">
            <summary>
            The interval for the period
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.FifteenMinutes">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.ThirtyMinutes">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.TwoHour">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.FourHour">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.SixHour">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.TwelveHour">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.PositionMode">
            <summary>
            User position mode
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionMode.Hedge">
            <summary>
            In the Hedge Mode, one contract can hold positions in both long and short directions at the same time, and hedge positions in different directions under the same contract.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionMode.OneWay">
            <summary>
            In the One-way Mode, one contract can only hold positions in one direction.
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionSide.Short">
            <summary>
            Short
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionSide.Long">
            <summary>
            Long
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionSide.Both">
            <summary>
            Both for One-way mode when placing an order
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ProductStatus">
            <summary>
            Status of a product
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProductStatus.All">
            <summary>
            All products
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProductStatus.Subscribable">
            <summary>
            Products which are subscribable
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProductStatus.Unsubscribable">
            <summary>
            Products which are unsubscribable
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ProjectStatus">
            <summary>
            Project status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProjectStatus.Holding">
            <summary>
            Holding
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProjectStatus.Redeemed">
            <summary>
            Redeemed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ProjectType">
            <summary>
            The type of project
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProjectType.Regular">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProjectType.CustomizedFixed">
            <summary>
            Customized fixed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.RateLimitInterval">
            <summary>
            Rate limit on what unit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Second">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Minute">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Day">
            <summary>
            Days
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.RateLimitType">
            <summary>
            Type of rate limit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.RequestWeight">
            <summary>
            Request weight
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.Orders">
            <summary>
            Order amount
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.RawRequests">
            <summary>
            Raw requests
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.RedeemType">
            <summary>
            Redeem type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RedeemType.Fast">
            <summary>
            Fast
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RedeemType.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SideEffectType">
            <summary>
            Side effect for a margin order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.NoSideEffect">
            <summary>
            Normal trade
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.MarginBuy">
            <summary>
            Margin trade order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.AutoRepay">
            <summary>
            Make auto repayment after order is filled
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SubAccountStatus">
            <summary>
            Status of the sub account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountStatus.Enabled">
            <summary>
            Enabled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountStatus.Disabled">
            <summary>
            Disabled
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SubAccountTransferSubAccountType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountTransferSubAccountType.TransferIn">
            <summary>
            From main spot account to sub account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountTransferSubAccountType.TransferOut">
            <summary>
            From sub account to main spot account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SubAccountTransferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountTransferType.FromSpotMain">
            <summary>
            From main spot account to sub account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountTransferType.ToSpotMain">
            <summary>
            From sub account to main spot account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SymbolFilterType">
            <summary>
            Filter type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.Unknown">
            <summary>
            Unknown filter type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.Price">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.PricePercent">
            <summary>
            Price percent filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.LotSize">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MarketLotSize">
            <summary>
            Market lot size filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MinNotional">
            <summary>
            Min notional filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxNumberOrders">
            <summary>
            Max orders filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxNumberAlgorithmicOrders">
            <summary>
            Max algo orders filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.IcebergParts">
            <summary>
            Max iceberg parts filter
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SymbolStatus">
            <summary>
            Status of a symbol
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PreTrading">
            <summary>
            Not trading yet
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Trading">
            <summary>
            Trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PostTrading">
            <summary>
            No longer trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.EndOfDay">
            <summary>
            Not trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Halt">
            <summary>
            Halted
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.AuctionMatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Break">
            <summary>
            
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SystemStatus">
            <summary>
            Status of the Binance system
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SystemStatus.Normal">
            <summary>
            Operational
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SystemStatus.Maintenance">
            <summary>
            In maintenance
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TimeInForce">
            <summary>
            The time the order will be active for
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.GoodTillCancel">
            <summary>
            GoodTillCancel orders will stay active until they are filled or canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.ImmediateOrCancel">
            <summary>
            ImmediateOrCancel orders have to be at least partially filled upon placing or will be automatically canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.FillOrKill">
            <summary>
            FillOrKill orders have to be entirely filled upon placing or will be automatically canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.GootTillCrossing">
            <summary>
            GootTillCrossing orders will post only
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TradeRulesBehaviour">
            <summary>
            Trade rules behaviour
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.ThrowError">
            <summary>
            Throw an error if not complying
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.AutoComply">
            <summary>
            Auto adjust order when not complying
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TransferDirection">
            <summary>
            Direction of a transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirection.RollIn">
            <summary>
            Roll-in
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirection.RollOut">
            <summary>
            Roll-out
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TransferDirectionType">
            <summary>
            Transfer direction
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirectionType.MainToMargin">
            <summary>
            From main account to margin account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirectionType.MarginToMain">
            <summary>
            From margin account to main account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.WithdrawalStatus">
            <summary>
            The status of a withdrawal
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.EmailSend">
            <summary>
            Email has been send
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Canceled">
            <summary>
            Withdrawal has been canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.AwaitingApproval">
            <summary>
            Withdrawal is awaiting approval
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Rejected">
            <summary>
            Withdrawal has been rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Processing">
            <summary>
            Withdrawal is processing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Failure">
            <summary>
            Withdrawal has failed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Completed">
            <summary>
            Withdrawal has been processed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.WorkingType">
            <summary>
            Type of working
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WorkingType.Mark">
            <summary>
            Mark price type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WorkingType.Contract">
            <summary>
            Contract price type
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceAggregatedTrade">
            <summary>
            Compressed aggregated trade information. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.Price">
            <summary>
            The price of trades in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.Quantity">
            <summary>
            The total quantity of trades in the aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.TradeTime">
            <summary>
            The timestamp of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceBookPrice">
            <summary>
            Book tick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestBidPrice">
            <summary>
            Price of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestBidQuantity">
            <summary>
            Quantity of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestAskPrice">
            <summary>
            Price of the best ask
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestAskQuantity">
            <summary>
            Quantity of the best ask
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceBrokerageClient">
            <summary>
            Client providing access to the Binance Brokerage REST Api
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.CreateSubAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Generate a sub account under your brokerage master account
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Created sub-account id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Margin for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Margin result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Futures for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Futures result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.CreateApiKeyForSubAccountAsync(System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create Api Key for Sub Account
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="isTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.DeleteSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delete Sub Account Api Key
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeSubAccountApiPermissionAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Api Permission
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="isTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetSubAccountsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeSubAccountCommissionAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Commission
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>If margin disabled, it is not allowed to send marginMakerCommission or marginTakerCommission</para>
            <para>If margin enabled, marginMakerCommission or marginTakerCommission has default value as spotMakerCommission or spotTakerCommission</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="makerCommission">Maker commission</param>
            <param name="takerCommission">Taker commission</param>
            <param name="marginMakerCommission">Margin maker commission</param>
            <param name="marginTakerCommission">Margin taker commission</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Futures Commission Adjustment
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>The sub-account's futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If futures disabled, it is not allowed to set subaccount's futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="makerAdjustment">Maker adjustment (100 for 0.01%)</param>
            <param name="takerAdjustment">Taker adjustment (100 for 0.01%)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account futures commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Futures Commission Adjustment
            <para>The sub-account's futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If symbol not sent, commission adjustment of all symbols will be returned</para>
            <para>If futures disabled, it is not allowed to set subaccount's futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account futures commissions result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetBrokerAccountInfoAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Broker Account Information
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Broker information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.TransferAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id, must be unique</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetTransferHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page</param>
            <param name="limit">Limit</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetBrokerCommissionRebatesRecentAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate Recent Record
            <para>Only get the latest history of past 7 days</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="limit">Limit (Default 500, max 1000)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Rebates history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetBrokerCommissionRebatesHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate History
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="limit">Limit (default 1000)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>A download link for an offline file</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeBnbBurnForSubAccountSpotAndMarginAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="spotBnbBurn">"true" or "false", spot and margin whether use BNB to pay for transaction fees or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeBnbBurnForSubAccountMarginInterestAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account Margin Interest
            <para>Sub account must be enabled margin before using this switch</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="interestBnbBurn">"true" or "false", margin loan whether uses BNB to pay for margin interest or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetBnbBurnStatusForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get BNB Burn Status for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Status</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceClient">
            <summary>
            Binance interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.System">
            <summary>
            System endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Account">
            <summary>
            Account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.SubAccount">
            <summary>
            Sub account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Margin">
            <summary>
            Margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.IsolatedMargin">
            <summary>
            Isolated Margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Spot">
            <summary>
            Spot endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Lending">
            <summary>
            Lending endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Mining">
            <summary>
            Mining endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Dust">
            <summary>
            Dust endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Withdraw">
            <summary>
            Withdraw endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Deposit">
            <summary>
            Deposit endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Brokerage">
            <summary>
            Brokerage endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Futures">
            <summary>
            Futures endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.LastQuantityFilled">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Type">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Time">
            <summary>
            Forced time
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesMarkPrice">
            <summary>
            Mark Price and Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.MarkPrice">
            <summary>
            The current market price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.FundingRate">
            <summary>
            The last funding rate
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.NextFundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesSocketClient">
            <summary>
            Interface for the Binance Futures socket client
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToMarkPriceUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToMarkPriceUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllMarkPriceUpdates(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllMarkPriceUpdatesAsync(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToKlineUpdates(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToKlineUpdates(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdates(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllMiniTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllMiniTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToBookTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToBookTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllBookTickerUpdates(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllBookTickerUpdatesAsync(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToLiquidationUpdates(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToLiquidationUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllLiquidationUpdates(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToAllLiquidationUpdatesAsync(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdates(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToOrderBookUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToUserDataUpdates(System.String,System.Action{System.Decimal},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition}},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Futures.UserStream.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onCrossWalletUpdate">The event handler for whenever a cross wallet has changed</param>
            <param name="onMarginUpdate">The event handler for whenever a margin has changed</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdate">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdate">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceFuturesSocketClient.SubscribeToUserDataUpdatesAsync(System.String,System.Action{System.Decimal},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition}},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Futures.UserStream.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onCrossWalletUpdate">The event handler for whenever a cross wallet has changed</param>
            <param name="onMarginUpdate">The event handler for whenever a margin has changed</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdate">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdate">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceKline">
            <summary>
            Candlestick information for symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.OpenTime">
            <summary>
            The time this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Open">
            <summary>
            The price at which this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.High">
            <summary>
            The highest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Low">
            <summary>
            The lowest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Close">
            <summary>
            The price at which this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Volume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.QuoteAssetVolume">
            <summary>
            The volume traded during this candlestick in the asset form
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TakerBuyBaseAssetVolume">
            <summary>
            Taker buy base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TakerBuyQuoteAssetVolume">
            <summary>
            Taker buy quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceMiniTick">
            <summary>
            MiniTick info
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.LastPrice">
            <summary>
            Close Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.OpenPrice">
            <summary>
            Open Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.HighPrice">
            <summary>
            High
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.LowPrice">
            <summary>
            Low
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.TotalTradedBaseAssetVolume">
            <summary>
            Total traded base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.TotalTradedQuoteAssetVolume">
            <summary>
            Total traded quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceOrderBook">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Symbol">
            <summary>
            The symbol of the order book (only filled from stream updates)
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Bids">
            <summary>
            The list of bids
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Asks">
            <summary>
            The list of asks
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceSocketClient">
            <summary>
            Interface for subscribing to streams
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceSocketClient.Spot">
            <summary>
            Spot subscription
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceSocketClient.Futures">
            <summary>
            Futures subscriptions
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceTick">
            <summary>
            Price statistics of the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.PriceChange">
            <summary>
            The actual price change in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.PriceChangePercent">
            <summary>
            The price change in percentage in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.WeightedAveragePrice">
            <summary>
            The weighted average price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.PrevDayClosePrice">
            <summary>
            The close price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.OpenTime">
            <summary>
            Time at which this 24 hours opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.CloseTime">
            <summary>
            Time at which this 24 hours closed
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.FirstTradeId">
            <summary>
            The first trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.LastTradeId">
            <summary>
            The last trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.TotalTrades">
            <summary>
            The amount of trades made in the last 24 hours
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceTrade">
            <summary>
            Information about a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.OrderId">
            <summary>
            The order id the trade belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Symbol">
            <summary>
            The symbol the trade is for
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.TradeTime">
            <summary>
            The time the trade was made
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.BuyerIsMaker">
            <summary>
            Whether account was the buyer in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.IsBestMatch">
            <summary>
            Whether trade was made with the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase">
            <summary>
            Base interface for socket client
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAggregatedTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAggregatedTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToKlineUpdates(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToKlineUpdates(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolMiniTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolMiniTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllSymbolMiniTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllSymbolTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToBookTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToBookTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllBookTickerUpdates(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllBookTickerUpdatesAsync(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToPartialOrderBookUpdates(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToPartialOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToOrderBookUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures">
            <summary>
            Futures subscription interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToMarkPriceUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToMarkPriceUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToAllMarkPriceUpdates(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToAllMarkPriceUpdatesAsync(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            /// <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToLiquidationUpdates(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToLiquidationUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToAllLiquidationUpdates(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToAllLiquidationUpdatesAsync(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToUserDataUpdates(System.String,System.Action{System.Decimal},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition}},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Futures.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onCrossWalletUpdate">The event handler for whenever a cross wallet has changed</param>
            <param name="onMarginUpdate">The event handler for whenever a margin has changed</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdate">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdate">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToUserDataUpdatesAsync(System.String,System.Action{System.Decimal},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition}},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Futures.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onCrossWalletUpdate">The event handler for whenever a cross wallet has changed</param>
            <param name="onMarginUpdate">The event handler for whenever a margin has changed</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdate">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdate">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot">
            <summary>
            Spot subscription interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Spot.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountInfoMessage">The event handler for whenever an account info update is received</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToUserDataUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Spot.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountInfoMessage">The event handler for whenever an account info update is received</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco order status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures">
            <summary>
            Futures interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.Account">
            <summary>
            Futures account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.Market">
            <summary>
            Futures market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.System">
            <summary>
            Futures system endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.Order">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.UserStream">
            <summary>
            Futures user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ModifyPositionMode(System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="dualPositionSide">User position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ModifyPositionModeAsync(System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="dualPositionSide">User position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetPositionMode(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symboln
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetPositionModeAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ChangeInitialLeverage(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ChangeInitialLeverageAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ChangeMarginType(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ChangeMarginTypeAsync(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ModifyPositionMargin(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ModifyPositionMarginAsync(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetMarginChangeHistory(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetMarginChangeHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetOpenPositions(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user positions
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetOpenPositionsAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user positions
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetIncomeHistory(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetIncomeHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetBracket(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetBracketAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetBrackets(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all Notional and Leverage Brackets
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetBracketsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all Notional and Leverage Brackets.
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesAccount">
            <summary>
            Futures account interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesAccount.GetFuturesAccountBalance(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesAccount.GetFuturesAccountBalanceAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesAccount.GetAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesAccount.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket">
            <summary>
            Futures market interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetMarkPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetMarkPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetAllMarkPrices(System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetAllMarkPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetFundingRates(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetFundingRatesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetAllLiquidationOrders(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all Liquidation Orders
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get  liquidation orders history</param>
            <param name="endTime">End time to get liquidation orders history</param>
            <param name="limit">Max number of results. Default:100 Max:1000</param>
            <param name="ct">Cancellation token</param>
            <returns>The all liquidation orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetAllLiquidationOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all Liquidation Orders
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get  liquidation orders history</param>
            <param name="endTime">End time to get liquidation orders history</param>
            <param name="limit">Max number of results. Default:100 Max:1000</param>
            <param name="ct">Cancellation token</param>
            <returns>The all liquidation orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetOpenInterest(System.String,System.Threading.CancellationToken)">
            <summary>
            Get present open interest of a specific symbol.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get present open interest of a specific symbol.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetOpenInterestHistory(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest History
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get open interest history</param>
            <param name="endTime">End time to get open interest history</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest History info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetOpenInterestHistoryAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest History
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get open interest history</param>
            <param name="endTime">End time to get open interest history</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest History info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetTopLongShortAccountRatio(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (accounts)</param>
            <param name="endTime">End time to get top trader long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetTopLongShortAccountRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (accounts)</param>
            <param name="endTime">End time to get top trader long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetTopLongShortPositionRatio(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Positions)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (positions)</param>
            <param name="endTime">End time to get top trader long/short ratio (positions)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Positions) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetTopLongShortPositionRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Positions)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (positions)</param>
            <param name="endTime">End time to get top trader long/short ratio (positions)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Positions) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetGlobalLongShortAccountRatio(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Global Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get global long/short ratio (accounts)</param>
            <param name="endTime">End time to get global long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Global Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetGlobalLongShortAccountRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Global Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get global long/short ratio (accounts)</param>
            <param name="endTime">End time to get global long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Global Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetTakerBuySellVolumeRatio(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Taker Buy/Sell Volume Ratio
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get taker buy/sell volume ratio</param>
            <param name="endTime">End time to get taker buy/sell volume ratio</param>
            <param name="ct">Cancellation token</param>
            <returns>Taker Buy/Sell Volume Ratio info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetTakerBuySellVolumeRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Taker Buy/Sell Volume Ratio
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get taker buy/sell volume ratio</param>
            <param name="endTime">End time to get taker buy/sell volume ratio</param>
            <param name="ct">Cancellation token</param>
            <returns>Taker Buy/Sell Volume Ratio info</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders">
            <summary>
            Futures orders interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.PlaceOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill/GootTillCrossing)</param>
            <param name="positionSide">The position side</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">A unique id among open orders. Automatically generated if not sent.</param>
            <param name="stopPrice">Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders.</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="closePosition">Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET.</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="positionSide">The position side</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="closePosition">Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.PlaceMultipleOrders(Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder[],System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in one call
            </summary>
            <param name="orders">The orders to place</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Returns a list of call results, one for each order. The order the results are in is the order the orders were sent</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.PlaceMultipleOrdersAsync(Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder[],System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in one call
            </summary>
            <param name="orders">The orders to place</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Returns a list of call results, one for each order. The order the results are in is the order the orders were sent</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">The new client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelAllOrders(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelAllOrdersAfterTimeout(System.String,System.TimeSpan,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all open orders of the specified symbol at the end of the specified countdown. This rest endpoint means to ensure your open orders are canceled in case of an outage. The endpoint should be called repeatedly as heartbeats
            so that the existing countdown time can be canceled and replaced by a new one.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="countDownTime">The time after which all open orders should cancel, or 0 to cancel an existing timer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Countdown result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelAllOrdersAfterTimeoutAsync(System.String,System.TimeSpan,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all open orders of the specified symbol at the end of the specified countdown. This rest endpoint means to ensure your open orders are canceled in case of an outage. The endpoint should be called repeatedly as heartbeats
            so that the existing countdown time can be canceled and replaced by a new one.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="countDownTime">The time after which all open orders should cancel, or 0 to cancel an existing timer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Countdown result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelMultipleOrders(System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels muliple orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderIdList">The list of order ids to cancel</param>
            <param name="origClientOrderIdList">The list of client order ids to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelMultipleOrdersAsync(System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels muliple orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderIdList">The list of order ids to cancel</param>
            <param name="origClientOrderIdList">The list of client order ids to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOpenOrders(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific current orders. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific current orders. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOpenOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetAllOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetMyTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetMyTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem">
            <summary>
            Futures system interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem.Ping(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance Futures API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance Futures API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem.GetServerTime(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem.GetExchangeInfo(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientAccount">
            <summary>
            Account interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetDailySpotAccountSnapshot(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (balances)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetDailySpotAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (balances)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetDailyMarginAccountSnapshot(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetDailyMarginAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetDailyFutureAccountSnapshot(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets and positions)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetDailyFutureAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets and positions)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetAccountStatus(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetAccountStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetTradingStatus(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetUserCoins(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets information of coins for a user
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetUserCoinsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets information of coins for a user
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetAssetDividendRecords(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.GetAssetDividendRecordsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.DisableFastWithdrawSwitch(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This request will disable fastwithdraw switch under your account.
            You need to enable "trade" option for the api key which requests this endpoint.
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.DisableFastWithdrawSwitchAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This request will disable fastwithdraw switch under your account.
            You need to enable "trade" option for the api key which requests this endpoint.
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.EnableFastWithdrawSwitch(System.Nullable{System.Int32},System.Threading.CancellationToken)">
             <summary>
             This request will enable fastwithdraw switch under your account.
             You need to enable "trade" option for the api key which requests this endpoint.
            
             When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly.
             There is no on-chain transaction, no transaction ID and no withdrawal fee.
             </summary>
             <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
             <param name="ct">Cancellation token</param>
             <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientAccount.EnableFastWithdrawSwitchAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
             <summary>
             This request will enable fastwithdraw switch under your account.
             You need to enable "trade" option for the api key which requests this endpoint.
            
             When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly.
             There is no on-chain transaction, no transaction ID and no withdrawal fee.
             </summary>
             <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
             <param name="ct">Cancellation token</param>
             <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage">
            <summary>
            Brokerage interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.CreateSubAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Generate a sub account under your brokerage master account
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Created sub-account id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Margin for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Margin result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Futures for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Futures result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.CreateApiKeyForSubAccountAsync(System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create Api Key for Sub Account
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="isTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.DeleteSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delete Sub Account Api Key
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeSubAccountApiPermissionAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Api Permission
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="isTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeSubAccountCommissionAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Commission
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>If margin disabled, it is not allowed to send marginMakerCommission or marginTakerCommission</para>
            <para>If margin enabled, marginMakerCommission or marginTakerCommission has default value as spotMakerCommission or spotTakerCommission</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="makerCommission">Maker commission</param>
            <param name="takerCommission">Taker commission</param>
            <param name="marginMakerCommission">Margin maker commission</param>
            <param name="marginTakerCommission">Margin taker commission</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Futures Commission Adjustment
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>The sub-account's futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If futures disabled, it is not allowed to set subaccount's futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="makerAdjustment">Maker adjustment (100 for 0.01%)</param>
            <param name="takerAdjustment">Taker adjustment (100 for 0.01%)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account futures commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Futures Commission Adjustment
            <para>The sub-account's futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If symbol not sent, commission adjustment of all symbols will be returned</para>
            <para>If futures disabled, it is not allowed to set subaccount's futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account futures commissions result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetBrokerAccountInfoAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Broker Account Information
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Broker information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.TransferAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id, must be unique</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetTransferHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page</param>
            <param name="limit">Limit</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetBrokerCommissionRebatesRecentAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate Recent Record
            <para>Only get the latest history of past 7 days</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="limit">Limit (Default 500, max 1000)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Rebates history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetBrokerCommissionRebatesHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate History
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="limit">Limit (default 1000)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>A download link for an offline file</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeBnbBurnForSubAccountSpotAndMarginAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="spotBnbBurn">"true" or "false", spot and margin whether use BNB to pay for transaction fees or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeBnbBurnForSubAccountMarginInterestAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account Margin Interest
            <para>Sub account must be enabled margin before using this switch</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="interestBnbBurn">"true" or "false", margin loan whether uses BNB to pay for margin interest or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetBnbBurnStatusForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get BNB Burn Status for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Status</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientDeposit">
            <summary>
            Deposit interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDeposit.GetDepositHistory(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="coin">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="limit">Amount of results</param>
            <param name="offset">Offset the results</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDeposit.GetDepositHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="coin">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="limit">Amount of results</param>
            <param name="offset">Offset the results</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDeposit.GetDepositAddress(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="coin">Asset to get address for</param>
            <param name="network">Network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDeposit.GetDepositAddressAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="coin">Asset to get address for</param>
            <param name="network">Network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDeposit.GetAssetDetails(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDeposit.GetAssetDetailsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientDust">
            <summary>
            Dust interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDust.GetDustLog(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDust.GetDustLogAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDust.DustTransfer(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientDust.DustTransferAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientLending">
            <summary>
            Lending interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFlexibleProductList(System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get product list
            </summary>
            <param name="status">Filter by status</param>
            <param name="featured">Filter by featured</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of product</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFlexibleProductListAsync(System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get product list
            </summary>
            <param name="status">Filter by status</param>
            <param name="featured">Filter by featured</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of product</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLeftDailyPurchaseQuotaOfFlexableProduct(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the purchase quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLeftDailyPurchaseQuotaOfFlexableProductAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the purchase quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.PurchaseFlexibleProduct(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="amount">The amount to purchase</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.PurchaseFlexibleProductAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="amount">The amount to purchase</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLeftDailyRedemptionQuotaOfFlexibleProduct(System.String,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the redemption quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLeftDailyRedemptionQuotaOfFlexibleProductAsync(System.String,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the redemption quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.RedeemFlexibleProduct(System.String,System.Decimal,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Redeem flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Redeem type</param>
            <param name="amount">The amount to redeem</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.RedeemFlexibleProductAsync(System.String,System.Decimal,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Redeem flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Redeem type</param>
            <param name="amount">The amount to redeem</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFlexibleProductPosition(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get flexible product position
            </summary>
            <param name="asset">Asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Flexible product position</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFlexibleProductPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get flexible product position
            </summary>
            <param name="asset">Asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Flexible product position</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFixedAndCustomizedFixedProjectList(Binance.Net.Enums.ProjectType,System.String,System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get fixed and customized fixed project list
            </summary>
            <param name="type">Type of project</param>
            <param name="asset">Asset</param>
            <param name="status">Filter by status</param>
            <param name="sortAscending">If should sort ascending</param>
            <param name="sortBy">Sort by. Valid values: "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME"</param>
            <param name="currentPage">Result page</param>
            <param name="size">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Project list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFixedAndCustomizedFixedProjectListAsync(Binance.Net.Enums.ProjectType,System.String,System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get fixed and customized fixed project list
            </summary>
            <param name="type">Type of project</param>
            <param name="asset">Asset</param>
            <param name="status">Filter by status</param>
            <param name="sortAscending">If should sort ascending</param>
            <param name="sortBy">Sort by. Valid values: "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME"</param>
            <param name="currentPage">Result page</param>
            <param name="size">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Project list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.PurchaseCustomizedFixedProject(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase customized fixed project
            </summary>
            <param name="projectId">Id of the project</param>
            <param name="lot">The lot</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.PurchaseCustomizedFixedProjectAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase customized fixed project
            </summary>
            <param name="projectId">Id of the project</param>
            <param name="lot">The lot</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetCustomizedFixedProjectPositions(System.String,System.String,System.Nullable{Binance.Net.Enums.ProjectStatus},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get customized fixed project position
            </summary>
            <param name="asset">Asset</param>
            <param name="projectId">The project id</param>
            <param name="status">Filter by status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Customized fixed project position</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetCustomizedFixedProjectPositionsAsync(System.String,System.String,System.Nullable{Binance.Net.Enums.ProjectStatus},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get customized fixed project position
            </summary>
            <param name="asset">Asset</param>
            <param name="projectId">The project id</param>
            <param name="status">Filter by status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Customized fixed project position</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLendingAccount(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get lending account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Lending account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLendingAccountAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get lending account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Lending account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetPurchaseRecords(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get purchase records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The purchase records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetPurchaseRecordsAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get purchase records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The purchase records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetRedemptionRecords(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get redemption records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The redemption records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetRedemptionRecordsAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get redemption records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The redemption records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLendingInterestHistory(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get interest history
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The interest history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLendingInterestHistoryAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get interest history
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The interest history</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientMarket">
            <summary>
            Interface for market data
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetOrderBook(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetSymbolTrades(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetHistoricalSymbolTrades(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetHistoricalSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetAggregatedTrades(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetAggregatedTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetKlines(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.Get24HPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.Get24HPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.Get24HPrices(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.Get24HPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetAllPrices(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetAllPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetBookPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetAllBookPrices(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientMining">
            <summary>
            Mining interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningCoinList(System.Threading.CancellationToken)">
            <summary>
            Gets mining coins info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningCoinListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets mining coins info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningAlgorithmList(System.Threading.CancellationToken)">
            <summary>
            Gets mining algorithms info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Algorithms info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningAlgorithmListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets mining algorithms info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Algorithms info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMinerDetails(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets miner details
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="workerName">Miners name</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMinerDetailsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets miner details
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="workerName">Miners name</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMinerList(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{Binance.Net.Enums.MinerStatus},System.Threading.CancellationToken)">
            <summary>
            Gets miner list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="sortAscending">Sort in ascending order</param>
            <param name="sortColumn">Column to sort by</param>
            <param name="workerStatus">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMinerListAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{Binance.Net.Enums.MinerStatus},System.Threading.CancellationToken)">
            <summary>
            Gets miner list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="sortAscending">Sort in ascending order</param>
            <param name="sortColumn">Column to sort by</param>
            <param name="workerStatus">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningRevenueList(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets revenue list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="coin">Coin</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningRevenueListAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets revenue list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="coin">Coin</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningStatistics(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get mining statistics
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">User name</param>
            <param name="ct">Cancellation token</param>
            <returns>Mining statistics</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningStatisticsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get mining statistics
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">User name</param>
            <param name="ct">Cancellation token</param>
            <returns>Mining statistics</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningAccountListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets mining account list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account user name</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount">
            <summary>
            Sub accounts interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccounts(System.String,System.Nullable{Binance.Net.Enums.SubAccountStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="accountStatus">Filter the list by account status</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsAsync(System.String,System.Nullable{Binance.Net.Enums.SubAccountStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="accountStatus">Filter the list by account status</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountTransferForMasterHistory(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the master account) 
            </summary>
            <param name="email">Filter the history by email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountTransferHistoryForMasterAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the master account) 
            </summary>
            <param name="email">Filter the history by email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccount(System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one sub account to another
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountAsync(System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one sub account to another
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountAssets(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets list of balances for a sub account
            </summary>
            <param name="email">For which account to get the assets</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountAssetsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets list of balances for a sub account
            </summary>
            <param name="email">For which account to get the assets</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountDepositAddress(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a coin to a sub account
            </summary>
            <param name="email">The email of the account to deposit to</param>
            <param name="coin">The coin of the deposit</param>
            <param name="network">The coin network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountDepositAddressAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a coin to a sub account
            </summary>
            <param name="email">The email of the account to deposit to</param>
            <param name="coin">The coin of the deposit</param>
            <param name="network">The coin network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountDepositHistory(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history for a sub account
            </summary>
            <param name="email">The email of the account to get history for</param>
            <param name="coin">Filter for a coin</param>
            <param name="startTime">Only return deposits placed later this</param>
            <param name="endTime">Only return deposits placed before this</param>
            <param name="limit">Max number of results</param>
            <param name="offset">Offset results by this</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountDepositHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history for a sub account
            </summary>
            <param name="email">The email of the account to get history for</param>
            <param name="coin">Filter for a coin</param>
            <param name="startTime">Only return deposits placed later this</param>
            <param name="endTime">Only return deposits placed before this</param>
            <param name="limit">Max number of results</param>
            <param name="offset">Offset results by this</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountStatus(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountStatusAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.EnableMarginForSubAccount(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables margin for a sub account
            </summary>
            <param name="email">The email of the account to enable margin for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin enable status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables margin for a sub account
            </summary>
            <param name="email">The email of the account to enable margin for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin enable status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountMarginDetails(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin details for a sub account
            </summary>
            <param name="email">The email of the account to get margin details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountMarginDetailsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin details for a sub account
            </summary>
            <param name="email">The email of the account to get margin details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsMarginSummary(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin summary</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsMarginSummaryAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin summary</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.EnableFuturesForSubAccount(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables futures for a sub account
            </summary>
            <param name="email">The sub account email to enable futures for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables futures for a sub account
            </summary>
            <param name="email">The sub account email to enable futures for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountFuturesDetails(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures details for a sub account
            </summary>
            <param name="email">The email of the account to get future details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountFuturesDetailsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures details for a sub account
            </summary>
            <param name="email">The email of the account to get future details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsFuturesSummary(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures summary</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsFuturesSummaryAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures summary</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsFuturesPositionRisk(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures position risk for a sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Position risk</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsFuturesPositionRiskAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures position risk for a sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Position risk</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountFutures(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a futures sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountFuturesAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a futures sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountMargin(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a margin sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountMarginAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a margin sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountToSubAccount(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to another sub account of the same master
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountToSubAccountAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to another sub account of the same master
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountToMaster(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to master account
            </summary>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountToMasterAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to master account
            </summary>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountTransferHistoryForSubAccount(System.String,System.Nullable{Binance.Net.Enums.SubAccountTransferSubAccountType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the sub account)
            </summary>
            <param name="asset">The asset</param>
            <param name="type">Filter by type of transfer</param>
            <param name="startTime">Only return transfers later than this</param>
            <param name="endTime">Only return transfers before this</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountTransferHistoryForSubAccountAsync(System.String,System.Nullable{Binance.Net.Enums.SubAccountTransferSubAccountType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the sub account)
            </summary>
            <param name="asset">The asset</param>
            <param name="type">Filter by type of transfer</param>
            <param name="startTime">Only return transfers later than this</param>
            <param name="endTime">Only return transfers before this</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientSystem">
            <summary>
            System interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.Ping(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetServerTime(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetExchangeInfo(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetSystemStatus(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetSystemStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream">
            <summary>
            Interface for user stream
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.StartUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Futures.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Futures.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.KeepAliveUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.StopUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientWithdraw">
            <summary>
            Withdraw interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdraw.Withdraw(System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="amount">The amount to withdraw</param>
            <param name="withdrawOrderId">Custom client order id</param>
            <param name="network">The network to use</param>
            <param name="name">Description of the address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdraw.WithdrawAsync(System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="withdrawOrderId">Custom client order id</param>
            <param name="amount">The amount to withdraw</param>
            <param name="network">The network to use</param>
            <param name="name">Description of the address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdraw.GetWithdrawalHistory(System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdraw.GetWithdrawalHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdraw.GetAssetDetails(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdraw.GetAssetDetailsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMargin">
            <summary>
            Isolated margin interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMargin.UserStream">
            <summary>
            Isolated margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMargin.CreateIsolatedMarginAccountAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="baseAsset">The base asset</param>
            <param name="quoteAsset">The quote asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMargin.IsolatedMarginAccountTransfer(System.String,System.String,Binance.Net.Enums.IsolatedMarginTransferDirection,Binance.Net.Enums.IsolatedMarginTransferDirection,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfer from or to isolated margin account
            </summary>
            <param name="asset">The asset</param>
            <param name="symbol">Isolated symbol</param>
            <param name="from">From</param>
            <param name="to">To</param>
            <param name="amount">Amount to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMargin.GetIsolatedMarginAccountTransferHistory(System.String,System.String,System.Nullable{Binance.Net.Enums.IsolatedMarginTransferDirection},System.Nullable{Binance.Net.Enums.IsolatedMarginTransferDirection},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get history of transfer to and from the isolated margin account
            </summary>
            <param name="symbol">The symbol</param>
            <param name="asset">Filter by asset</param>
            <param name="from">Filter by direction</param>
            <param name="to">Filter by direction</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="current">Current page</param>
            <param name="limit">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMargin.GetIsolatedMarginAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMargin.GetIsolatedMarginSymbol(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin symbol info
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMargin.GetIsolatedMarginSymbols(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin symbol info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream">
            <summary>
            Isolated margin user stream interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.StartIsolatedMarginUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates. 
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.StartIsolatedMarginUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to  BinanceSocketClient.Spot.SubscribeToUserDataUpdates  
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.KeepAliveIsolatedMarginUserStream(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user for margin account stream listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.KeepAliveIsolatedMarginUserStreamAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream for margin account listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.CloseIsolatedMarginUserStream(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.CloseIsolatedMarginUserStreamAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin">
            <summary>
            Margin interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.Market">
            <summary>
            Margin market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.Order">
            <summary>
            Margin order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.UserStream">
            <summary>
            Margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.Transfer(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.TransferAsync(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.Borrow(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.BorrowAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.Repay(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.RepayAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetTransferHistory(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetTransferHistoryAsync(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetLoans(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetLoansAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetRepays(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="size">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetRepaysAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Filter by number</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="size">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetInterestHistory(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetInterestHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetForceLiquidationHistory(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetForceLiquidationHistoryAsync(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMarginAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMaxBorrowAmount(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMaxBorrowAmountAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMaxTransferAmount(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMaxTransferAmountAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket">
            <summary>
            Margin market interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginAsset(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin asset
            </summary>
            <param name="asset">The asset to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin asset</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginAssetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin asset
            </summary>
            <param name="asset">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPair(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin pair
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin asset</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPairAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin pair
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginAssets(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPairs(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPairsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPriceIndex(System.String,System.Threading.CancellationToken)">
            <summary>
            Get margin price index
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin price index</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPriceIndexAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get margin price index
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin price index</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders">
            <summary>
            Margin orders interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.PlaceMarginOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.PlaceMarginOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.CancelMarginOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.CancelMarginOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMarginAccountOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMarginAccountOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetOpenMarginAccountOrders(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetOpenMarginAccountOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetAllMarginAccountOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetAllMarginAccountOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMyMarginAccountTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMyMarginAccountTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot">
            <summary>
            Spot interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.Market">
            <summary>
            Spot market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.Order">
            <summary>
            Spot order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.UserStream">
            <summary>
            Spot user stream endpoints
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket">
            <summary>
            Spot market interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetCurrentAvgPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetCurrentAvgPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetTradeFee(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal fee for an symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetTradeFeeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trade fee for a symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder">
            <summary>
            Spot order interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceTestOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceTestOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">The new client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelAllOpenOrders(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders on a symbol
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelAllOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders on a symbol
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOpenOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetAllOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceOCOOrder(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceOCOOrderAsync(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelOCOOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelOCOOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOCOOrder(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either listClientOrderId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOCOOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either orderListId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOCOOrders(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOCOOrdersAsync(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOpenOCOOrders(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOpenOCOOrdersAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetMyTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetMyTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.Objects.BinanceCombinedStream`1">
            <summary>
            Represents the binance result for combined data on a single socket connection
            See on https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md
            Combined streams
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Binance.Net.Objects.BinanceCombinedStream`1.Stream">
            <summary>
            The stream combined
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceCombinedStream`1.Data">
            <summary>
            The data of stream
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceOrderBookEntry">
            <summary>
            An entry in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookEntry.Price">
            <summary>
            The price of this order book entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookEntry.Quantity">
            <summary>
            The quantity of this price in the order book
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceQueryRecords`1">
            <summary>
            Query results
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Binance.Net.Objects.BinanceQueryRecords`1.Rows">
            <summary>
            The list records
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceQueryRecords`1.Total">
            <summary>
            The total count of the records
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceRateLimit">
            <summary>
            Rate limit info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Interval">
            <summary>
            The interval the rate limit uses to count
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Type">
            <summary>
            The type the rate limit applies to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.IntervalNumber">
            <summary>
            The amount of calls the limit is
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Limit">
            <summary>
            The amount of calls the limit is
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceResult`1">
            <summary>
            Query result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Binance.Net.Objects.BinanceResult`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceResult`1.Code">
            <summary>
            Result code
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceStreamEvent">
            <summary>
            A event received by a Binance websocket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceStreamEvent.Event">
            <summary>
            The type of the event
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceStreamEvent.EventTime">
            <summary>
            The time the event happened
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions">
            <summary>
            Options for the binance brokerage client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.AutoTimestampRecalculationInterval">
            <summary>
            Interval for refreshing the auto timestamp calculation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.TimestampOffset">
            <summary>
            A manual offset for the timestamp. Should only be used if AutoTimestamp and regular time synchronization on the OS is not reliable enough
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo">
            <summary>
            Account Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MaxMakerCommission">
            <summary>
            Max Maker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MinMakerCommission">
            <summary>
            Min Maker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MaxTakerCommission">
            <summary>
            Max Taker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MinTakerCommission">
            <summary>
            Min Taker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.SubAccountQuantity">
            <summary>
            Sub Account Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MaxSubAccountQuantity">
            <summary>
            Max Sub Account Quantity
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult">
            <summary>
            Api Key Create Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.ApiKey">
            <summary>
            Api Key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.ApiSecret">
            <summary>
            Api Secret
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.IsSpotTradingEnabled">
            <summary>
            Is Spot Trading Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.IsMarginTradingEnabled">
            <summary>
            Is Margin Trading Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.IsFuturesTradingEnabled">
            <summary>
            Is Futures Trading Enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageBnbBurnStatus">
            <summary>
            BNB Burn Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageBnbBurnStatus.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageBnbBurnStatus.IsSpotBnbBurn">
            <summary>
            Is Spot BNB Burn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageBnbBurnStatus.IsInterestBnbBurn">
            <summary>
            Is Interest BNB Burn
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnMarginInterestResult">
            <summary>
            Enable Or Disable BNB Burn Margin Interest Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnMarginInterestResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnMarginInterestResult.IsInterestBnbBurn">
            <summary>
            Is Interest BNB Burn
            </summary> 
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnSpotAndMarginResult">
            <summary>
            Enable Or Disable BNB Burn Spot And Margin Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnSpotAndMarginResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnSpotAndMarginResult.IsSpotBnbBurn">
            <summary>
            Is Spot BNB Burn
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableFuturesResult">
            <summary>
            Enable Futures Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableFuturesResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableFuturesResult.IsFuturesEnabled">
            <summary>
            Is Futures Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableFuturesResult.UpdateDate">
            <summary>
            Update Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableMarginResult">
            <summary>
            Enable Margin Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableMarginResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableMarginResult.IsMarginEnabled">
            <summary>
            Is Margin Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableMarginResult.UpdateDate">
            <summary>
            Update Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate">
            <summary>
            Brokerage Rebate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.Income">
            <summary>
            Income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.TradeId">
            <summary>
            Trade Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccount">
            <summary>
            Sub Account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccount.CreateDate">
            <summary>
            Create Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey">
            <summary>
            Sub Account Api Key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.ApiKey">
            <summary>
            Api Key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.IsTradingEnabled">
            <summary>
            Is Trading Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.IsMarginTradingEnabled">
            <summary>
            Is Margin Trading Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.IsFuturesTradingEnabled">
            <summary>
            Is Futures Trading Enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission">
            <summary>
            Sub Account Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.MakerCommission">
            <summary>
            Maker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.TakerCommission">
            <summary>
            Taker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.MarginMakerCommission">
            <summary>
            Margin Maker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.MarginTakerCommission">
            <summary>
            Margin Taker Commission
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCreateResult">
            <summary>
            Sub Account Create Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCreateResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission">
            <summary>
            Sub Account Futures Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.MakerAdjustment">
            <summary>
            Futures commission adjustment for maker </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.TakerAdjustment">
            <summary>
            Futures commission adjustment for taker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.MakerCommission">
            <summary>
            Futures commission (after adjusted) for maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.TakerCommission">
            <summary>
            Futures commission (after adjusted) for taker
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferResult">
            <summary>
            Transfer Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferResult.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferResult.ClientTransferId">
            <summary>
            Client Transfer Id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction">
            <summary>
            Transfer Transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.ClientTransferId">
            <summary>
            Client Transfer Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.FromId">
            <summary>
            From Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.ToId">
            <summary>
            To Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.BinanceFuturesClientOptions">
            <summary>
            Options for the binance client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.AutoTimestampRecalculationInterval">
            <summary>
            Interval for refreshing the auto timestamp calculation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TimestampOffset">
            <summary>
            A manual offset for the timestamp. Should only be used if AutoTimestamp and regular time synchronization on the OS is not reliable enough
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TradeRulesBehaviour">
            <summary>
            Whether to check the trade rules when placing new orders and what to do if the trade isn't valid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TradeRulesUpdateInterval">
            <summary>
            How often the trade rules should be updated. Only used when TradeRulesBehaviour is not None
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Сustom url to connect via mirror website</param>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions">
            <summary>
            Binance socket client options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.BaseSocketCombinedAddress">
            <summary>
            The base address for combined data in socket connections
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.SocketSubscriptionsCombineTarget">
            <summary>
            The amount of subscriptions that should be made on a single socket connection. Not all exchanges support multiple subscriptions on a single socket.
            Setting this to a higher number increases subscription speed, but having more subscriptions on a single connection will also increase the amount of traffic on that single connection.
            Not available on Binance.
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Сustom url to connect via mirror website</param>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset">
            <summary>
            Information about an account asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.InitialMargin">
            <summary>
            Initial Margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.MaintMargin">
            <summary>
            Maint Margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.MarginBalance">
            <summary>
            Margin Balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.MaxWithdrawAmount">
            <summary>
            Maximum Withdraw Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.OpenOrderInitialMargin">
            <summary>
            Open Order Initial Margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.PositionInitialMargin">
            <summary>
            Position Initial Margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.UnrealizedProfit">
            <summary>
            Unrealized Profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.WalletBalance">
            <summary>
            Wallet Balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.CrossWalletBalance">
            <summary>
            Crossed Wallet Balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.CrossUnPnl">
            <summary>
            Unrealized profit of crossed positions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.AccountAlias">
            <summary>
            Account alias
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.Balance">
            <summary>
            The total balance of this asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.CrossWalletBalance">
            <summary>
            Crossed wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.CrossPositionsUnrealizedProfitAndLoss">
            <summary>
            Unrealized profit of crossed positions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.MaxWithdrawAvailable">
            <summary>
            Maximum amount for transfer out
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.Assets">
            <summary>
            Information about an account assets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.CanDeposit">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.CanTrade">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.CanWithdraw">
            <summary>
            Boolean indicating if this account can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.FeeTier">
            <summary>
            Fee tier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.MaxWithdrawAmount">
            <summary>
            Maximum withdraw amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.Positions">
            <summary>
            Information about an account positions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalMaintMargin">
            <summary>
            Total maint margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalOpenOrderInitialMargin">
            <summary>
            Total open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalPositionInitialMargin">
            <summary>
            Total positional initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalUnrealizedProfit">
            <summary>
            Total unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalWalletBalance">
            <summary>
            Total wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalCrossWalletBalance">
            <summary>
            Total crossed wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalCrossUnPnl">
            <summary>
            Unrealized profit of crossed positions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.UpdateTime">
            <summary>
            The time of account info was updated
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition">
            <summary>
            Information about an account position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.Isolated">
            <summary>
            Is isolated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.InitialMargin">
            <summary>
            Initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.MaintMargin">
            <summary>
            Maint margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.OpenOrderInitialMargin">
            <summary>
            Open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.PositionInitialMargin">
            <summary>
            Position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.UnrealizedProfit">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.EntryPrice">
            <summary>
            Entry Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountPosition.MaxNotional">
            <summary>
            Maximum available notional with current leverage
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder">
            <summary>
            Parameters for a new futures batch order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Symbol">
            <summary>
            Symbol of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Side">
            <summary>
            Side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.PositionSide">
            <summary>
            Default Both for One-way Mode ; Long or Short for Hedge Mode. It must be sent with Hedge Mode.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.ReduceOnly">
            <summary>
            Reduce only, default false
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.NewClientOrderId">
            <summary>
            A unique id among open orders. Automatically generated if not sent.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.StopPrice">
            <summary>
            Used with Stop/StopMarket or TakeProfit/TakeProfitMarket orders.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.ActivationPrice">
            <summary>
            Used with TrailingStopMarket orders, default as the latest price（supporting different workingType)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.CallbackRate">
            <summary>
            Used with TrailingStopMarket orders, min 0.1, max 4 where 1 for 1%
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.WorkingType">
            <summary>
            Stop price triggered by: Mark or Contract. Default Contract
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelAllOrders">
            <summary>
            The result of cancel all orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelAllOrders.Code">
            <summary>
            The execution code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelAllOrders.Message">
            <summary>
            The execution message
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder">
            <summary>
            The result of cancel order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.CumulativeQuantity">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.CumulativeQuoteQuantity">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ExecutedQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OriginalQuantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ClosePosition">
            <summary>
            if Close-All
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OriginalType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.PriceRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.PositionSide">
            <summary>
            The position side of the order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult">
            <summary>
            Result from a change margin type request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult.Code">
            <summary>
            Response code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult.Message">
            <summary>
            Response message
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCountDownResult">
            <summary>
            Result of setting a countdown timer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCountDownResult.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCountDownResult.CountDownTime">
            <summary>
            Count down time in milliseconds
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory">
            <summary>
            Futures income history result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Symbol">
            <summary>
            Symbol for the resulting income history, may be null if not associated with a trading pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.IncomeTypeString">
            <summary>
            Type of income as string
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.IncomeType">
            <summary>
            Type of income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Income">
            <summary>
            Amount of income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Asset">
            <summary>
            Base asset for the income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Info">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Time">
            <summary>
            Time of the income
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult">
            <summary>
            Response to the change in initial leverage request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.Leverage">
            <summary>
            New leverage multiplier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.MaxNotionalValue">
            <summary>
            Maximum value that can be held
            NOTE: string type, because the value van be 'inf' (infinite)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.Symbol">
            <summary>
            Symbol the request is for
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult">
            <summary>
            Result of the margin change history request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Amount">
            <summary>
            Request amount of margin used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Asset">
            <summary>
            Base asset used for margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Symbol">
            <summary>
            Symbol margin is placed on
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Time">
            <summary>
            Time of the margin change request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Type">
            <summary>
            Direction of the margin change request
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMultipleOrderPlaceResult">
            <summary>
            Extension to be able to deserialize an error response as well
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder">
            <summary>
            The result of query order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.AvgPrice">
            <summary>
            The average price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.CumulativeQuantity">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.CumulativeQuoteQuantity">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ExecutedQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.OriginalQuantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ClosePosition">
            <summary>
            if Close-All
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.OriginalType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.PriceRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.CreatedTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.PositionSide">
            <summary>
            The position side of the order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.AvgPrice">
            <summary>
            The average price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.CumulativeQuantity">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.CumulativeQuoteQuantity">
            <summary>
            Cumulative amount in quote currency
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ExecutedQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.OriginalQuantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.PositionSide">
            <summary>
            The position side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ClosePosition">
            <summary>
            If order is for closing a position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.OriginalType">
            <summary>
            The original type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.PriceRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition">
            <summary>
            Information about an position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.EntryPrice">
            <summary>
            The entry price of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.MarginType">
            <summary>
            Type of margin used for the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.IsAutoAddMargin">
            <summary>
            Does the position add margin automatically?
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.IsolatedMargin">
            <summary>
            Amount of isolated margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.Leverage">
            <summary>
            The current initial leverage of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.LiquidationPrice">
            <summary>
            The Liquidation price of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.MarkPrice">
            <summary>
            The Market price of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.MaxNotionalValue">
            <summary>
            The notional value limit of current initial leverage
            NOTE: string type, because the value van be 'inf' (infinite)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.Quantity">
            <summary>
            The quantity of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.Symbol">
            <summary>
            The symbol the position is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.UnrealizedPnL">
            <summary>
            The price of the unrealized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPosition.PositionSide">
            <summary>
            The position side of the order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult">
            <summary>
            Result of the requested margin amount change
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Amount">
            <summary>
            New margin amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Code">
            <summary>
            Request response code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.MaxNotionalValue">
            <summary>
            Maximum margin value
            NOTE: string type, because the value van be 'inf' (infinite)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Type">
            <summary>
            Direction of the requested margin change
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMode">
            <summary>
            User's position mode
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMode.PositionMode">
            <summary>
            true": Hedge Mode mode; "false": One-way Mode
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio">
            <summary>
            Buy Sell Volume Ratio Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio.BuySellRatio">
            <summary>
            buy/sell ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio.BuyVolume">
            <summary>
            buy volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio.SellVolume">
            <summary>
            sell volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo">
            <summary>
            Exchange info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.TimeZone">
            <summary>
            The timezone the server uses
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.ServerTime">
            <summary>
            The current server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.RateLimits">
            <summary>
            The rate limits used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.Symbols">
            <summary>
            All symbols supported
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.ExchangeFilters">
            <summary>
            Filters
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory">
            <summary>
            Funding rate information for Futures trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.FundingRate">
            <summary>
            The finding rate for the given symbol and time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.FundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.LastQuantityFilled">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Type">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Time">
            <summary>
            Forced time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio">
            <summary>
            Long Short Ratio Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.LongShortRatio">
            <summary>
            long/short ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.LongAccount">
            <summary>
            longs percentage (in decimal form)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.ShortAccount">
            <summary>
            shorts percentage (in decimal form)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice">
            <summary>
            Mark Price and Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.MarkPrice">
            <summary>
            The current market price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.FundingRate">
            <summary>
            The last funding rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.NextFundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest.OpenInterest">
            <summary>
            Open Interest info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory">
            <summary>
            Open Interest History info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory.SumOpenInterest">
            <summary>
            Total open interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory.SumOpenInterestValue">
            <summary>
            Total open interest value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Filters">
            <summary>
            Filters for order on this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaintMarginPercent">
            <summary>
            The maintenance margin percent
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PricePrecision">
            <summary>
            The price Precision
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuantityPrecision">
            <summary>
            The quantity precision
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.RequiredMarginPercent">
            <summary>
            The required margin percent
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.BaseAsset">
            <summary>
            The base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuoteAsset">
            <summary>
            The quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.BaseAssetPrecision">
            <summary>
            The precision of the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuoteAssetPrecision">
            <summary>
            The precision of the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.OrderTypes">
            <summary>
            Allowed order types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Name">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.TimeInForce">
            <summary>
            Allowed order time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PriceFilter">
            <summary>
            Filter for the max accuracy of the price for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.LotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MarketLotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol, specifically for market orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaxOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaxAlgoOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PricePercentFilter">
            <summary>
            Filter for the maximum deviation of the price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket">
            <summary>
            Notional and Leverage Brackets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket.Brackets">
            <summary>
            Brackets
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket">
            <summary>
            Bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.Bracket">
            <summary>
            Notianl bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.InitialLeverage">
            <summary>
            Max initial leverge for this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.NotionalCap">
            <summary>
            Cap notional of this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.NotionalFloor">
            <summary>
            Notionl threshold of this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.MaintMarginRatio">
            <summary>
            Maintenance ratio for this bracket
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolFilter">
            <summary>
            A filter for order placed on a symbol. Can be either a <see cref="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter"/>, <see cref="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter"/>, <see cref="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter"/>
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolFilter.FilterType">
            <summary>
            The type of this filter
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter.MinPrice">
            <summary>
            The minimal price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter.MaxPrice">
            <summary>
            The max price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter.TickSize">
            <summary>
            The tick size of the price. The price can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMarketLotSizeFilter">
            <summary>
            Market lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMarketLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMarketLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMarketLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxOrdersFilter">
             <summary>
            Max orders filter
             </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxOrdersFilter.MaxNumberOrders">
            <summary>
            The max number of orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter">
            <summary>
            Max algo orders filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter.MaxNumberAlgorithmicOrders">
            <summary>
            The max number of Algorithmic orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPercentPriceFilter">
            <summary>
            Price percentage filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPercentPriceFilter.MultiplierUp">
            <summary>
            The max factor the price can deviate up
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPercentPriceFilter.MultiplierDown">
            <summary>
            The max factor the price can deviate down
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPercentPriceFilter.MultiplierDecimal">
            <summary>
            The amount of minutes the average price of trades is calculated over. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidationData">
            <summary>
            A event received by a Binance websocket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidationData.Data">
            <summary>
            The data of the event
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Side">
            <summary>
            Liquidation Sided
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Type">
            <summary>
            Liquidation order type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.TimeInForce">
            <summary>
            Liquidation Time in Force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Quantity">
            <summary>
            Liquidation Original Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Price">
            <summary>
            Liquidation order price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.AveragePrice">
            <summary>
            Liquidation Average Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Status">
            <summary>
            Liquidation Order Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.LastQuantityFilled">
            <summary>
            Liquidation Last Filled Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.QuantityFilled">
            <summary>
            Liquidation Accumulated fill quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Time">
            <summary>
            Liquidation Trade Time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.MarkPrice">
            <summary>
            Mark Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.FundingRate">
            <summary>
            Next Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.NextFundingTime">
            <summary>
            Next Funding Time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick">
            <summary>
            TODO
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.LastPrice">
            <summary>
            Close Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.OpenPrice">
            <summary>
            Open Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.HighPrice">
            <summary>
            High
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.LowPrice">
            <summary>
            Low
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.TotalTradedBaseAssetVolume">
            <summary>
            Total traded base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMiniTick.TotalTradedQuoteAssetVolume">
            <summary>
            Total traded quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Symbol">
            <summary>
            The symbol of the order book (only filled from stream updates)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.TransactionTime">
            <summary>
            The time the event happened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.FirstUpdateId">
            <summary>
            The ID of the first update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.LastUpdateIdStream">
            <summary>
            The ID of the last update Id in last stream
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Bids">
            <summary>
            The list of diff bids
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Asks">
            <summary>
            The list of diff asks
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.WalletBalance">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.CrossBalance">
            <summary>
            The amount that is locked in a trade
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition">
            <summary>
            Information about an asset position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.Symbol">
            <summary>
            The symbol this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.PositionAmount">
            <summary>
            The amount of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.EntryPrice">
            <summary>
            The entry price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.RealizedPnL">
            <summary>
            The accumulated realized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.UnRealizedPnL">
            <summary>
            The Unrealized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.MarginType">
            <summary>
            The margin type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.IsolatedWallet">
            <summary>
            The isolated wallet (if isolated position)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.PositionSide">
            <summary>
            Position Side
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate">
            <summary>
            Update data about an margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.PositionSide">
            <summary>
            Position Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.PositionAmount">
            <summary>
            Position Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.MarginType">
            <summary>
            Margin type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.IsolatedWallet">
            <summary>
            Isolated Wallet (if isolated position)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.MarkPrice">
            <summary>
            Mark Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.UnrealizedPNL">
            <summary>
            Unrealized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.MaintMargin">
            <summary>
            Maintenance Margin Required
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate">
            <summary>
            Update data about an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.ClientOrderId">
            <summary>
            The new client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.TimeInForce">
            <summary>
            The timespan the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.AveragePrice">
            <summary>
            The average price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.StopPrice">
            <summary>
            The stop price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.ExecutionType">
            <summary>
            The execution type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.OrderId">
            <summary>
            The id of the order as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.QuantityOfLastFilledTrade">
            <summary>
            The quantity of the last filled trade of this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.AccumulatedQuantityOfFilledTrades">
            <summary>
            The quantity of all trades that were filled for this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.PriceLastFilledTrade">
            <summary>
            The price of the last filled trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.Commission">
            <summary>
            The commission payed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.CommissionAsset">
            <summary>
            The asset the commission was taken from
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.CreateTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.TradeId">
            <summary>
            The trade id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.BidNotional">
            <summary>
            Bid Notional
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.AskNotional">
            <summary>
            Ask Notional
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.BuyerIsMaker">
            <summary>
            Whether the buyer is the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.IsReduce">
            <summary>
            Is this reduce only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.StopPriceWorking">
            <summary>
            Stop price working type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.OriginalType">
            <summary>
            Original Order Type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.PushedConditionalOrder">
            <summary>
            If Close-All, only pushed with conditional order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.ActivationPrice">
            <summary>
            Activation Price, only puhed with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.CallbackRate">
            <summary>
            Callback Rate, only puhed with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.BinanceClientOptions">
            <summary>
            Options for the binance client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.AutoTimestampRecalculationInterval">
            <summary>
            Interval for refreshing the auto timestamp calculation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.TimestampOffset">
            <summary>
            A manual offset for the timestamp. Should only be used if AutoTimestamp and regular time synchronization on the OS is not reliable enough
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.TradeRulesBehaviour">
            <summary>
            Whether to check the trade rules when placing new orders and what to do if the trade isn't valid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.TradeRulesUpdateInterval">
            <summary>
            How often the trade rules should be updated. Only used when TradeRulesBehaviour is not None
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceClientOptions.FuturesBaseAddress">
            <summary>
            Base address for the futures API
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceClientOptions.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Сustom url to connect via mirror website</param>
            <param name="futuresBaseAddress">Сustom futures url to connect via mirror website</param>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Spot.BinanceSocketClientOptions">
            <summary>
            Binance socket client options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceSocketClientOptions.BaseSocketCombinedAddress">
            <summary>
            The base address for combined data in socket connections
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceSocketClientOptions.BaseAddressFutures">
            <summary>
            The base address for futures
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceSocketClientOptions.BaseAddressFuturesCombined">
            <summary>
            The base address for futures
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceSocketClientOptions.SocketSubscriptionsCombineTarget">
            <summary>
            The amount of subscriptions that should be made on a single socket connection. Not all exchanges support multiple subscriptions on a single socket.
            Setting this to a higher number increases subscription speed, but having more subscriptions on a single connection will also increase the amount of traffic on that single connection.
            Not available on Binance.
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceSocketClientOptions.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="address">Custom address</param>
            <param name="addressCombined">Custom address for combined streams</param>
            <param name="futuresAddress">Custom address for futures</param>
            <param name="futuresCombinedAddress">Custom address for futures combined streams</param>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceSocketClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Spot.BinanceOrderBookOptions">
            <summary>
            Binance symbol order book options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceOrderBookOptions.Limit">
            <summary>
            The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.BinanceOrderBookOptions.UpdateInterval">
            <summary>
            Update interval in milliseconds, either 100 or 1000. Defaults to 1000
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.BinanceOrderBookOptions.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create new options
            </summary>
            <param name="limit">The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol">
            <summary>
            Isolated margin symbol info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.Base">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.Quote">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.IsMarginTrade">
            <summary>
            Margin trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.IsBuyAllowed">
            <summary>
            Is buy allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.IsSellAllowed">
            <summary>
            Is sell allowed
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer">
            <summary>
            Isolated margin transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.Amount">
            <summary>
            Amount of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.Asset">
            <summary>
            Transfer asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.Status">
            <summary>
            Status of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.Timestamp">
            <summary>
            Timestamp of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.From">
            <summary>
            From
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.To">
            <summary>
            To
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.CreateIsolatedMarginAccountResult">
            <summary>
            Result of creating isolated margin account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.CreateIsolatedMarginAccountResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.CreateIsolatedMarginAccountResult.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount">
            <summary>
            Isolated margin account info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount.Assets">
            <summary>
            Account assets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount.TotalAssetOfBtc">
            <summary>
            Total btc asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount.TotalLiabilityOfBtc">
            <summary>
            Total liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount.TotalNetAssetOfBtc">
            <summary>
            Total net asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol">
            <summary>
            Isolated margin account symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.IsolatedCreated">
            <summary>
            Isolated created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.MarginLevel">
            <summary>
            The margin level
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.MarginLevelStatus">
            <summary>
            Margin level status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.MarginRatio">
            <summary>
            Margin ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.LiquidatePrice">
            <summary>
            Liquidate price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.LiquidateRate">
            <summary>
            Liquidate rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.TradeEnabled">
            <summary>
            If trading is enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset">
            <summary>
            Isolated margin account asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.BorrowEnabled">
            <summary>
            If borrow is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Borrowed">
            <summary>
            Borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Free">
            <summary>
            Free
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Locked">
            <summary>
            Locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.NetAsset">
            <summary>
            Net asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.NetAssetOfBtc">
            <summary>
            Net asset in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.RepayEnabled">
            <summary>
            Is repay enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.TotalAsset">
            <summary>
            Total asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition">
            <summary>
            Customized fixed project position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.CanTransfer">
            <summary>
            Can transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.CreateTimestamp">
            <summary>
            Create timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.InterestRate">
            <summary>
            Interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Lot">
            <summary>
            Lot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.PositionId">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Principal">
            <summary>
            Principal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.ProjectId">
            <summary>
            Project id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.ProjectName">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.PurchaseTime">
            <summary>
            Time of purchase
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.RedeemDate">
            <summary>
            Redeem date
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition">
            <summary>
            Flexible product position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.AnnualInterestRate">
            <summary>
            Annual interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.AverageAnnualInterestRate">
            <summary>
            Average annual interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.CanRedeem">
            <summary>
            Can redeem
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.DailyInterestRate">
            <summary>
            Daily interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.FreeAmount">
            <summary>
            Amount free
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.FreezeAmount">
            <summary>
            Amount frozen
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.LockedAmount">
            <summary>
            Amount locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.ProductId">
            <summary>
            The product id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.ProductName">
            <summary>
            The product name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.RedeemingAmount">
            <summary>
            Redeeming amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.TodayPurchasedAmount">
            <summary>
            Amount purchased today
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.TotalAmount">
            <summary>
            Total amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.TotalInterest">
            <summary>
            Total interest
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory">
            <summary>
            Interest record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.LendingType">
            <summary>
            Lending type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.ProductName">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount">
            <summary>
            Lending account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalAmountInBTC">
            <summary>
            Total amount in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalAmountInUSDT">
            <summary>
            Total amount in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalFixedAmountInBTC">
            <summary>
            Total fixed amount in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalFixedAmountInUSDT">
            <summary>
            Total fixed amount in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalFlexibleInBTC">
            <summary>
            Total flexible in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalFlexibleInUSDT">
            <summary>
            Total flexible in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.PositionAmounts">
            <summary>
            Position amounts
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount">
            <summary>
            Lending position amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount.Amount">
            <summary>
            Amount of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount.AmountInBTC">
            <summary>
            Amount in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount.AmountInUSDT">
            <summary>
            Amount in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceLendingPurchaseResult">
            <summary>
            Purchase result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPurchaseResult.PurchaseId">
            <summary>
            The id of the purchase
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceProject">
            <summary>
            Binance project info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.DisplayPriority">
            <summary>
            Display priority
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.InterestPerLot">
            <summary>
            Interest per lot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.InterestRate">
            <summary>
            Interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.LotSize">
            <summary>
            Lot size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.LotsLowLimit">
            <summary>
            Lots low limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.LotsPurchased">
            <summary>
            Lots purchased
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.LotsUpLimit">
            <summary>
            Lots upper limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.MaxLotsPerUser">
            <summary>
            Max number of lots per user
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.NeedsKYC">
            <summary>
            Needs know your customer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.ProjectId">
            <summary>
            Project id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.ProjectName">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.WithAreaLimitation">
            <summary>
            Has area limitation
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinancePurchaseQuotaLeft">
            <summary>
            Purchase quota left
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseQuotaLeft.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseQuotaLeft.LeftQuota">
            <summary>
            The quota left
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord">
            <summary>
            Purchase record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.Amount">
            <summary>
            Amount purchased
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.CreateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.LendingType">
            <summary>
            Lending type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.ProductName">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.PurchaseId">
            <summary>
            Purchase id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.Status">
            <summary>
            Purchase status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft">
            <summary>
            Redemption quota left
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft.DailyQuota">
            <summary>
            Daily quota
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft.LeftQuota">
            <summary>
            Left quota
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft.MinimalRedemptionAmount">
            <summary>
            Minimal redemption amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord">
            <summary>
            Redemption record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Amount">
            <summary>
            Amount purchased
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.CreateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Type">
            <summary>
            Redeem type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.ProductName">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Principal">
            <summary>
            Principal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Status">
            <summary>
            Purchase status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct">
            <summary>
            Savings product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.AverageAnnualInterestRate">
            <summary>
            Average annual interest rage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.CanPurchase">
            <summary>
            Can purchase
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.CanRedeem">
            <summary>
            Can redeem
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.DailyInterestPerThousand">
            <summary>
            Daily interest per thousand
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.Featured">
            <summary>
            Is featured
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.MinimalPurchaseAmount">
            <summary>
            Minimal amount to purchase
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.ProductId">
            <summary>
            Product id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.PurchasedAmount">
            <summary>
            Purchased amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.Status">
            <summary>
            Status of the product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.UpperLimit">
            <summary>
            Upper limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.UpperLimitPerUser">
            <summary>
            Upper limit per user
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.ExecutedQuantity">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Quantity">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.IsIsolated">
            <summary>
            Is isolated margin
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory">
            <summary>
            Interest history entry info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestAmount">
            <summary>
            The amount of interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestAccuredTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestRate">
            <summary>
            Interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Principal">
            <summary>
            Principal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Type">
            <summary>
            Type of interest
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount">
            <summary>
            Information about margin account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.BorrowEnabled">
            <summary>
            Boolean indicating if this account can borrow
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TradeEnabled">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TransferEnabled">
            <summary>
            Boolean indicating if this account can transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.MarginLevel">
            <summary>
            Aggregate level of margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalAssetOfBtc">
            <summary>
            Aggregate total balance as BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalLiabilityOfBtc">
            <summary>
            Aggregate total liability balance of BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalNetAssetOfBtc">
            <summary>
            Aggregate total available net balance of BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.Balances">
            <summary>
            Balance list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Borrowed">
            <summary>
            The amount that was borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Interest">
            <summary>
            Commission to need pay by borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshot">
            <summary>
            Margin account snapshot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshot.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshot.Type">
            <summary>
            Account type the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshot.Data">
            <summary>
            Snapshot data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData">
            <summary>
            Margin snapshot data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.MarginLevel">
            <summary>
            The margin level
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.TotalAssetOfBtc">
            <summary>
            Total BTC asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.TotalLiabilityOfBtc">
            <summary>
            Total BTC liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.TotalNetAssetOfBtc">
            <summary>
            Total net BTC asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.UserAssets">
            <summary>
            Assets
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAmount">
            <summary>
            The result amount of getting maxBorrowable or maxTransferable 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAmount.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset">
            <summary>
            Margin asset info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.FullName">
            <summary>
            Full name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.Name">
            <summary>
            Short name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.IsBorrowable">
            <summary>
            Is borrowable
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.IsMortgageable">
            <summary>
            Is mortgageable
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.MinimalBorrowAmount">
            <summary>
            Minimal amount which can be borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.MinimalRepayAmount">
            <summary>
            Minimal amount which can be repaid
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair">
            <summary>
            Margin pair info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.BaseAsset">
            <summary>
            Base asset of the pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.QuoteAsset">
            <summary>
            Quote asset of the pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsBuyAllowed">
            <summary>
            Is buying allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsSellAllowed">
            <summary>
            Is selling allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsMarginTrade">
            <summary>
            Is margin trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginPriceIndex">
            <summary>
            Price index for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPriceIndex.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPriceIndex.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPriceIndex.CalculationTime">
            <summary>
            Time of calculation
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginTransaction">
            <summary>
            The result of transferring
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginTransaction.TransactionId">
            <summary>
            The Transaction id as assigned by Binance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceLoan">
            <summary>
            Loan info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Asset">
            <summary>
            The asset of the loan
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Principal">
            <summary>
            Principal repaid 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Time">
            <summary>
            Time of repay completed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Status">
            <summary>
            The status of the loan
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceRepay">
            <summary>
            Repay info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Asset">
            <summary>
            The asset of the repay
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.TransactionId">
            <summary>
            The transaction id of the repay
            </summary>`
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Amount">
            <summary>
            Total amount repaid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Principal">
            <summary>
            Principal repaid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Time">
            <summary>
            Time of repay completed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Status">
            <summary>
            The status of the repay
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory">
            <summary>
            Transfer history entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Amount">
            <summary>
            Amount of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Asset">
            <summary>
            Asset of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Status">
            <summary>
            Status of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Timestamp">
            <summary>
            Timestamp of the transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Direction">
            <summary>
            Direction of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.Binance24HPrice">
            <summary>
            Price statistics of the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.Symbol">
            <summary>
            The symbol the price is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.PriceChange">
            <summary>
            The actual price change in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.PriceChangePercent">
            <summary>
            The price change in percentage in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.WeightedAveragePrice">
            <summary>
            The weighted average price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.PrevDayClosePrice">
            <summary>
            The close price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.LastPrice">
            <summary>
            The most recent trade price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.OpenPrice">
            <summary>
            The open price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.HighPrice">
            <summary>
            The highest price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.LowPrice">
            <summary>
            The lowest price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.TotalTradedBaseAssetVolume">
            <summary>
            The volume traded in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.TotalTradedQuoteAssetVolume">
            <summary>
            The quote asset volume traded in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.OpenTime">
            <summary>
            Time at which this 24 hours opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.CloseTime">
            <summary>
            Time at which this 24 hours closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.FirstTradeId">
            <summary>
            The first trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.LastTradeId">
            <summary>
            The last trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.TotalTrades">
            <summary>
            The amount of trades made in the last 24 hours
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade">
            <summary>
            Compressed aggregated trade information. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.Price">
            <summary>
            The price of trades in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.Quantity">
            <summary>
            The total quantity of trades in the aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.TradeTime">
            <summary>
            The timestamp of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.WasBestPriceMatch">
            <summary>
            Whether the trade was matched at the best price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice">
            <summary>
            Current average price details for a symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice.Minutes">
            <summary>
            Duration in minutes
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice.Price">
            <summary>
            The average price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice">
            <summary>
            Information about the best price/quantity available for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestBidPrice">
            <summary>
            The highest bid price for the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestBidQuantity">
            <summary>
            The quantity of the highest bid price currently in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestAskPrice">
            <summary>
            The lowest ask price for the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestAskQuantity">
            <summary>
            The quantity of the lowest ask price currently in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook">
            <summary>
            Stream order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.LastUpdateIdStream">
            <summary>
            Setter for last update id, need for Json.Net
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.EventTime">
            <summary>
            Event time of the update (stream only)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.BidsStream">
            <summary>
            Setter for bids (needed forJson.Net)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.AsksStream">
            <summary>
            Setter for asks (needed forJson.Net)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo">
            <summary>
            Exchange info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.TimeZone">
            <summary>
            The timezone the server uses
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.ServerTime">
            <summary>
            The current server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.RateLimits">
            <summary>
            The rate limits used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.Symbols">
            <summary>
            All symbols supported
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.ExchangeFilters">
            <summary>
            Filters
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceKline">
            <summary>
            Candlestick information for symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.OpenTime">
            <summary>
            The time this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.Open">
            <summary>
            The price at which this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.High">
            <summary>
            The highest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.Low">
            <summary>
            The lowest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.Close">
            <summary>
            The price at which this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.Volume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.QuoteAssetVolume">
            <summary>
            The volume traded during this candlestick in the asset form
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.TakerBuyBaseAssetVolume">
            <summary>
            Taker buy base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceKline.TakerBuyQuoteAssetVolume">
            <summary>
            Taker buy quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Symbol">
            <summary>
            The symbol of the order book 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.FirstUpdateId">
            <summary>
            The id of this update, can be synced with BinanceClient.Spot.GetOrderBook to update the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Bids">
            <summary>
            The list of bids
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Asks">
            <summary>
            The list of asks
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinancePrice">
            <summary>
            The price of a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinancePrice.Symbol">
            <summary>
            The symbol the price is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinancePrice.Price">
            <summary>
            The price of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinancePrice.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade">
            <summary>
            Recent trade info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.OrderId">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.QuoteQuantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.TradeTime">
            <summary>
            The timestamp of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.BuyerIsMaker">
            <summary>
            Whether the buyer is maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.IsBestMatch">
            <summary>
            Whether the trade was made at the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbol">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Name">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseAsset">
            <summary>
            The base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseAssetPrecision">
            <summary>
            The precision of the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteAsset">
            <summary>
            The quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteAssetPrecision">
            <summary>
            The precision of the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.OrderTypes">
            <summary>
            Allowed order types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IceBergAllowed">
            <summary>
            Ice berg orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IsSpotTradingAllowed">
            <summary>
            Spot trading orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IsMarginTradingAllowed">
            <summary>
            Margin trading orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.OCOAllowed">
            <summary>
            If OCO(One Cancels Other) orders are allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteOrderQuantityMarketAllowed">
            <summary>
            Whether or not it is allowed to specify the quantity of a market order in the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseCommissionPrecision">
            <summary>
            The precision of the base asset commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteCommissionPrecision">
            <summary>
            The precision of the quote asset commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Permissions">
            <summary>
            Permissions types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Filters">
            <summary>
            Filters for order on this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IceBergPartsFilter">
            <summary>
            Filter for max amount of iceberg parts for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.LotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MarketLotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol, specifically for market orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxAlgorithmicOrdersFilter">
            <summary>
            Filter for max algorithmic orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MinNotionalFilter">
            <summary>
            Filter for the minimal size of an order for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.PriceFilter">
            <summary>
            Filter for the max accuracy of the price for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.PricePercentFilter">
            <summary>
            Filter for the maximum deviation of the price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolFilter">
            <summary>
            A filter for order placed on a symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolFilter.FilterType">
            <summary>
            The type of this filter
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPriceFilter">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPriceFilter.MinPrice">
            <summary>
            The minimal price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPriceFilter.MaxPrice">
            <summary>
            The max price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPriceFilter.TickSize">
            <summary>
            The tick size of the price. The price can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPercentPriceFilter">
            <summary>
            Price percentage filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPercentPriceFilter.MultiplierUp">
            <summary>
            The max factor the price can deviate up
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPercentPriceFilter.MultiplierDown">
            <summary>
            The max factor the price can deviate down
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPercentPriceFilter.AveragePriceMinutes">
            <summary>
            The amount of minutes the average price of trades is calculated over. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolLotSizeFilter">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMarketLotSizeFilter">
            <summary>
            Market lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMarketLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMarketLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMarketLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMinNotionalFilter">
            <summary>
            Min notional filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMinNotionalFilter.MinNotional">
            <summary>
            The minimal total size of an order. This is calculated by Price * Quantity.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMinNotionalFilter.ApplyToMarketOrders">
            <summary>
            Whether or not this filter is applied to market orders. If so the average trade price is used.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMinNotionalFilter.AveragePriceMinutes">
            <summary>
            The amount of minutes the average price of trades is calculated over for market orders. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxOrdersFilter">
             <summary>
            Max orders filter
             </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxOrdersFilter.MaxNumberOrders">
            <summary>
            The max number of orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter">
            <summary>
            Max algo orders filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter.MaxNumberAlgorithmicOrders">
            <summary>
            The max number of Algorithmic orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolIcebergPartsFilter">
            <summary>
            Max iceberg parts filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolIcebergPartsFilter.Limit">
            <summary>
            The max parts of an iceberg order for this symbol.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade">
            <summary>
            Aggregated information about trades for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Symbol">
            <summary>
            The symbol the trade was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregated trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Price">
            <summary>
            The price of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Quantity">
            <summary>
            The combined quantity of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.TradeTime">
            <summary>
            The time of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Ignore">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice">
            <summary>
            Book tick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.EventTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.TransactionTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.UpdateId">
            <summary>
            Update id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestBidPrice">
            <summary>
            Price of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestBidQuantity">
            <summary>
            Quantity of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestAskPrice">
            <summary>
            Price of the best ask
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestAskQuantity">
            <summary>
            Quantity of the best ask
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData">
            <summary>
            Wrapper for kline information for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData.Symbol">
            <summary>
            The symbol the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline">
            <summary>
            The kline data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.OpenTime">
            <summary>
            The open time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Symbol">
            <summary>
            The symbol this candlestick is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Interval">
            <summary>
            The interval of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.FirstTrade">
            <summary>
            The first trade id in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.LastTrade">
            <summary>
            The last trade id in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Open">
            <summary>
            The open price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Close">
            <summary>
            The close price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.High">
            <summary>
            The highest price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Low">
            <summary>
            The lowest price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Volume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Final">
            <summary>
            Boolean indicating whether this candlestick is closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.QuoteAssetVolume">
            <summary>
            The quote volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TakerBuyBaseAssetVolume">
            <summary>
            The volume of active buy
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TakerBuyQuoteAssetVolume">
            <summary>
            The quote volume of active buy
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.ToKline">
            <summary>
            Casts this object to a <see cref="T:Binance.Net.Objects.Spot.MarketData.BinanceKline"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick">
            <summary>
            MiniTick info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.Symbol">
            <summary>
            The symbol this data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.LastPrice">
            <summary>
            The current day close price. This is the latest price for this symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.OpenPrice">
            <summary>
            Todays open price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.HighPrice">
            <summary>
            Todays high price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.LowPrice">
            <summary>
            Todays low price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.TotalTradedBaseAssetVolume">
            <summary>
            Total traded volume in the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.TotalTradedQuoteAssetVolume">
            <summary>
            Total traded volume in the quote asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick">
            <summary>
            Tick info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.Symbol">
            <summary>
            The symbol this data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.PriceChange">
            <summary>
            The price change of this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.PriceChangePercent">
            <summary>
            The price change percentage of this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.WeightedAveragePrice">
            <summary>
            The weighted average
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.PrevDayClosePrice">
            <summary>
            The close price of the previous day
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.LastPrice">
            <summary>
            The current day close price. This is the latest price for this symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.OpenPrice">
            <summary>
            Todays open price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.HighPrice">
            <summary>
            Todays high price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.LowPrice">
            <summary>
            Todays low price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.TotalTradedBaseAssetVolume">
            <summary>
            Total traded volume in the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.TotalTradedQuoteAssetVolume">
            <summary>
            Total traded volume in the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.FirstTradeId">
            <summary>
            The first trade id of today
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.LastTradeId">
            <summary>
            The last trade id of today
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.TotalTrades">
            <summary>
            The total trades of id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.OpenTime">
            <summary>
            The open time of these stats
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.CloseTime">
            <summary>
            The close time of these stats
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade">
            <summary>
            Aggregated information about trades for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Symbol">
            <summary>
            The symbol the trade was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.OrderId">
            <summary>
            The id of this aggregated trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Price">
            <summary>
            The price of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Quantity">
            <summary>
            The combined quantity of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.BuyerOrderId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.SellerOrderId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.TradeTime">
            <summary>
            The time of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.IsBestMatch">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMinerList">
            <summary>
            Miner list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerList.TotalNum">
            <summary>
            Total number of entries
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerList.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerList.WorkerDatas">
            <summary>
            Worker data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo">
            <summary>
            Miner details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.WorkerId">
            <summary>
            Worker id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.WorkerName">
            <summary>
            Worker name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.HashRate">
            <summary>
            Hash rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.DayHashRate">
            <summary>
            Day hash rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.RejectRate">
            <summary>
            Reject rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.LastShareTime">
            <summary>
            Last share time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMinerDetails">
            <summary>
            Miner details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerDetails.WorkerName">
            <summary>
            Name of the worker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerDetails.Type">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerDetails.HashRateDatas">
            <summary>
            Hash rate data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceHashRate">
            <summary>
            Hash rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashRate.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashRate.HashRate">
            <summary>
            Hashrate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashRate.Reject">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMiningAccount">
            <summary>
            Mining account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAccount.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAccount.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAccount.Hashrates">
            <summary>
            Hash rates
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm">
            <summary>
            Mining coin info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm.AlgorithmName">
            <summary>
            The name of the algorithm
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm.AlgorithmId">
            <summary>
            The id of the algorithm
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm.PoolIndex">
            <summary>
            The pool index
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm.Unit">
            <summary>
            The unit of measurement
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin">
            <summary>
            Mining coin info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.CoinName">
            <summary>
            The name of the coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.CoinId">
            <summary>
            The id of the coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.PoolIndex">
            <summary>
            The pool index
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.AlgorithmId">
            <summary>
            Algorithm id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.AlgorithmName">
            <summary>
            Algorithm name
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic">
            <summary>
            Mining statistics
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.FifteenMinuteHashRate">
            <summary>
            Hashrate last fifteen minutes
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.DayHashRate">
            <summary>
            Day hashrate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.ValidShares">
            <summary>
            Valid shares
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.InvalidShares">
            <summary>
            Invalid shares
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.ProfitToday">
            <summary>
            Todays profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.ProfitYesterday">
            <summary>
            Yesterdays profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.Unit">
            <summary>
            Hashrate unit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.Algorithm">
            <summary>
            Algorithm
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceRevenueList">
            <summary>
            Revenue list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueList.TotalNum">
            <summary>
            Total number of results
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueList.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueList.AccountProfits">
            <summary>
            Revenue items
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem">
            <summary>
            Revenue
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.DayHashRate">
            <summary>
            Day hashrate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.ProfitAmount">
            <summary>
            Profit amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.MakerCommission">
            <summary>
            Commission percentage to pay when making trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.TakerCommission">
            <summary>
            Commission percentage to pay when taking trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.BuyerCommission">
            <summary>
            Commission percentage to buy when buying
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.SellerCommission">
            <summary>
            Commission percentage to buy when selling
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanTrade">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanWithdraw">
            <summary>
            Boolean indicating if this account can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanDeposit">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.UpdateTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.AccountType">
            <summary>
            The type of account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.Permissions">
            <summary>
            Permissions types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.Balances">
            <summary>
            List of assets with their current balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder">
            <summary>
            Information about a canceled order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Symbol">
            <summary>
            The symbol the order was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.OrderId">
            <summary>
            The order id as generated by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.ClientOrderId">
            <summary>
            The new client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.OriginalClientOrderId">
            <summary>
            The client order id the order was
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.OrderListId">
            <summary>
            The order list id as generated by Binance, only for OCO orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Price">
            <summary>
            The price the order was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Quantity">
            <summary>
            Original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.QuantityFilled">
            <summary>
            Executed quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.QuoteQuantityFilled">
            <summary>
            Cummulative quote quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Status">
            <summary>
            Status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.TimeInForce">
            <summary>
            Time in force of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Type">
            <summary>
            Type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder.Side">
            <summary>
            Side of the order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceCancelledId">
            <summary>
            Ids of a canceled order, either OCO or normal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCancelledId.Id">
            <summary>
            Id of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCancelledId.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCancelledId.OcoOrder">
            <summary>
            Whether or not it is an OCO order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshot">
            <summary>
            Snapshot data of a futures account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshot.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshot.Type">
            <summary>
            Account type the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshot.Data">
            <summary>
            Snapshot data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshotData">
            <summary>
            Data of the snapshot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshotData.Assets">
            <summary>
            List of assets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshotData.Positions">
            <summary>
            List of positions
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAsset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAsset.Asset">
            <summary>
            Name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAsset.MarginBalance">
            <summary>
            Margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAsset.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.EntryPrice">
            <summary>
            Entry price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.PositionAmt">
            <summary>
            PositionAmt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.UnrealizedProfit">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrder">
            <summary>
            Information regarding a specific order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.OrderId">
            <summary>
            The order id generated by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.OrderListId">
            <summary>
            The order list id as generated by Binance, only for OCO orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.OriginalClientOrderId">
            <summary>
            Original order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.QuantityFilled">
            <summary>
            The currently executed quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.TimeInForce">
            <summary>
            How long the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.StopPrice">
            <summary>
            The stop price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.IcebergQuantity">
            <summary>
            The iceberg quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.CreateTime">
            <summary>
            The time the order was submitted
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.UpdateTime">
            <summary>
            The time the order was last updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrder.IsWorking">
            <summary>
            Is working
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList">
            <summary>
            The result of placing a new OCO order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.OrderListId">
            <summary>
            The id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ContingencyType">
            <summary>
            The contingency type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListStatusType">
            <summary>
            The order list status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListOrderStatus">
            <summary>
            The order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListClientOrderId">
            <summary>
            The client id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.TransactionTime">
            <summary>
            The transaction time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.Symbol">
            <summary>
            The symbol of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.Orders">
            <summary>
            The order in this list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.OrderReports">
            <summary>
            The order details
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderId">
            <summary>
            Order reference
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.OrderListId">
            <summary>
            Id of the order list this order belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.CreateTime">
            <summary>
            The time the order was placed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.QuantityFilled">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.StopPrice">
            <summary>
            The StopPrice of the order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.TradeId">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Price">
            <summary>
            Price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Quantity">
            <summary>
            Quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Commission">
            <summary>
            Commission paid over this trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.CommissionAsset">
            <summary>
            The asset the commission is paid in
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.OrderListId">
            <summary>
            Id of the order list this order belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.OriginalClientOrderId">
            <summary>
            Original order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.CreateTime">
            <summary>
            The time the order was placed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.QuantityFilled">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Fills">
            <summary>
            Fills for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.MarginBuyBorrowAmount">
            <summary>
            Only present if a margin trade happened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.MarginBuyBorrowAsset">
            <summary>
            Only present if a margin trade happened
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshot">
            <summary>
            Snapshot data of a spot account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshot.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshot.Type">
            <summary>
            Account type the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshot.Data">
            <summary>
            Snapshot data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshotData">
            <summary>
            Data of the snapshot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshotData.TotalAssetOfBtc">
            <summary>
            The total value of assets in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshotData.Balances">
            <summary>
            List of balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceTrade">
            <summary>
            Information about a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Symbol">
            <summary>
            The symbol the trade is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Id">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.OrderId">
            <summary>
            The order id the trade belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.OrderListId">
            <summary>
            Id of the order list this order belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.QuoteQuantity">
            <summary>
            The quote quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Commission">
            <summary>
            The commission paid for the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.CommissionAsset">
            <summary>
            The asset the commission is paid in
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.TradeTime">
            <summary>
            The time the trade was made
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsBuyer">
            <summary>
            Whether account was the buyer in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsMaker">
            <summary>
            Whether account was the maker in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsBestMatch">
            <summary>
            Whether trade was made with the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount">
            <summary>
            Sub account details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Email">
            <summary>
            The email associated with the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Status">
            <summary>
            The status of the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Activated">
            <summary>
            Whether or not the sub account has been activated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Mobile">
            <summary>
            The mobile associated with the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.GoogleAuthentication">
            <summary>
            If Google authentication is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.CreateTime">
            <summary>
            The time the sub account was created
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit">
            <summary>
            Information about a deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.InsertTime">
            <summary>
            Time the deposit was added to Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.Amount">
            <summary>
            The amount deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.Coin">
            <summary>
            The coin deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.Address">
            <summary>
            The address of the deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.Status">
            <summary>
            The status of the deposit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress">
            <summary>
            Deposit address info for a sub-account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress.Address">
            <summary>
            The deposit address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress.Coin">
            <summary>
            Coin type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress.Tag">
            <summary>
            Tag for the deposit address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails">
            <summary>
            Sub account futures details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.Email">
            <summary>
            Email of the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.Assets">
            <summary>
            List of asset details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.CanDeposit">
            <summary>
            Can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.CanTrade">
            <summary>
            Can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.CanWithdraw">
            <summary>
            Can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.FeeTier">
            <summary>
            Fee tier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.MaxWithdrawAmount">
            <summary>
            Max amount which can be withdrawn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalMaintenanceMargin">
            <summary>
            Total maintenance margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalOpenOrderInitialMargin">
            <summary>
            Total open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalPositionInitialMargin">
            <summary>
            Total position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalUnrealizedProfit">
            <summary>
            Total unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalWalletBalance">
            <summary>
            Total wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.UpdateTime">
            <summary>
            Time of the data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset">
            <summary>
            Sub account future asset details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.InitialMargin">
            <summary>
            Initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.MaintenanceMargin">
            <summary>
            Maintenance margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.MarginBalance">
            <summary>
            Margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.MaxWithdrawAmount">
            <summary>
            Max amount which can be withdrawn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.OpenOrderInitialMargin">
            <summary>
            Open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.PositionInitialMargin">
            <summary>
            Position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.UnrealizedProfit">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesEnabled">
            <summary>
            Sub account futures trading enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesEnabled.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesEnabled.IsFuturesEnabled">
            <summary>
            Whether futures trading is enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk">
            <summary>
            Sub account position risk
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.EntryPrice">
            <summary>
            The entry price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.MaxNotional">
            <summary>
            Max notional
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.PositionAmount">
            <summary>
            Position amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.UnrealizedProfit">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails">
            <summary>
            Sub account margin trade details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.MarginLevel">
            <summary>
            Margin level
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.TotalAssetOfBtc">
            <summary>
            Total asset in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.TotalLiabilityOfBtc">
            <summary>
            Total liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.TotalNetAssetOfBtc">
            <summary>
            Total net asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.MarginTradeCoeff">
            <summary>
            Trade details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.MarginUserAssets">
            <summary>
            Asset list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceMarginTradeCoeff">
            <summary>
            Margin trade detail
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceMarginTradeCoeff.ForceLiquidationBar">
            <summary>
            Liquidation margin ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceMarginTradeCoeff.MarginCallBar">
            <summary>
            Margin class margin ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceMarginTradeCoeff.NormalBar">
            <summary>
            Initial margin ratio
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginEnabled">
            <summary>
            Sub account margin trading enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginEnabled.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginEnabled.IsMarginEnabled">
            <summary>
            Whether Margin trading is enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary">
            <summary>
            Sub accounts futures summary
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalMaintenanceMargin">
            <summary>
            Total maintenance margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalOpenOrderInitialMargin">
            <summary>
            Total open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalPositionInitialMargin">
            <summary>
            Total position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalUnrealizedProfit">
            <summary>
            Total unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalWalletBalance">
            <summary>
            Total wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.SubAccounts">
            <summary>
            Sub accounts info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo">
            <summary>
            Sub account future details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.Email">
            <summary>
            Email of the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalMaintenanceMargin">
            <summary>
            Total maintenance margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalOpenOrderInitialMargin">
            <summary>
            Total open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalPositionInitialMargin">
            <summary>
            Total position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalUnrealizedProfit">
            <summary>
            Total unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalWalletBalance">
            <summary>
            Total wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary">
            <summary>
            Sub accounts margin summary
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary.TotalAssetOfBtc">
            <summary>
            Total btc asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary.TotalLiabilityOfBtc">
            <summary>
            Total liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary.TotalNetAssetOfBtc">
            <summary>
            Total net btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary.SubAccounts">
            <summary>
            Sub account details
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo">
            <summary>
            Sub account margin info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo.Email">
            <summary>
            Sub account email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo.TotalAssetOfBtc">
            <summary>
            Total btc asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo.TotalLiabilityOfBtc">
            <summary>
            Total liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo.TotalNetAssetOfBtc">
            <summary>
            Total net btc
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus">
            <summary>
            Sub-account Status on Margin/Futures
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsAccountEnabled">
            <summary>
            Sub account user enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsActive">
            <summary>
            Sub account user active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.CreateTime">
            <summary>
            The time the sub account was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsMarginEnabled">
            <summary>
            Is Margin enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsFutureEnabled">
            <summary>
            Is Futures enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.MobileNumber">
            <summary>
            User mobile number
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransaction">
            <summary>
            Transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransaction.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer">
            <summary>
            Sub account transfer info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.From">
            <summary>
            From which email the transfer originated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.To">
            <summary>
            To which email the transfer was to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Asset">
            <summary>
            The asset of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Quantity">
            <summary>
            The quantity of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Timestamp">
            <summary>
            The timestamp of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult">
            <summary>
            Sub account transfer result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult.Success">
            <summary>
            Whether the transfer was successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult.TransactionId">
            <summary>
            The transaction id of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount">
            <summary>
            Sub account historic transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.CounterParty">
            <summary>
            Counter party of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Type">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Timestamp">
            <summary>
            Timestamp of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.Time">
            <summary>
            Time of last account update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.MakerCommission">
            <summary>
            Commission percentage to pay when making trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.TakerCommission">
            <summary>
            Commission percentage to pay when taking trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.BuyerCommission">
            <summary>
            Commission percentage to buy when buying
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.SellerCommission">
            <summary>
            Commission percentage to buy when selling
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanTrade">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanWithdraw">
            <summary>
            Boolean indicating if this account can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanDeposit">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.Permissions">
            <summary>
            Permissions types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.Balances">
            <summary>
            List of assets with their current balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate">
            <summary>
            Update when asset is withdrawn/deposited 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.Asset">
            <summary>
            The asset which changed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.BalanceDelta">
            <summary>
            The balance delta
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.ClearTime">
            <summary>
            The time the deposit/withdrawal was cleared
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList">
            <summary>
            Order list info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.OrderListId">
            <summary>
            The id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ContingencyType">
            <summary>
            The contingency type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListStatusType">
            <summary>
            The order list status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListOrderStatus">
            <summary>
            The order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListClientOrderId">
            <summary>
            The client id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.TransactionTime">
            <summary>
            The transaction time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.Symbol">
            <summary>
            The symbol of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.Orders">
            <summary>
            The order in this list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId">
            <summary>
            Order reference
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate">
            <summary>
            Update data about an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.ClientOrderId">
            <summary>
            The new client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.TimeInForce">
            <summary>
            The timespan the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.StopPrice">
            <summary>
            The stop price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.IcebergQuantity">
            <summary>
            The iceberg quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OriginalClientOrderId">
            <summary>
            The original client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.ExecutionType">
            <summary>
            The execution type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.RejectReason">
            <summary>
            The reason the order was rejected
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OrderId">
            <summary>
            The id of the order as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastQuantityFilled">
            <summary>
            The quantity of the last filled trade of this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuantityFilled">
            <summary>
            The quantity of all trades that were filled for this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastPriceFilled">
            <summary>
            The price of the last filled trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Commission">
            <summary>
            The commission payed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.CommissionAsset">
            <summary>
            The asset the commission was taken from
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.UpdateTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.TradeId">
            <summary>
            The trade id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.IsWorking">
            <summary>
            Is working
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.BuyerIsMaker">
            <summary>
            Whether the buyer is the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.CreateTime">
            <summary>
            Time the order was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuoteQuantity">
            <summary>
            Quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastQuoteQuantity">
            <summary>
            Last quote asset transacted quantity (i.e. LastPrice * LastQuantity)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OrderListId">
            <summary>
            This id of the corresponding order list. (-1 if not part of an order list)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.I">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus">
            <summary>
            Account status info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus.Message">
            <summary>
            The result message
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus.Success">
            <summary>
            Success boolean
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus.Objects">
            <summary>
            Parameters
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress">
            <summary>
            Deposit address info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Address">
            <summary>
            The deposit address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Tag">
            <summary>
            Address tag
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Coin">
            <summary>
            Coin the address is for
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDeposit">
            <summary>
            Information about a deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.InsertTime">
            <summary>
            Time the deposit was added to Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Amount">
            <summary>
            The amount deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Coin">
            <summary>
            The coin deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Address">
            <summary>
            The address of the deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Tag">
            <summary>
            The tag of the address of the deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Network">
            <summary>
            The network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Status">
            <summary>
            The status of the deposit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord">
            <summary>
            Dividend record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Timestamp">
            <summary>
            Timestamp of the transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustLog">
            <summary>
            Dust log details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.TransferredTotal">
            <summary>
            Total transferred
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.ServiceChargeTotal">
            <summary>
            Total service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.Logs">
            <summary>
            Detail logs
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.OperateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails">
            <summary>
            Dust log entry details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.ServiceChargeAmount">
            <summary>
            Service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.UId">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.OperateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.TransferredAmount">
            <summary>
            Transferred amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.FromAsset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult">
            <summary>
            Result of dust transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TotalServiceCharge">
            <summary>
            Total service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TotalTransferred">
            <summary>
            Total transferred
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TransferResult">
            <summary>
            Transfer entries
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry">
            <summary>
            Dust transfer entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.Amount">
            <summary>
            Amount of dust
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.FromAsset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.Timestamp">
            <summary>
            Timestamp of conversion
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.ServiceChargeAmount">
            <summary>
            Service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.TransferredAmount">
            <summary>
            BNB result amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus">
            <summary>
            The status of Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus.Message">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee">
            <summary>
            Trade fee info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.Symbol">
            <summary>
            The symbol this fee is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.MakerFee">
            <summary>
            The fee for trades where you're the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.TakerFee">
            <summary>
            The fee for trades where you're the taker
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus">
            <summary>
            Trade status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.IsLocked">
            <summary>
            Is locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.PlannedRecoverTime">
            <summary>
            Planned time of recovery
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.TriggerConditions">
            <summary>
            Conditions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.Indicators">
            <summary>
            Dictionary of indicator lists for symbols
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceIndicator">
            <summary>
            Indicator info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.IndicatorType">
            <summary>
            Indicator name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.CurrentValue">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.TriggerValue">
            <summary>
            Trigger value
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin">
            <summary>
            Information about a coin for a user
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Coin">
            <summary>
            Coin code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.DepositAllEnable">
            <summary>
            Deposit all is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Free">
            <summary>
            Amount free
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Freeze">
            <summary>
            Amount frozen
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Ipoable">
            <summary>
            Ipo-able
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Ipoing">
            <summary>
            Ipo-ing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.IsLegalMoney">
            <summary>
            Is the coin legally money
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Locked">
            <summary>
            Amount locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Storage">
            <summary>
            Storage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Trading">
            <summary>
            Is trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.WithdrawAllEnable">
            <summary>
            Withdraw all enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Name">
            <summary>
            Name of the coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.NetworkList">
            <summary>
            Networks
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceNetwork">
            <summary>
            Network for a coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.AddressRegex">
            <summary>
            Regex for an address on the network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.Coin">
            <summary>
            Coin name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.DepositDescription">
            <summary>
            Deposit description
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.DepositEnabled">
            <summary>
            Deposit enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.IsDefault">
            <summary>
            Is default network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.MemoRegex">
            <summary>
            Regex for a memo
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.MinConfirmations">
            <summary>
            Minimal confirmations for balance confirmation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.ResetAddressStatus">
            <summary>
            Reset address status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.SpecialTips">
            <summary>
            Tips
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.UnlockConfirm">
            <summary>
            Confirmation number for balance unlock
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawDescription">
            <summary>
            Withdraw description
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawEnabled">
            <summary>
            Withdraw is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawFee">
            <summary>
            Fee for withdrawing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawMin">
            <summary>
            Minimal withdraw amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails">
            <summary>
            Asset details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.MinimalWithdrawAmount">
            <summary>
            Minimal amount you can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.DepositStatus">
            <summary>
            Whether deposits are enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.WithdrawStatus">
            <summary>
            Whether withdrawing is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.WithdrawFee">
            <summary>
            Fee for withdrawing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.DepositTip">
            <summary>
            Status string for deposit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalList">
            <summary>
            Wrapper for list of withdrawals
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalList.List">
            <summary>
            The list of withdrawals
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalList.Success">
            <summary>
            Boolean indicating if the withdrawal list retrieval was successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalList.Message">
            <summary>
            Message what went wrong if retrieving wasn't successful
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal">
            <summary>
            Information about a withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Id">
            <summary>
            The id of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.ApplyTime">
            <summary>
            The time the withdrawal was applied for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Amount">
            <summary>
            The amount of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Address">
            <summary>
            The address the asset was withdrawn to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.AddressTag">
            <summary>
            Tag for the address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.TransactionFee">
            <summary>
            Transaction fee for the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Asset">
            <summary>
            The asset that was withdrawn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced">
            <summary>
            Result of placing a withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced.Success">
            <summary>
            Boolean indicating the success of submitting the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced.Message">
            <summary>
            Message describing what went wrong if not successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="T:Binance.Net.SocketSubClients.BinanceSocketClientFutures">
            <summary>
            Futures subscriptions
            </summary>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAggregatedTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAggregatedTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToMarkPriceUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToMarkPriceUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllMarkPriceUpdates(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllMarkPriceUpdatesAsync(System.Nullable{System.Int32},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            /// <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToKlineUpdates(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToKlineUpdates(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolMiniTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolMiniTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllSymbolMiniTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllSymbolTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToBookTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToBookTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllBookTickerUpdates(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllBookTickerUpdatesAsync(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToLiquidationUpdates(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToLiquidationUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllLiquidationUpdates(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllLiquidationUpdatesAsync(System.Action{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToPartialOrderBookUpdates(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToPartialOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToOrderBookUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0, 100, 250 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0, 100, 250 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToUserDataUpdates(System.String,System.Action{System.Decimal},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition}},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Futures.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onCrossWalletUpdate">The event handler for whenever a cross wallet has changed</param>
            <param name="onMarginUpdate">The event handler for whenever a margin has changed</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdate">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdate">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToUserDataUpdatesAsync(System.String,System.Action{System.Decimal},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance}},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition}},System.Action{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate},System.Action{Binance.Net.Objects.BinanceStreamEvent})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Futures.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onCrossWalletUpdate">The event handler for whenever a cross wallet has changed</param>
            <param name="onMarginUpdate">The event handler for whenever a margin has changed</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <param name="onPositionUpdate">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onOrderUpdate">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.SocketSubClients.BinanceSocketClientSpot">
            <summary>
            Spot subscriptions
            </summary>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAggregatedTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAggregatedTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToTradeUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToTradeUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToTradeUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToKlineUpdates(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToKlineUpdates(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolMiniTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolMiniTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllSymbolMiniTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllSymbolTickerUpdates(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToBookTickerUpdates(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToBookTickerUpdates(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllBookTickerUpdates(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllBookTickerUpdatesAsync(System.Action{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice})">
            <summary>
            Subscribes to the book ticker update stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToPartialOrderBookUpdates(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToPartialOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToOrderBookUpdates(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToOrderBookUpdates(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{Binance.Net.Interfaces.IBinanceOrderBook})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToUserDataUpdates(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Spot.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountInfoMessage">The event handler for whenever an account info update is received</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToUserDataUpdatesAsync(System.String,System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList},System.Action{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance}},System.Action{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Spot.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onAccountInfoMessage">The event handler for whenever an account info update is received</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco order status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientAccount">
            <summary>
            Account endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetDailySpotAccountSnapshot(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (balances)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetDailySpotAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (balances)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetDailyMarginAccountSnapshot(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetDailyMarginAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetDailyFutureAccountSnapshot(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets and positions)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetDailyFutureAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets and positions)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetAccountStatus(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetAccountStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetTradingStatus(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetUserCoins(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets information of coins for a user
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetUserCoinsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets information of coins for a user
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetAssetDividendRecords(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.GetAssetDividendRecordsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.DisableFastWithdrawSwitch(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This request will disable fastwithdraw switch under your account.
            You need to enable "trade" option for the api key which requests this endpoint.
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.DisableFastWithdrawSwitchAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This request will disable fastwithdraw switch under your account.
            You need to enable "trade" option for the api key which requests this endpoint.
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.EnableFastWithdrawSwitch(System.Nullable{System.Int32},System.Threading.CancellationToken)">
             <summary>
             This request will enable fastwithdraw switch under your account.
             You need to enable "trade" option for the api key which requests this endpoint.
            
             When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly.
             There is no on-chain transaction, no transaction ID and no withdrawal fee.
             </summary>
             <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
             <param name="ct">Cancellation token</param>
             <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientAccount.EnableFastWithdrawSwitchAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
             <summary>
             This request will enable fastwithdraw switch under your account.
             You need to enable "trade" option for the api key which requests this endpoint.
            
             When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly.
             There is no on-chain transaction, no transaction ID and no withdrawal fee.
             </summary>
             <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
             <param name="ct">Cancellation token</param>
             <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientBrokerage">
            <summary>
            Brokerage endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.CreateSubAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Generate a sub account under your brokerage master account
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Created sub-account id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Margin for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Margin result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Futures for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Futures result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.CreateApiKeyForSubAccountAsync(System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create Api Key for Sub Account
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="isTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.DeleteSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delete Sub Account Api Key
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeSubAccountApiPermissionAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Api Permission
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="isTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub accounts</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeSubAccountCommissionAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Commission
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>If margin disabled, it is not allowed to send marginMakerCommission or marginTakerCommission</para>
            <para>If margin enabled, marginMakerCommission or marginTakerCommission has default value as spotMakerCommission or spotTakerCommission</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="makerCommission">Maker commission</param>
            <param name="takerCommission">Taker commission</param>
            <param name="marginMakerCommission">Margin maker commission</param>
            <param name="marginTakerCommission">Margin taker commission</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account commission result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Futures Commission Adjustment
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>The sub-account's futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If futures disabled, it is not allowed to set subaccount's futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="makerAdjustment">Maker adjustment (100 for 0.01%)</param>
            <param name="takerAdjustment">Taker adjustment (100 for 0.01%)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account futures commission result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Futures Commission Adjustment
            <para>The sub-account's futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If symbol not sent, commission adjustment of all symbols will be returned</para>
            <para>If futures disabled, it is not allowed to set subaccount's futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account futures commissions result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetBrokerAccountInfoAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Broker Account Information
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Broker information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.TransferAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id, must be unique</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetTransferHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page</param>
            <param name="limit">Limit</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetBrokerCommissionRebatesRecentAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate Recent Record
            <para>Only get the latest history of past 7 days</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="limit">Limit (Default 500, max 1000)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Rebates history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetBrokerCommissionRebatesHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate History
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="limit">Limit (default 1000)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>A download link for an offline file</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeBnbBurnForSubAccountSpotAndMarginAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="spotBnbBurn">"true" or "false", spot and margin whether use BNB to pay for transaction fees or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeBnbBurnForSubAccountMarginInterestAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account Margin Interest
            <para>Sub account must be enabled margin before using this switch</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="interestBnbBurn">"true" or "false", margin loan whether uses BNB to pay for margin interest or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetBnbBurnStatusForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get BNB Burn Status for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Status</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientDeposit">
            <summary>
            Deposit endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientDeposit.GetDepositHistory(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="coin">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="limit">Amount of results</param>
            <param name="offset">Offset the results</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientDeposit.GetDepositHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="coin">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="limit">Amount of results</param>
            <param name="offset">Offset the results</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientDeposit.GetDepositAddress(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="coin">Asset to get address for</param>
            <param name="network">Network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientDeposit.GetDepositAddressAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="coin">Asset to get address for</param>
            <param name="network">Network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientDust">
            <summary>
            Dust endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientDust.GetDustLog(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientDust.GetDustLogAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientDust.DustTransfer(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientDust.DustTransferAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientLending">
            <summary>
            Lending endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFlexibleProductList(System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get product list
            </summary>
            <param name="status">Filter by status</param>
            <param name="featured">Filter by featured</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of product</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFlexibleProductListAsync(System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get product list
            </summary>
            <param name="status">Filter by status</param>
            <param name="featured">Filter by featured</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of product</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLeftDailyPurchaseQuotaOfFlexableProduct(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the purchase quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLeftDailyPurchaseQuotaOfFlexableProductAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the purchase quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.PurchaseFlexibleProduct(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="amount">The amount to purchase</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.PurchaseFlexibleProductAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="amount">The amount to purchase</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLeftDailyRedemptionQuotaOfFlexibleProduct(System.String,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the redemption quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLeftDailyRedemptionQuotaOfFlexibleProductAsync(System.String,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the redemption quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.RedeemFlexibleProduct(System.String,System.Decimal,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Redeem flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Redeem type</param>
            <param name="amount">The amount to redeem</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.RedeemFlexibleProductAsync(System.String,System.Decimal,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Redeem flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Redeem type</param>
            <param name="amount">The amount to redeem</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFlexibleProductPosition(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get flexible product position
            </summary>
            <param name="asset">Asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Flexible product position</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFlexibleProductPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get flexible product position
            </summary>
            <param name="asset">Asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Flexible product position</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFixedAndCustomizedFixedProjectList(Binance.Net.Enums.ProjectType,System.String,System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get fixed and customized fixed project list
            </summary>
            <param name="type">Type of project</param>
            <param name="asset">Asset</param>
            <param name="status">Filter by status</param>
            <param name="sortAscending">If should sort ascending</param>
            <param name="sortBy">Sort by. Valid values: "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME"</param>
            <param name="currentPage">Result page</param>
            <param name="size">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Project list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFixedAndCustomizedFixedProjectListAsync(Binance.Net.Enums.ProjectType,System.String,System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get fixed and customized fixed project list
            </summary>
            <param name="type">Type of project</param>
            <param name="asset">Asset</param>
            <param name="status">Filter by status</param>
            <param name="sortAscending">If should sort ascending</param>
            <param name="sortBy">Sort by. Valid values: "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME"</param>
            <param name="currentPage">Result page</param>
            <param name="size">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Project list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.PurchaseCustomizedFixedProject(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase customized fixed project
            </summary>
            <param name="projectId">Id of the project</param>
            <param name="lot">The lot</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.PurchaseCustomizedFixedProjectAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase customized fixed project
            </summary>
            <param name="projectId">Id of the project</param>
            <param name="lot">The lot</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetCustomizedFixedProjectPositions(System.String,System.String,System.Nullable{Binance.Net.Enums.ProjectStatus},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get customized fixed project position
            </summary>
            <param name="asset">Asset</param>
            <param name="projectId">The project id</param>
            <param name="status">Filter by status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Customized fixed project position</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetCustomizedFixedProjectPositionsAsync(System.String,System.String,System.Nullable{Binance.Net.Enums.ProjectStatus},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get customized fixed project position
            </summary>
            <param name="asset">Asset</param>
            <param name="projectId">The project id</param>
            <param name="status">Filter by status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Customized fixed project position</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLendingAccount(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get lending account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Lending account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLendingAccountAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get lending account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Lending account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetPurchaseRecords(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get purchase records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The purchase records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetPurchaseRecordsAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get purchase records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The purchase records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetRedemptionRecords(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get redemption records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The redemption records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetRedemptionRecordsAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get redemption records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The redemption records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLendingInterestHistory(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get interest history
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The interest history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLendingInterestHistoryAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get interest history
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The interest history</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientMining">
            <summary>
            Mining endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningCoinList(System.Threading.CancellationToken)">
            <summary>
            Gets mining coins info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningCoinListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets mining coins info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningAlgorithmList(System.Threading.CancellationToken)">
            <summary>
            Gets mining algorithms info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Algorithms info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningAlgorithmListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets mining algorithms info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Algorithms info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMinerDetails(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets miner details
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="workerName">Miners name</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMinerDetailsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets miner details
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="workerName">Miners name</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMinerList(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{Binance.Net.Enums.MinerStatus},System.Threading.CancellationToken)">
            <summary>
            Gets miner list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="sortAscending">Sort in ascending order</param>
            <param name="sortColumn">Column to sort by</param>
            <param name="workerStatus">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMinerListAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{Binance.Net.Enums.MinerStatus},System.Threading.CancellationToken)">
            <summary>
            Gets miner list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="sortAscending">Sort in ascending order</param>
            <param name="sortColumn">Column to sort by</param>
            <param name="workerStatus">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningRevenueList(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets revenue list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="coin">Coin</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningRevenueListAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets revenue list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="coin">Coin</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningStatistics(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get mining statistics
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">User name</param>
            <param name="ct">Cancellation token</param>
            <returns>Mining statistics</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningStatisticsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get mining statistics
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">User name</param>
            <param name="ct">Cancellation token</param>
            <returns>Mining statistics</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningAccountListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets mining account list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account user name</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientSubAccount">
            <summary>
            Sub accounts endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccounts(System.String,System.Nullable{Binance.Net.Enums.SubAccountStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="accountStatus">Filter the list by account status</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsAsync(System.String,System.Nullable{Binance.Net.Enums.SubAccountStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="accountStatus">Filter the list by account status</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountTransferForMasterHistory(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the master account) 
            </summary>
            <param name="email">Filter the history by email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountTransferHistoryForMasterAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the master account) 
            </summary>
            <param name="email">Filter the history by email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccount(System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one sub account to another
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountAsync(System.String,System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset from one sub account to another
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountAssets(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets list of balances for a sub account
            </summary>
            <param name="email">For which account to get the assets</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountAssetsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets list of balances for a sub account
            </summary>
            <param name="email">For which account to get the assets</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountDepositAddress(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a coin to a sub account
            </summary>
            <param name="email">The email of the account to deposit to</param>
            <param name="coin">The coin of the deposit</param>
            <param name="network">The coin network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountDepositAddressAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a coin to a sub account
            </summary>
            <param name="email">The email of the account to deposit to</param>
            <param name="coin">The coin of the deposit</param>
            <param name="network">The coin network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountDepositHistory(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history for a sub account
            </summary>
            <param name="email">The email of the account to get history for</param>
            <param name="coin">Filter for a coin</param>
            <param name="startTime">Only return deposits placed later this</param>
            <param name="endTime">Only return deposits placed before this</param>
            <param name="limit">Max number of results</param>
            <param name="offset">Offset results by this</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountDepositHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history for a sub account
            </summary>
            <param name="email">The email of the account to get history for</param>
            <param name="coin">Filter for a coin</param>
            <param name="startTime">Only return deposits placed later this</param>
            <param name="endTime">Only return deposits placed before this</param>
            <param name="limit">Max number of results</param>
            <param name="offset">Offset results by this</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountStatus(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountStatusAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.EnableMarginForSubAccount(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables margin for a sub account
            </summary>
            <param name="email">The email of the account to enable margin for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin enable status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables margin for a sub account
            </summary>
            <param name="email">The email of the account to enable margin for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin enable status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountMarginDetails(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin details for a sub account
            </summary>
            <param name="email">The email of the account to get margin details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountMarginDetailsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin details for a sub account
            </summary>
            <param name="email">The email of the account to get margin details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsMarginSummary(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin summary</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsMarginSummaryAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin summary</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.EnableFuturesForSubAccount(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables futures for a sub account
            </summary>
            <param name="email">The sub account email to enable futures for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables futures for a sub account
            </summary>
            <param name="email">The sub account email to enable futures for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountFuturesDetails(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures details for a sub account
            </summary>
            <param name="email">The email of the account to get future details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountFuturesDetailsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures details for a sub account
            </summary>
            <param name="email">The email of the account to get future details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsFuturesSummary(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures summary</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsFuturesSummaryAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures summary</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsFuturesPositionRisk(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures position risk for a sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Position risk</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsFuturesPositionRiskAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures position risk for a sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Position risk</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountFutures(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a futures sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountFuturesAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a futures sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountMargin(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a margin sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountMarginAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a margin sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountToSubAccount(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to another sub account of the same master
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountToSubAccountAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to another sub account of the same master
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountToMaster(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to master account
            </summary>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountToMasterAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to master account
            </summary>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountTransferHistoryForSubAccount(System.String,System.Nullable{Binance.Net.Enums.SubAccountTransferSubAccountType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the sub account)
            </summary>
            <param name="asset">The asset</param>
            <param name="type">Filter by type of transfer</param>
            <param name="startTime">Only return transfers later than this</param>
            <param name="endTime">Only return transfers before this</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountTransferHistoryForSubAccountAsync(System.String,System.Nullable{Binance.Net.Enums.SubAccountTransferSubAccountType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the sub account)
            </summary>
            <param name="asset">The asset</param>
            <param name="type">Filter by type of transfer</param>
            <param name="startTime">Only return transfers later than this</param>
            <param name="endTime">Only return transfers before this</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientSystem">
            <summary>
            System endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSystem.Ping(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSystem.GetServerTime(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSystem.GetExchangeInfo(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSystem.GetSystemStatus(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSystem.GetSystemStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientWithdraw">
            <summary>
            Withdraw endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdraw.Withdraw(System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="amount">The amount to withdraw</param>
            <param name="withdrawOrderId">Custom client order id</param>
            <param name="network">The network to use</param>
            <param name="name">Description of the address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdraw.WithdrawAsync(System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="withdrawOrderId">Custom client order id</param>
            <param name="amount">The amount to withdraw</param>
            <param name="network">The network to use</param>
            <param name="name">Description of the address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdraw.GetWithdrawalHistory(System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdraw.GetWithdrawalHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientWithdrawDeposit">
            <summary>
            Withdraw/Deposit endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdrawDeposit.GetAssetDetails(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdrawDeposit.GetAssetDetailsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFutures">
            <summary>
            Futures endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFutures.Account">
            <summary>
            Futures account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFutures.Market">
            <summary>
            Futures market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFutures.System">
            <summary>
            Futures system endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFutures.Order">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFutures.UserStream">
            <summary>
            Futures user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ModifyPositionMode(System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="dualPositionSide">User position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ModifyPositionModeAsync(System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="dualPositionSide">User position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetPositionMode(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symboln
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetPositionModeAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ChangeInitialLeverage(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ChangeInitialLeverageAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ChangeMarginType(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ChangeMarginTypeAsync(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ModifyPositionMargin(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ModifyPositionMarginAsync(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetMarginChangeHistory(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetMarginChangeHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetOpenPositions(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user positions
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetOpenPositionsAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user positions
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetIncomeHistory(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetIncomeHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetBracket(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetBracketAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetBrackets(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all Notional and Leverage Brackets
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetBracketsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all Notional and Leverage Brackets.
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount">
            <summary>
            Futures account endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount.GetFuturesAccountBalance(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount.GetFuturesAccountBalanceAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount.GetAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket">
            <summary>
            Futures market endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetOrderBook(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetSymbolTrades(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetHistoricalSymbolTrades(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetHistoricalSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAggregatedTrades(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAggregatedTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetKlines(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetMarkPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetMarkPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAllMarkPrices(System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAllMarkPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetFundingRates(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetFundingRatesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.Get24HPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.Get24HPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.Get24HPrices(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.Get24HPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAllPrices(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAllPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetBookPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAllBookPrices(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAllLiquidationOrders(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all Liquidation Orders
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get  liquidation orders history</param>
            <param name="endTime">End time to get liquidation orders history</param>
            <param name="limit">Max number of results. Default:100 Max:1000</param>
            <param name="ct">Cancellation token</param>
            <returns>The all liquidation orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAllLiquidationOrdersAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all Liquidation Orders
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get  liquidation orders history</param>
            <param name="endTime">End time to get liquidation orders history</param>
            <param name="limit">Max number of results. Default:100 Max:1000</param>
            <param name="ct">Cancellation token</param>
            <returns>The all liquidation orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetOpenInterest(System.String,System.Threading.CancellationToken)">
            <summary>
            Get present open interest of a specific symbol.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get present open interest of a specific symbol.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetOpenInterestHistory(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest History
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get open interest history</param>
            <param name="endTime">End time to get open interest history</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest History info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetOpenInterestHistoryAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest History
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get open interest history</param>
            <param name="endTime">End time to get open interest history</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest History info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTopLongShortAccountRatio(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (accounts)</param>
            <param name="endTime">End time to get top trader long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTopLongShortAccountRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (accounts)</param>
            <param name="endTime">End time to get top trader long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTopLongShortPositionRatio(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Positions)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (positions)</param>
            <param name="endTime">End time to get top trader long/short ratio (positions)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Positions) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTopLongShortPositionRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Positions)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (positions)</param>
            <param name="endTime">End time to get top trader long/short ratio (positions)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Positions) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetGlobalLongShortAccountRatio(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Global Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get global long/short ratio (accounts)</param>
            <param name="endTime">End time to get global long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Global Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetGlobalLongShortAccountRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Global Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get global long/short ratio (accounts)</param>
            <param name="endTime">End time to get global long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Global Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTakerBuySellVolumeRatio(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Taker Buy/Sell Volume Ratio
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get taker buy/sell volume ratio</param>
            <param name="endTime">End time to get taker buy/sell volume ratio</param>
            <param name="ct">Cancellation token</param>
            <returns>Taker Buy/Sell Volume Ratio info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTakerBuySellVolumeRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Taker Buy/Sell Volume Ratio
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get taker buy/sell volume ratio</param>
            <param name="endTime">End time to get taker buy/sell volume ratio</param>
            <param name="ct">Cancellation token</param>
            <returns>Taker Buy/Sell Volume Ratio info</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.PlaceOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill/GootTillCrossing)</param>
            <param name="positionSide">The position side</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">A unique id among open orders. Automatically generated if not sent.</param>
            <param name="stopPrice">Used with STOP/STOP_MARKET or TAKE_PROFIT/TAKE_PROFIT_MARKET orders.</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="closePosition">Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET.</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="positionSide">The position side</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="closePosition">Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.PlaceMultipleOrders(Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder[],System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in one call
            </summary>
            <param name="orders">The orders to place</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Returns a list of call results, one for each order. The order the results are in is the order the orders were sent</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.PlaceMultipleOrdersAsync(Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder[],System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in one call
            </summary>
            <param name="orders">The orders to place</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Returns a list of call results, one for each order. The order the results are in is the order the orders were sent</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">The new client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelAllOrders(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelAllOrdersAfterTimeout(System.String,System.TimeSpan,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all open orders of the specified symbol at the end of the specified countdown. This rest endpoint means to ensure your open orders are canceled in case of an outage. The endpoint should be called repeatedly as heartbeats
            so that the existing countdown time can be canceled and replaced by a new one.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="countDownTime">The time after which all open orders should cancel, or 0 to cancel an existing timer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Countdown result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelAllOrdersAfterTimeoutAsync(System.String,System.TimeSpan,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all open orders of the specified symbol at the end of the specified countdown. This rest endpoint means to ensure your open orders are canceled in case of an outage. The endpoint should be called repeatedly as heartbeats
            so that the existing countdown time can be canceled and replaced by a new one.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="countDownTime">The time after which all open orders should cancel, or 0 to cancel an existing timer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Countdown result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelMultipleOrders(System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels muliple orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderIdList">The list of order ids to cancel</param>
            <param name="origClientOrderIdList">The list of client order ids to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelMultipleOrdersAsync(System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels muliple orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderIdList">The list of order ids to cancel</param>
            <param name="origClientOrderIdList">The list of client order ids to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOpenOrders(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific current orders. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific current orders. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOpenOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetAllOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetMyTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetMyTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem">
            <summary>
            Futures system endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.Ping(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance Futures API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance Futures API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.GetServerTime(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.GetExchangeInfo(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream">
            <summary>
            Futures user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.StartUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Futures.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Futures.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.KeepAliveUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.StopUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMargin">
            <summary>
            Isolated margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMargin.UserStream">
            <summary>
            Isolated margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMargin.CreateIsolatedMarginAccountAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create isolated margin account
            </summary>
            <param name="baseAsset">The base asset</param>
            <param name="quoteAsset">The quote asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMargin.IsolatedMarginAccountTransfer(System.String,System.String,Binance.Net.Enums.IsolatedMarginTransferDirection,Binance.Net.Enums.IsolatedMarginTransferDirection,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfer from or to isolated margin account
            </summary>
            <param name="asset">The asset</param>
            <param name="symbol">Isolated symbol</param>
            <param name="from">From</param>
            <param name="to">To</param>
            <param name="amount">Amount to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMargin.GetIsolatedMarginAccountTransferHistory(System.String,System.String,System.Nullable{Binance.Net.Enums.IsolatedMarginTransferDirection},System.Nullable{Binance.Net.Enums.IsolatedMarginTransferDirection},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get history of transfer to and from the isolated margin account
            </summary>
            <param name="symbol">The symbol</param>
            <param name="asset">Filter by asset</param>
            <param name="from">Filter by direction</param>
            <param name="to">Filter by direction</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="current">Current page</param>
            <param name="limit">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMargin.GetIsolatedMarginAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMargin.GetIsolatedMarginSymbol(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin symbol info
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMargin.GetIsolatedMarginSymbols(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin symbol info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMarginUserStream">
            <summary>
            Margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMarginUserStream.StartIsolatedMarginUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMarginUserStream.StartIsolatedMarginUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMarginUserStream.KeepAliveIsolatedMarginUserStream(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user for margin account stream listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMarginUserStream.KeepAliveIsolatedMarginUserStreamAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream for margin account listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMarginUserStream.CloseIsolatedMarginUserStream(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.IsolatedMargin.BinanceClientIsolatedMarginUserStream.CloseIsolatedMarginUserStreamAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientMargin">
            <summary>
            Margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Margin.BinanceClientMargin.Market">
            <summary>
            Margin market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Margin.BinanceClientMargin.Order">
            <summary>
            Margin order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Margin.BinanceClientMargin.UserStream">
            <summary>
            Margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.Transfer(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.TransferAsync(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.Borrow(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.BorrowAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.Repay(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.RepayAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetTransferHistory(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetTransferHistoryAsync(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetLoans(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetLoansAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetRepays(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="size">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetRepaysAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Filter by number</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="size">The records count size need show</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetInterestHistory(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetInterestHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetForceLiquidationHistory(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetForceLiquidationHistoryAsync(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMarginAccountInfo(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMaxBorrowAmount(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMaxBorrowAmountAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMaxTransferAmount(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMaxTransferAmountAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientMarginMarket">
            <summary>
            Margin market endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginAsset(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin asset
            </summary>
            <param name="asset">The asset to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin asset</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginAssetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin asset
            </summary>
            <param name="asset">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPair(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin pair
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin asset</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPairAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin pair
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginAssets(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPairs(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPairsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPriceIndex(System.String,System.Threading.CancellationToken)">
            <summary>
            Get margin price index
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin price index</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPriceIndexAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get margin price index
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin price index</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientMarginOrders">
            <summary>
            Margin order endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.PlaceMarginOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.PlaceMarginOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.CancelMarginOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.CancelMarginOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMarginAccountOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMarginAccountOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetOpenMarginAccountOrders(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetOpenMarginAccountOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetAllMarginAccountOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetAllMarginAccountOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMyMarginAccountTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMyMarginAccountTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream">
            <summary>
            Margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.StartUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates. 
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates. 
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.KeepAliveUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user for margin account stream listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream for margin account listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.StopUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpot">
            <summary>
            Spot endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Spot.BinanceClientSpot.Market">
            <summary>
            Spot market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Spot.BinanceClientSpot.Order">
            <summary>
            Spot order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Spot.BinanceClientSpot.UserStream">
            <summary>
            Spot user stream endpoints
            </summary>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpotMarket">
            <summary>
            Spot market endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetOrderBook(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetSymbolTrades(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetHistoricalSymbolTrades(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetHistoricalSymbolTradesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetAggregatedTrades(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetAggregatedTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetKlines(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetCurrentAvgPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetCurrentAvgPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.Get24HPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.Get24HPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.Get24HPrices(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.Get24HPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetAllPrices(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetAllPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetBookPrice(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetAllBookPrices(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetTradeFee(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal fee for an symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetTradeFeeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trade fee for a symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpotOrder">
            <summary>
            Spot order endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceTestOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceTestOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceOrder(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">The new client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelAllOpenOrders(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders on a symbol
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelAllOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders on a symbol
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOrder(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOpenOrders(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetAllOrders(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceOCOOrder(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceOCOOrderAsync(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelOCOOrder(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelOCOOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOCOOrder(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either listClientOrderId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOCOOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either orderListId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOCOOrders(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOCOOrdersAsync(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOpenOCOOrders(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOpenOCOOrdersAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetMyTrades(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetMyTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream">
            <summary>
            Spot user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.StartUserStream(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.KeepAliveUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.StopUserStream(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SymbolOrderBooks.BinanceFuturesSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesSymbolOrderBook.#ctor(System.String,Binance.Net.Objects.Spot.BinanceOrderBookOptions)">
            <summary>
            Create a new instance
            </summary>
            <param name="symbol">The symbol of the order book</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesSymbolOrderBook.DoStart">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesSymbolOrderBook.DoResync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.SymbolOrderBooks.BinanceSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSymbolOrderBook.#ctor(System.String,Binance.Net.Objects.Spot.BinanceOrderBookOptions)">
            <summary>
            Create a new instance
            </summary>
            <param name="symbol">The symbol of the order book</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSymbolOrderBook.DoStart">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSymbolOrderBook.DoResync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
    </members>
</doc>
