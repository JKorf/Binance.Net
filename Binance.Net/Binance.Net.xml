<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Binance.Net</name>
    </assembly>
    <members>
        <member name="T:Binance.Net.BinanceApiAddresses">
            <summary>
            Api addresses
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceApiAddresses.RestClientAddress">
            <summary>
            The address used by the BinanceClient for the Spot API
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceApiAddresses.SocketClientAddress">
            <summary>
            The address used by the BinanceSocketClient for the Spot API
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceApiAddresses.UsdtFuturesRestClientAddress">
            <summary>
            The address used by the BinanceClient for the USD futures API
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceApiAddresses.UsdtFuturesSocketClientAddress">
            <summary>
            The address used by the BinanceSocketClient for the USD futures API
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceApiAddresses.CoinFuturesRestClientAddress">
            <summary>
            The address used by the BinanceClient for the COIN futures API
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceApiAddresses.CoinFuturesSocketClientAddress">
            <summary>
            The address used by the BinanceSocketClient for the Coin futures API
            </summary>
        </member>
        <member name="F:Binance.Net.BinanceApiAddresses.Default">
            <summary>
            The default addresses to connect to the binance.com API
            </summary>
        </member>
        <member name="F:Binance.Net.BinanceApiAddresses.TestNet">
            <summary>
            The addresses to connect to the binance testnet
            </summary>
        </member>
        <member name="F:Binance.Net.BinanceApiAddresses.Us">
            <summary>
            The addresses to connect to binance.us. (binance.us futures not are not available)
            </summary>
        </member>
        <member name="T:Binance.Net.BinanceClient">
            <summary>
            Client providing access to the Binance REST Api
            </summary>
        </member>
        <member name="E:Binance.Net.BinanceClient.OnOrderPlaced">
            <summary>
            Event triggered when an order is placed via this client. Only available for Spot orders
            </summary>
        </member>
        <member name="E:Binance.Net.BinanceClient.OnOrderCanceled">
            <summary>
            Event triggered when an order is cancelled via this client. Note that this does not trigger when using CancelAllOrdersAsync. Only available for Spot orders
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.General">
            <summary>
            General endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.SubAccount">
            <summary>
            Sub account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Margin">
            <summary>
            (Isolated) Margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Spot">
            <summary>
            Spot endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Lending">
            <summary>
            Lending endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Mining">
            <summary>
            Mining endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.WithdrawDeposit">
            <summary>
            Withdraw/deposit endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Brokerage">
            <summary>
            Brokerage endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.FuturesUsdt">
            <summary>
            USDT-M futures endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.FuturesCoin">
            <summary>
            Coin-M futures endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Blvt">
            <summary>
            Leveraged tokens endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.BSwap">
            <summary>
            Liquidity swap endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceClient.Fiat">
            <summary>
            Fiat endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceClient.#ctor">
            <summary>
            Create a new instance of BinanceClient using the default options
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceClient.#ctor(Binance.Net.Objects.BinanceClientOptions)">
            <summary>
            Create a new instance of BinanceClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Binance.Net.BinanceClient.SetDefaultOptions(Binance.Net.Objects.BinanceClientOptions)">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Binance.Net.BinanceClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.BinanceClient.ParseErrorResponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceClient.GetSymbolName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.BinanceHelpers">
            <summary>
            Helper methods for the Binance API
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.UsedWeight(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Get the used weight from the response headers
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.UsedOrderCount(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Get the used weight from the response headers
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ClampQuantity(System.Decimal,System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamp a quantity between a min and max quantity and floor to the closest step
            </summary>
            <param name="minQuantity"></param>
            <param name="maxQuantity"></param>
            <param name="stepSize"></param>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ClampPrice(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Clamp a price between a min and max price
            </summary>
            <param name="minPrice"></param>
            <param name="maxPrice"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.FloorPrice(System.Decimal,System.Decimal)">
            <summary>
            Floor a price to the closest tick
            </summary>
            <param name="tickSize"></param>
            <param name="price"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.Floor(System.Decimal)">
            <summary>
            Floor
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.BinanceHelpers.ValidateBinanceSymbol(System.String)">
            <summary>
            Validate the string is a valid Binance symbol.
            </summary>
            <param name="symbolString">string to validate</param>
        </member>
        <member name="T:Binance.Net.BinanceSocketClient">
            <summary>
            Client providing access to the Binance websocket Api
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceSocketClient.Spot">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceSocketClient.FuturesUsdt">
            <summary>
            USDT-M futures stream
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceSocketClient.FuturesCoin">
            <summary>
            COIN-M futures stream
            </summary>
        </member>
        <member name="P:Binance.Net.BinanceSocketClient.Blvt">
            <summary>
            Leveraged tokens stream
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.#ctor">
            <summary>
            Create a new instance of BinanceSocketClient with default options
            </summary>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.#ctor(Binance.Net.Objects.BinanceSocketClientOptions)">
            <summary>
            Create a new instance of BinanceSocketClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SetDefaultOptions(Binance.Net.Objects.BinanceSocketClientOptions)">
            <summary>
            Set the default options to be used when creating new socket clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.SetDataInterpreter(System.Func{System.Byte[],System.String},System.Func{System.String,System.String})">
            <summary>
            Set a function to interpret the data, used when the data is received as bytes instead of a string
            </summary>
            <param name="byteHandler">Handler for byte data</param>
            <param name="stringHandler">Handler for string data</param>
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.MessageMatchesHandler(Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.BinanceSocketClient.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.Enums.AccountType">
            <summary>
            Type of account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Spot">
            <summary>
            Spot account type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Margin">
            <summary>
            Margin account type
            </summary>>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Futures">
            <summary>
            Futures account type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.Leveraged">
            <summary>
            Leveraged account type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountType.TRD_GRP_002">
            <summary>
            See https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#enum-definitions
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.AccountUpdateReason">
            <summary>
            Account update reason
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.Deposit">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.Withdraw">
            <summary>
            Withdraw
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.FundingFee">
            <summary>
            Funding Fee
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.WithdrawReject">
            <summary>
            Withdraw Reject
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.Adjustment">
            <summary>
            Adjustment
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.InsuranceClear">
            <summary>
            Insurance Clear
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.AdminDeposit">
            <summary>
            Admin Deposit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.AdminWithdraw">
            <summary>
            Admin Withdraw
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.MarginTransfer">
            <summary>
            Margin Transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.MarginTypeChange">
            <summary>
            Margin Type Change
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.AssetTransfer">
            <summary>
             Asset Transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.OptionsPremiumFee">
            <summary>
            Options Premium Fee
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AccountUpdateReason.OptionsSettleProfit">
            <summary>
            Options Settle Profit
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.AdjustRateDirection">
            <summary>
            Rate direction
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AdjustRateDirection.Additional">
            <summary>
            Additional
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AdjustRateDirection.Reduced">
            <summary>
            Reduced
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.AutoCloseType">
            <summary>
            Type of auto close
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AutoCloseType.ADL">
            <summary>
            ADL
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.AutoCloseType.Liquidation">
            <summary>
            Liquidation
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.BinanceEarningType">
            <summary>
            Mining earnings type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.MiningWallet">
            <summary>
            Mining wallet
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.MergedMining">
            <summary>
            Merged mining
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.ActivityBonus">
            <summary>
            Activity bonus
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.Rebate">
            <summary>
            Rebate
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.SmartPool">
            <summary>
            Smart pool
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.MiningAddress">
            <summary>
            Mining address
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.PoolSavings">
            <summary>
            Pool savings
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.Transfered">
            <summary>
            Transfered
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.IncomeTransfer">
            <summary>
            Income transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.HashrateResaleMiningWallet">
            <summary>
            Hashrate resale - mining wallet
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BinanceEarningType.HashrateResalePoolSavings">
            <summary>
            Hashrate resale - pool savings
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.BlvtStatus">
            <summary>
            Status of a blvt action
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BlvtStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BlvtStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BlvtStatus.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.BrokerageAccountType">
            <summary>
            Brokerage account type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BrokerageAccountType.Spot">
            <summary> Spot </summary>
        </member>
        <member name="F:Binance.Net.Enums.BrokerageAccountType.FuturesUsdt">
            <summary> Futures USDT </summary>
        </member>
        <member name="F:Binance.Net.Enums.BrokerageAccountType.FuturesCoin">
            <summary> Futures Coin </summary>
        </member>
        <member name="T:Binance.Net.Enums.BrokerageTransferTransactionStatus">
            <summary>
            Brokerage transfer transaction status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BrokerageTransferTransactionStatus.Init">
            <summary> Init </summary>
        </member>
        <member name="F:Binance.Net.Enums.BrokerageTransferTransactionStatus.Process">
            <summary> Process </summary>
        </member>
        <member name="F:Binance.Net.Enums.BrokerageTransferTransactionStatus.Success">
            <summary> Success </summary>
        </member>
        <member name="F:Binance.Net.Enums.BrokerageTransferTransactionStatus.Failure">
            <summary> Failure </summary>
        </member>
        <member name="T:Binance.Net.Enums.BSwapOperation">
            <summary>
            Swap operation
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BSwapOperation.Add">
            <summary>
            Add liquidity
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BSwapOperation.Remove">
            <summary>
            Remove liquidity
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.BSwapStatus">
            <summary>
            Status of a BSwap operation
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BSwapStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BSwapStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.BSwapStatus.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ContractType">
            <summary>
            Type of contract
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ContractType.Perpetual">
            <summary>
            Perpetual
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ContractType.CurrentMonth">
            <summary>
            Current month
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ContractType.CurrentQuarter">
            <summary>
            Current quarter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ContractType.CurrentQuarterDelivering">
            <summary>
            Current quarter delivering
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ContractType.NextQuarter">
            <summary>
            Next quarter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ContractType.NextQuarterDelivering">
            <summary>
            Next quarter delivering
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ContractType.NextMonth">
            <summary>
            Next month
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ContractType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.DepositStatus">
            <summary>
            The status of a deposit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.DepositStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ExecutionType">
            <summary>
            The type of execution
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Replaced">
            <summary>
            Replaced
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ExecutionType.Amendment">
            <summary>
            Amendment
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FiatPaymentStatus">
            <summary>
            Status of a fiat payment
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatPaymentStatus.Processing">
            <summary>
            Still processing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatPaymentStatus.Completed">
            <summary>
            Successfully completed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatPaymentStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatPaymentStatus.Refunded">
            <summary>
            Refunded
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FiatWithdrawDepositStatus">
            <summary>
            Status of a fiat payment
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatWithdrawDepositStatus.Processing">
            <summary>
            Still processing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatWithdrawDepositStatus.Successful">
            <summary>
            Successfully completed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatWithdrawDepositStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatWithdrawDepositStatus.Finished">
            <summary>
            Finished
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatWithdrawDepositStatus.Refunding">
            <summary>
            Refunding
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatWithdrawDepositStatus.Refunded">
            <summary>
            Refunded
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatWithdrawDepositStatus.RefundFailed">
            <summary>
            Refund failed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FiatWithdrawDepositStatus.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FuturesMarginChangeDirectionType">
            <summary>
            The direction to change futures margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginChangeDirectionType.Add">
            <summary>
            Add margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginChangeDirectionType.Reduce">
            <summary>
            Reduce Margin
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FuturesMarginType">
            <summary>
            Type of Margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginType.Isolated">
            <summary>
            Isolated margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesMarginType.Cross">
            <summary>
            Crossed margin
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FuturesTransferStatus">
            <summary>
            Status of a transfer between spot and futures account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesTransferStatus.Pending">
            <summary>
            Pending to execute
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesTransferStatus.Confirmed">
            <summary>
            Successfully transferred
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesTransferStatus.Failed">
            <summary>
            Execution failed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.FuturesTransferType">
            <summary>
            Futures account transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesTransferType.FromSpotToUsdtFutures">
            <summary>
            From spot to USDT-M futures account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesTransferType.FromUsdtFuturesToSpot">
            <summary>
            From USDT-M futures to spot account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesTransferType.FromSpotToCoinFutures">
            <summary>
            From spot to COIN-M futures account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.FuturesTransferType.FromCoinFuturesToSpot">
            <summary>
            From COIN-M futures to spot account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.HashrateResaleStatus">
            <summary>
            Resale status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.HashrateResaleStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.HashrateResaleStatus.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.HashrateResaleStatus.Terminated">
            <summary>
            Terminated
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.IncomeType">
            <summary>
            Type of futures income
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.Transfer">
            <summary>
            Transfer into account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.WelcomeBonus">
            <summary>
            Futures welcome bonus
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.RealizedPnl">
            <summary>
            Futures realized profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.FundingFee">
            <summary>
            Futures funding fee
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.Commission">
            <summary>
            Futures trading commission
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IncomeType.InsuranceClear">
            <summary>
            Insurance clear
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.IndicatorType">
            <summary>
            Types of indicators
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.UnfilledRatio">
            <summary>
            Unfilled ratio
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.ExpirationRatio">
            <summary>
            Expired orders ratio
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IndicatorType.CancellationRatio">
            <summary>
            Cancelled orders ratio
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.IsolatedMarginTransferDirection">
            <summary>
            Transfer direction for isolated margin transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IsolatedMarginTransferDirection.Spot">
            <summary>
            Spot
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.IsolatedMarginTransferDirection.IsolatedMargin">
            <summary>
            Isolated margin
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.KlineInterval">
            <summary>
            The interval for the kline
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            3m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.TwoHour">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.FourHour">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.SixHour">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.EightHour">
            <summary>
            8h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.TwelveHour">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.ThreeDay">
            <summary>
            3d
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneWeek">
            <summary>
            1w
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.KlineInterval.OneMonth">
            <summary>
            1M
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.LendingType">
            <summary>
            Lending type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.LendingType.Daily">
            <summary>
            Flexible
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.LendingType.Activity">
            <summary>
            Activity
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.LendingType.CustomizedFixed">
            <summary>
            Customized fixed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.LiquidityType">
            <summary>
            Add/Remove liquidity type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.LiquidityType.Single">
            <summary>
            Add/Remove single asset
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.LiquidityType.Combined">
            <summary>
            Add/Remove combination of all coins
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ListOrderStatus">
            <summary>
            List order status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Executing">
            <summary>
            Executing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Done">
            <summary>
            Executed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListOrderStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ListStatusType">
            <summary>
            List status type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.Response">
            <summary>
            Failed action
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.ExecutionStarted">
            <summary>
            Placed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ListStatusType.Done">
            <summary>
            Order list is done
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.MarginLevelStatus">
            <summary>
            Margin level status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.Excessive">
            <summary>
            Excessive
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.MarginCall">
            <summary>
            Margin call
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.PreLiquidation">
            <summary>
            Pre-liquidation
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginLevelStatus.ForceLiquidation">
            <summary>
            Force liquidation
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.MarginStatus">
            <summary>
            Status of a margin action
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Pending">
            <summary>
            Pending to execution
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Completed">
            <summary>
            Executed, waiting to be confirmed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Confirmed">
            <summary>
            Successfully loaned/repayed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MarginStatus.Failed">
            <summary>
            execution failed, nothing happened to your account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.MinerStatus">
            <summary>
            Miner status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MinerStatus.All">
            <summary>
            All miners
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MinerStatus.Valid">
            <summary>
            Valid
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MinerStatus.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.MinerStatus.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderRejectReason">
            <summary>
            The reason the order was rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.None">
            <summary>
            Not rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownInstrument">
            <summary>
            Unknown instrument
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.MarketClosed">
            <summary>
            Closed market
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.PriceQuantityExceedsHardLimits">
            <summary>
            Quantity out of bounds
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownOrder">
            <summary>
            Unknown order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.DuplicateOrder">
            <summary>
            Duplicate
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.UnknownAccount">
            <summary>
            Unkown account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.InsufficientBalance">
            <summary>
            Not enough balance
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.AccountInactive">
            <summary>
            Account not active
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderRejectReason.AccountCannotSettle">
            <summary>
            Cannot settle
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderResponseType">
            <summary>
            Response type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Acknowledge">
            <summary>
            Ack only
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Result">
            <summary>
            Resulting order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderResponseType.Full">
            <summary>
            Full order info, only valid on SPOT orders  
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderSide">
            <summary>
            The side of an order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderStatus">
            <summary>
            The status of an orderн
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.New">
            <summary>
            Order is new
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.PartiallyFilled">
            <summary>
            Order is partly filled, still has quantity left to fill
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Filled">
            <summary>
            The order has been filled and completed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Canceled">
            <summary>
            The order has been canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.PendingCancel">
            <summary>
            The order is in the process of being canceled  (currently unused)
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Rejected">
            <summary>
            The order has been rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Expired">
            <summary>
            The order has expired
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Insurance">
            <summary>
            Liquidation with Insurance Fund
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderStatus.Adl">
            <summary>
            Counterparty Liquidation
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.OrderType">
            <summary>
            The type of an order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Limit">
            <summary>
            Limit orders will be placed at a specific price. If the price isn't available in the order book for that asset the order will be added in the order book for someone to fill.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Market">
            <summary>
            Market order will be placed without a price. The order will be executed at the best price available at that time in the order book.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopLoss">
            <summary>
            Stop loss order. Will execute a market order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopLossLimit">
            <summary>
            Stop loss order. Will execute a limit order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Stop">
            <summary>
            Stop loss order. Will execute a market order when the price drops below a price to sell and therefor limit the loss
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.StopMarket">
            <summary>
            Stop loss order. Will be executed at the best price available at that time in the order book
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfit">
            <summary>
            Take profit order. Will execute a market order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfitMarket">
            <summary>
            Take profit order. Will be executed at the best price available at that time in the order book
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TakeProfitLimit">
            <summary>
            Take profit order. Will execute a limit order when the price rises above a price to sell and therefor take a profit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.LimitMaker">
            <summary>
            Same as a limit order, however it will fail if the order would immediately match, therefor preventing taker orders
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.TrailingStopMarket">
            <summary>
            Trailing stop order will be placed without a price. The order will be executed at the best price available at that time in the order book.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.OrderType.Liquidation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.PeriodInterval">
            <summary>
            The interval for the period
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.FiveMinutes">
            <summary>
            5m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.FifteenMinutes">
            <summary>
            15m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.ThirtyMinutes">
            <summary>
            30m
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.TwoHour">
            <summary>
            2h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.FourHour">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.SixHour">
            <summary>
            6h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.TwelveHour">
            <summary>
            12h
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PeriodInterval.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.PositionMode">
            <summary>
            User position mode
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionMode.Hedge">
            <summary>
            In the Hedge Mode, one contract can hold positions in both long and short directions at the same time, and hedge positions in different directions under the same contract.
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionMode.OneWay">
            <summary>
            In the One-way Mode, one contract can only hold positions in one direction.
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionSide.Short">
            <summary>
            Short
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionSide.Long">
            <summary>
            Long
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.PositionSide.Both">
            <summary>
            Both for One-way mode when placing an order
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ProductStatus">
            <summary>
            Status of a product
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProductStatus.All">
            <summary>
            All products
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProductStatus.Subscribable">
            <summary>
            Products which are subscribable
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProductStatus.Unsubscribable">
            <summary>
            Products which are unsubscribable
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ProjectStatus">
            <summary>
            Project status
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProjectStatus.Holding">
            <summary>
            Holding
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProjectStatus.Redeemed">
            <summary>
            Redeemed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.ProjectType">
            <summary>
            The type of project
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProjectType.Activity">
            <summary>
            Regular
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.ProjectType.CustomizedFixed">
            <summary>
            Customized fixed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.RateLimitInterval">
            <summary>
            Rate limit on what unit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Second">
            <summary>
            Seconds
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Minute">
            <summary>
            Minutes
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitInterval.Day">
            <summary>
            Days
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.RateLimitType">
            <summary>
            Type of rate limit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.RequestWeight">
            <summary>
            Request weight
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.Orders">
            <summary>
            Order amount
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RateLimitType.RawRequests">
            <summary>
            Raw requests
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.RedeemType">
            <summary>
            Redeem type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RedeemType.Fast">
            <summary>
            Fast
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.RedeemType.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SideEffectType">
            <summary>
            Side effect for a margin order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.NoSideEffect">
            <summary>
            Normal trade
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.MarginBuy">
            <summary>
            Margin trade order
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SideEffectType.AutoRepay">
            <summary>
            Make auto repayment after order is filled
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SubAccountMarginTransferType">
            <summary>
            Sub account margin transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountMarginTransferType.FromSubAccountSpotToSubAccountMargin">
            <summary>
            Sub account spot to sub account margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountMarginTransferType.FromSubAccountMarginToSubAccountSpot">
            <summary>
            From sub account margin to sub account spot
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SubAccountTransferSubAccountType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountTransferSubAccountType.TransferIn">
            <summary>
            From main spot account to sub account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountTransferSubAccountType.TransferOut">
            <summary>
            From sub account to main spot account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SubAccountFuturesTransferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountFuturesTransferType.FromSpotToUsdtFutures">
            <summary>
            From sub account spot to sub account usdt-m futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountFuturesTransferType.FromUsdtFuturesToSpot">
            <summary>
            From sub account usdt-m futures to sub account spot
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountFuturesTransferType.FromSpotToCoinFutures">
            <summary>
            From sub account spot to sub account coin-m futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SubAccountFuturesTransferType.FromCoinFuturesToSpot">
            <summary>
            From sub account coin-m futures to sub account spot
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SymbolFilterType">
            <summary>
            Filter type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.Unknown">
            <summary>
            Unknown filter type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.Price">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.PricePercent">
            <summary>
            Price percent filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.LotSize">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MarketLotSize">
            <summary>
            Market lot size filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MinNotional">
            <summary>
            Min notional filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxNumberOrders">
            <summary>
            Max orders filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxNumberAlgorithmicOrders">
            <summary>
            Max algo orders filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.IcebergParts">
            <summary>
            Max iceberg parts filter
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolFilterType.MaxPosition">
            <summary>
            Max position filter
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SymbolStatus">
            <summary>
            Status of a symbol
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PreTrading">
            <summary>
            Not trading yet
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PendingTrading">
            <summary>
            Pending trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Trading">
            <summary>
            Trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PostTrading">
            <summary>
            No longer trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.EndOfDay">
            <summary>
            Not trading
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Halt">
            <summary>
            Halted
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.AuctionMatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Break">
            <summary>
            
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Close">
            <summary>
            Closed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PreDelivering">
            <summary>
            Pre delivering
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Delivering">
            <summary>
            Delivering
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.PreSettle">
            <summary>
            Pre settle
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SymbolStatus.Settling">
            <summary>
            Settings
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.SystemStatus">
            <summary>
            Status of the Binance system
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SystemStatus.Normal">
            <summary>
            Operational
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.SystemStatus.Maintenance">
            <summary>
            In maintenance
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TimeInForce">
            <summary>
            The time the order will be active for
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.GoodTillCancel">
            <summary>
            GoodTillCancel orders will stay active until they are filled or canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.ImmediateOrCancel">
            <summary>
            ImmediateOrCancel orders have to be at least partially filled upon placing or will be automatically canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.FillOrKill">
            <summary>
            FillOrKill orders have to be entirely filled upon placing or will be automatically canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.GoodTillCrossing">
            <summary>
            GoodTillCrossing orders will post only
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TimeInForce.GoodTillExpiredOrCanceled">
            <summary>
            Good til the order expires or is canceled
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TradeRulesBehaviour">
            <summary>
            Trade rules behaviour
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.ThrowError">
            <summary>
            Throw an error if not complying
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TradeRulesBehaviour.AutoComply">
            <summary>
            Auto adjust order when not complying
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TransactionType">
            <summary>
            Transaction type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransactionType.Deposit">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransactionType.Withdrawal">
            <summary>
            Withdrawal
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TransferAccountType">
            <summary>
            Transfer account type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferAccountType.Spot">
            <summary>
            Spot
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferAccountType.UsdtFuture">
            <summary>
            USDT-M future
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferAccountType.CoinFuture">
            <summary>
            Coin-M future
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TransferDirection">
            <summary>
            Direction of a transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirection.RollIn">
            <summary>
            Roll-in
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirection.RollOut">
            <summary>
            Roll-out
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.TransferDirectionType">
            <summary>
            Transfer direction
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirectionType.MainToMargin">
            <summary>
            From main account to margin account
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.TransferDirectionType.MarginToMain">
            <summary>
            From margin account to main account
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.UnderlyingType">
            <summary>
            Underlying Type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UnderlyingType.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UnderlyingType.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.UniversalTransferType">
            <summary>
            Universal transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MainToFunding">
            <summary>
            Main (spot) to Funding
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MainToUsdFutures">
            <summary>
            Main (spot) to Usd Futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MainToCoinFutures">
            <summary>
            Main (spot) to Coin Futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MainToMargin">
            <summary>
            Main (spot) to Margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MainToMining">
            <summary>
            Main (spot) to Mining
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.FundingToMain">
            <summary>
            Funding to Main (spot)
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.FundingToUsdFutures">
            <summary>
            Funding to Usd futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.FundingToMargin">
            <summary>
            Funding to margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.UsdFuturesToMain">
            <summary>
            Usd futures to Main (spot)
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.UsdFuturesToFunding">
            <summary>
            Usd futures to Funding
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.UsdFuturesToMargin">
            <summary>
            Usd futures to Margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.CoinFuturesToMain">
            <summary>
            Coin futures to Main (spot)
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.CoinFuturesToMargin">
            <summary>
            Coin futures to Margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MarginToMain">
            <summary>
            Margin to Main (spot)
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MarginToUsdFutures">
            <summary>
            Margin to Usd futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MarginToCoinFutures">
            <summary>
            Margin to Coin futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MarginToMining">
            <summary>
            Margin to Mining
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MarginToFunding">
            <summary>
            Margin to Funding
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.IsolatedMarginToMargin">
            <summary>
            Isolated margin to margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MarginToIsolatedMargin">
            <summary>
            Margin to isolated margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.IsolatedMarginToIsolatedMargin">
            <summary>
            Isolated margin to Isolated margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MiningToMain">
            <summary>
            Mining to Main (spot)
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MiningToUsdFutures">
            <summary>
            Mining to Usd futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.MiningToMargin">
            <summary>
            Mining to Margin
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.FundingToCoinFutures">
            <summary>
            Funding to Coin futures
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.UniversalTransferType.CoinFuturesToFunding">
            <summary>
            Coin futures to Funding
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.WithdrawalStatus">
            <summary>
            The status of a withdrawal
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.EmailSend">
            <summary>
            Email has been send
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Canceled">
            <summary>
            Withdrawal has been canceled
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.AwaitingApproval">
            <summary>
            Withdrawal is awaiting approval
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Rejected">
            <summary>
            Withdrawal has been rejected
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Processing">
            <summary>
            Withdrawal is processing
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Failure">
            <summary>
            Withdrawal has failed
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalStatus.Completed">
            <summary>
            Withdrawal has been processed
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.WithdrawalTransferType">
            <summary>
            Withdrawal transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalTransferType.ExternalTransfer">
            <summary>
            Withdrawal to external wallets
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawalTransferType.InternalTransfer">
            <summary>
            Withdrawal from one binance account to another one
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.WithdrawDepositTransferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawDepositTransferType.Internal">
            <summary>
            Internal transfer
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WithdrawDepositTransferType.External">
            <summary>
            External transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Enums.WorkingType">
            <summary>
            Type of working
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WorkingType.Mark">
            <summary>
            Mark price type
            </summary>
        </member>
        <member name="F:Binance.Net.Enums.WorkingType.Contract">
            <summary>
            Contract price type
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinance24HPrice">
            <summary>
            24 hour price stats
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.PriceChange">
            <summary>
            The actual price change in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.PriceChangePercent">
            <summary>
            The price change in percentage in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.WeightedAveragePrice">
            <summary>
            The weighted average price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.OpenTime">
            <summary>
            Time at which this 24 hours opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.CloseTime">
            <summary>
            Time at which this 24 hours closed
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.FirstTradeId">
            <summary>
            The first trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.LastTradeId">
            <summary>
            The last trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinance24HPrice.TotalTrades">
            <summary>
            The amount of trades made in the last 24 hours
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceAggregatedTrade">
            <summary>
            Compressed aggregated trade information. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.Price">
            <summary>
            The price of trades in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.Quantity">
            <summary>
            The total quantity of trades in the aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.TradeTime">
            <summary>
            The timestamp of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceBookPrice">
            <summary>
            Book tick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestBidPrice">
            <summary>
            Price of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestBidQuantity">
            <summary>
            Quantity of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestAskPrice">
            <summary>
            Price of the best ask
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceBookPrice.BestAskQuantity">
            <summary>
            Quantity of the best ask
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceBrokerageClient">
            <summary>
            Client providing access to the Binance Brokerage REST Api
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.CreateSubAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Generate a sub account under your brokerage master account
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Created sub-account id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Margin for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Margin result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Futures for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Futures result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.CreateApiKeyForSubAccountAsync(System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create Api Key for Sub Account
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="isTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.DeleteSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delete Sub Account Api Key
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeSubAccountApiPermissionAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Api Permission
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="isTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetSubAccountsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeSubAccountCommissionAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Commission
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>If margin disabled, it is not allowed to send marginMakerCommission or marginTakerCommission</para>
            <para>If margin enabled, marginMakerCommission or marginTakerCommission has default value as spotMakerCommission or spotTakerCommission</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="makerCommission">Maker commission</param>
            <param name="takerCommission">Taker commission</param>
            <param name="marginMakerCommission">Margin maker commission</param>
            <param name="marginTakerCommission">Margin taker commission</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Futures Commission Adjustment
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>The sub-account's futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If futures disabled, it is not allowed to set subaccount's futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="makerAdjustment">Maker adjustment (100 for 0.01%)</param>
            <param name="takerAdjustment">Taker adjustment (100 for 0.01%)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account futures commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Futures Commission Adjustment
            <para>The sub-account's futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If symbol not sent, commission adjustment of all symbols will be returned</para>
            <para>If futures disabled, it is not allowed to set subaccount's futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account futures commissions result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetBrokerAccountInfoAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Broker Account Information
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Broker information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.TransferAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id, must be unique</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetTransferHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page</param>
            <param name="limit">Limit</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetBrokerCommissionRebatesRecentAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate Recent Record
            <para>Only get the latest history of past 7 days</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="limit">Limit (Default 500, max 1000)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Rebates history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetBrokerCommissionRebatesHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate History
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="limit">Limit (default 1000)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>A download link for an offline file</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeBnbBurnForSubAccountSpotAndMarginAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="spotBnbBurn">"true" or "false", spot and margin whether use BNB to pay for transaction fees or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.ChangeBnbBurnForSubAccountMarginInterestAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account Margin Interest
            <para>Sub account must be enabled margin before using this switch</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="interestBnbBurn">"true" or "false", margin loan whether uses BNB to pay for margin interest or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceBrokerageClient.GetBnbBurnStatusForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get BNB Burn Status for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Status</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceClient">
            <summary>
            Binance interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.General">
            <summary>
            General endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.SubAccount">
            <summary>
            Sub account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Margin">
            <summary>
            (Isolated) Margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Spot">
            <summary>
            Spot endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Lending">
            <summary>
            Lending endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Mining">
            <summary>
            Mining endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.WithdrawDeposit">
            <summary>
            Withdraw/Deposit endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Brokerage">
            <summary>
            Brokerage endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.FuturesUsdt">
            <summary>
            Usdt-M futures endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.FuturesCoin">
            <summary>
            Coin-M futures endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Blvt">
            <summary>
            Leveraged token endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.BSwap">
            <summary>
            Liquidity swap endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceClient.Fiat">
            <summary>
            Fiat endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.LastQuantityFilled">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Type">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesLiquidation.Time">
            <summary>
            Forced time
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesMarkPrice">
            <summary>
            Mark Price and Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.MarkPrice">
            <summary>
            The current market price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.FundingRate">
            <summary>
            The last funding rate
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesMarkPrice.NextFundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceKline">
            <summary>
            Kline data
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.OpenTime">
            <summary>
            The time this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Open">
            <summary>
            The price at which this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.High">
            <summary>
            The highest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Low">
            <summary>
            The lowest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.Close">
            <summary>
            The price at which this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.BaseVolume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.QuoteVolume">
            <summary>
            The volume traded during this candlestick in the asset form
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TakerBuyBaseVolume">
            <summary>
            Taker buy base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceKline.TakerBuyQuoteVolume">
            <summary>
            Taker buy quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceMiniTick">
            <summary>
            MiniTick info
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.LastPrice">
            <summary>
            Close Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.OpenPrice">
            <summary>
            Open Price
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.HighPrice">
            <summary>
            High
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.LowPrice">
            <summary>
            Low
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.BaseVolume">
            <summary>
            Total traded volume
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceMiniTick.QuoteVolume">
            <summary>
            Total traded alternate asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceOrderBook">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Symbol">
            <summary>
            The symbol of the order book (only filled from stream updates)
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Bids">
            <summary>
            The list of bids
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceOrderBook.Asks">
            <summary>
            The list of asks
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceEventOrderBook">
            <summary>
            Order book update event
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceEventOrderBook.FirstUpdateId">
            <summary>
            The ID of the first update
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceEventOrderBook.EventTime">
            <summary>
            Timestamp of the event
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceFuturesEventOrderBook">
            <summary>
            Futures order book update event
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesEventOrderBook.TransactionTime">
            <summary>
            Transaction time
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceFuturesEventOrderBook.LastUpdateIdStream">
            <summary>
            Last update id of the previous update
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceRecentTrade">
            <summary>
            Recent trade data
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceRecentTrade.OrderId">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceRecentTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceRecentTrade.BaseQuantity">
            <summary>
            The base quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceRecentTrade.QuoteQuantity">
            <summary>
            The quote quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceRecentTrade.TradeTime">
            <summary>
            The timestamp of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceRecentTrade.BuyerIsMaker">
            <summary>
            Whether the buyer is maker
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceRecentTrade.IsBestMatch">
            <summary>
            Whether the trade was made at the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceSocketClient">
            <summary>
            Interface for subscribing to streams
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceSocketClient.Spot">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceSocketClient.FuturesUsdt">
            <summary>
            USDT-M futures streams
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceSocketClient.FuturesCoin">
            <summary>
            COIN-M futures stream
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceSocketClient.Blvt">
            <summary>
            Leveraged token streams
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.IBinanceSocketClient.SetApiCredentials(System.String,System.String)">
            <summary>
            Set the API key and secret
            </summary>
            <param name="apiKey">The api key</param>
            <param name="apiSecret">The api secret</param>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceStreamKlineData">
            <summary>
            Stream kline data
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceStreamKlineData.Symbol">
            <summary>
            The symbol the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceStreamKlineData.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceStreamKline">
            <summary>
            Stream kline data
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceStreamKline.Interval">
            <summary>
            Interval
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceStreamKline.Final">
            <summary>
            Is this kline final
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceStreamKline.FirstTrade">
            <summary>
            Id of the first trade in this kline
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceStreamKline.LastTrade">
            <summary>
            Id of the last trade in this kline
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceTick">
            <summary>
            Price statistics of the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.PrevDayClosePrice">
            <summary>
            The close price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTick.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.IBinanceTrade">
            <summary>
            Information about a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.OrderId">
            <summary>
            The order id the trade belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Symbol">
            <summary>
            The symbol the trade is for
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.TradeTime">
            <summary>
            The time the trade was made
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.BuyerIsMaker">
            <summary>
            Whether account was the buyer in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.IBinanceTrade.IsBestMatch">
            <summary>
            Whether trade was made with the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase">
            <summary>
            Base interface for socket client
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade}})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade}})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToKlineUpdatesAsync(System.String,System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol and intervals
            </summary>
            <param name="symbol">The symbol</param>
            <param name="intervals">The intervals of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols and intervals
            </summary>
            <param name="symbols">The symbols</param>
            <param name="intervals">The intervals of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceMiniTick}}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceTick}}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBase.SubscribeToAllBookTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice}})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBlvt">
            <summary>
            Leveraged token endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBlvt.SubscribeToBlvtInfoUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate}})">
            <summary>
            Subscribes to leveraged token info updates
            </summary>
            <param name="token">The token to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBlvt.SubscribeToBlvtInfoUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate}})">
            <summary>
            Subscribes to leveraged token info updates
            </summary>
            <param name="tokens">The tokens to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBlvt.SubscribeToBlvtKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData}})">
            <summary>
            Subscribes to leveraged token kline updates
            </summary>
            <param name="token">The token to subscribe to</param>
            <param name="interval">The kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientBlvt.SubscribeToBlvtKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData}})">
            <summary>
            Subscribes to leveraged token kline updates
            </summary>
            <param name="tokens">The tokens to subscribe to</param>
            <param name="interval">The kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures">
            <summary>
            Futures socket client streams
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation}})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation}})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToAllLiquidationUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation}})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceFuturesEventOrderBook}})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceFuturesEventOrderBook}})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceFuturesEventOrderBook}})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100, 500 or 1000, depending on endpoint</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceFuturesEventOrderBook}})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 0 or 100, 500 or 1000, depending on endpoint</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFutures.SubscribeToUserDataUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamConfigUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.BinanceStreamEvent}})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Futures.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onLeverageUpdate">The event handler for leverage changed update</param>
            <param name="onMarginUpdate">The event handler for whenever a margin has changed</param>
            <param name="onAccountUpdate">The event handler for whenever an account update is received</param>
            <param name="onOrderUpdate">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin">
            <summary>
            COIN-M futures streams
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToIndexPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexPrice}}})">
            <summary>
            Subscribes to the Index price update stream for a single pair
            </summary>
            <param name="pair">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexPrice}}})">
            <summary>
            Subscribes to the Index price update stream for a list of pairs
            </summary>
            <param name="pairs">The pairs</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesCoinStreamMarkPrice}}})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesCoinStreamMarkPrice}}})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToContinuousContractKlineUpdatesAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData}})">
            <summary>
            Subscribes to the continuous contract candlestick update stream for the provided pair
            </summary>
            <param name="pair">The pair</param>
            <param name="contractType">The contract type</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToContinuousContractKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.ContractType,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData}})">
            <summary>
            Subscribes to the continuous contract candlestick update stream for the provided pairs
            </summary>
            <param name="pairs">The pairs</param>
            <param name="contractType">The contract type</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToIndexKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData}})">
            <summary>
            Subscribes to the index candlestick update stream for the provided pair
            </summary>
            <param name="pair">The pair</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToIndexKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData}})">
            <summary>
            Subscribes to the index candlestick update stream for the provided pairs
            </summary>
            <param name="pairs">The pairs</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToMarkPriceKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData}})">
            <summary>
            Subscribes to the mark price candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesCoin.SubscribeToMarkPriceKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData}})">
            <summary>
            Subscribes to the mark price candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesUsdt">
            <summary>
            USDT-M futures streams
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesUsdt.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesUsdtStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesUsdt.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesUsdtStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesUsdt.SubscribeToAllMarkPriceUpdatesAsync(System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            /// <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientFuturesUsdt.SubscribeToCompositeIndexUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndex}})">
            <summary>
            Subscribes to composite index updates stream for a symbol
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot">
            <summary>
            Spot subscription interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade}})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade}})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceOrderBook}})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceOrderBook}})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceEventOrderBook}})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceEventOrderBook}})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SocketSubClient.IBinanceSocketClientSpot.SubscribeToUserDataUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.UserStream.BinanceStreamPositionsUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate}})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Spot.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco order status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoin">
            <summary>
            COIN-M futures interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoin.Market">
            <summary>
            Coin futures market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoin.Order">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoin.Account">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoin.System">
            <summary>
            Futures system endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoin.GetPositionInformationAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account position information
            </summary>
            <param name="marginAsset">Filter by margin asset</param>
            <param name="pair">Filter by pair</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdt">
            <summary>
            USDT-M futures interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdt.Market">
            <summary>
            Usdt futures market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdt.Order">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdt.Account">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdt.System">
            <summary>
            Futures system endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdt.GetPositionInformationAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdt.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the current status of the trading rules for the account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trading rules status per symbol</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures">
            <summary>
            Futures interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.UserStream">
            <summary>
            Futures user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ModifyPositionModeAsync(System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="dualPositionSide">User position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetPositionModeAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ChangeInitialLeverageAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ChangeMarginTypeAsync(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.ModifyPositionMarginAsync(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetMarginChangeHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetIncomeHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetBracketsAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets.
            </summary>
            <param name="symbolOrPair">The symbol or pair to get the data for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFutures.GetPositionAdlQuantileEstimationAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get position ADL quantile estimations
            </summary>
            <param name="symbol">Only get for this symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesAccount">
            <summary>
            Futures account interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesAccount.GetUserCommissionRateAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account commission rates
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>User commission rate information</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinAccount">
            <summary>
            COIN-M futures account endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinAccount.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinAccount.GetBalanceAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket">
            <summary>
            COIN-M futures market endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetMarkPricesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="pair">Filter by pair</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetContinuousContractKlinesAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided pair
            </summary>
            <param name="pair">The symbol to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetIndexPriceKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided pair
            </summary>
            <param name="pair">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetMarkPriceKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided pair
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetTickersAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours change
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="pair">Filter by pair</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetBookPricesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="pair">Filter by pair</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get present open interest of a specific symbol.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetOpenInterestHistoryAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest History
            </summary>
            <param name="pair">The pair to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get open interest history</param>
            <param name="endTime">End time to get open interest history</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest History info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetTakerBuySellVolumeRatioAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Taker Buy/Sell Volume Ratio
            </summary>
            <param name="pair">The pair to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get taker buy/sell volume ratio</param>
            <param name="endTime">End time to get taker buy/sell volume ratio</param>
            <param name="ct">Cancellation token</param>
            <returns>Taker Buy/Sell Volume Ratio info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetBasisAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets basis
            </summary>
            <param name="pair">The pair to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
            <param name="ct">Cancellation token</param>
            <returns>Basis</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinMarket.GetPricesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="symbol">Retrieve for a symbol</param>
            <param name="pair">Retrieve prices for a specific pair</param>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinOrder">
            <summary>
            COIN-M futures order endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinOrder.GetUserTradesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="pair">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinSystem">
            <summary>
            Futures system interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesCoinSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket">
            <summary>
            Futures market interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetFundingRatesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetTopLongShortAccountRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (accounts)</param>
            <param name="endTime">End time to get top trader long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetTopLongShortPositionRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Positions)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (positions)</param>
            <param name="endTime">End time to get top trader long/short ratio (positions)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Positions) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetGlobalLongShortAccountRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Global Long/Short Ratio (Accounts)
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get global long/short ratio (accounts)</param>
            <param name="endTime">End time to get global long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Global Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesMarket.GetMarkPriceKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Kline/candlestick bars for the mark price of a symbol
            </summary>
            <param name="symbol">The symbol get the data for</param>
            <param name="interval">The interval of the klines</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders">
            <summary>
            Futures orders interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{System.Boolean},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="positionSide">The position side</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="closePosition">Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET.</param>
            <param name="orderResponseType">The response type. Default Acknowledge</param>
            <param name="priceProtect">If true when price reaches stopPrice, difference between "MARK_PRICE" and "CONTRACT_PRICE" cannot be larger than "triggerProtect" of the symbol.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.PlaceMultipleOrdersAsync(Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder[],System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in one call
            </summary>
            <param name="orders">The orders to place</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Returns a list of call results, one for each order. The order the results are in is the order the orders were sent</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelAllOrdersAfterTimeoutAsync(System.String,System.TimeSpan,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all open orders of the specified symbol at the end of the specified countdown. This rest endpoint means to ensure your open orders are canceled in case of an outage. The endpoint should be called repeatedly as heartbeats
            so that the existing countdown time can be canceled and replaced by a new one.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="countDownTime">The time after which all open orders should cancel, or 0 to cancel an existing timer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Countdown result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.CancelMultipleOrdersAsync(System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels muliple orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderIdList">The list of order ids to cancel</param>
            <param name="origClientOrderIdList">The list of client order ids to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOpenOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific open order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesOrders.GetForcedOrdersAsync(System.String,System.Nullable{Binance.Net.Enums.AutoCloseType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of users forced orders
            </summary>
            <param name="symbol">The symbol to get forced orders for</param>
            <param name="closeType">Filter by reason for close</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced orders</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem">
            <summary>
            Futures system interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance Futures API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtAccount">
            <summary>
            USDT-M futures account endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtAccount.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtAccount.GetBalanceAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtAccount.GetMultiAssetsModeAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Get user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Multi asset mode</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtAccount.SetMultiAssetsModeAsync(System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Set user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
            </summary>
            <param name="enabled">Enabled or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Succes</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket">
            <summary>
            USDT-M futures market endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetMarkPricesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours change
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetBookPricesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get present open interest of a specific symbol.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetOpenInterestHistoryAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest History
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get open interest history</param>
            <param name="endTime">End time to get open interest history</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest History info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetTakerBuySellVolumeRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Taker Buy/Sell Volume Ratio
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get taker buy/sell volume ratio</param>
            <param name="endTime">End time to get taker buy/sell volume ratio</param>
            <param name="ct">Cancellation token</param>
            <returns>Taker Buy/Sell Volume Ratio info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetCompositeIndexInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets composite index info
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtMarket.GetContinuousContractKlinesAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided pair
            </summary>
            <param name="pair">The symbol to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtOrder">
            <summary>
            USDT-M futures order endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtOrder.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtSystem">
            <summary>
            Futures system interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Futures.IBinanceClientFuturesUsdtSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage">
            <summary>
            Brokerage interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.CreateSubAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create a Sub Account
            <para>This request will generate a sub account under your brokerage master account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Created sub-account id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Margin for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Margin result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Futures for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Futures result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.EnableLeverageTokenForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Leverage Token for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Leverage Token result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.CreateApiKeyForSubAccountAsync(System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create Api Key for Sub Account
            <para>This request will generate a api key for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="isSpotTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.DeleteSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delete Sub Account Api Key
            <para>This request will delete a api key for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 500, max 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeSubAccountApiKeyPermissionAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Api Permission
            <para>This request will change the api permission for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="isSpotTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.AddIpRestrictionForSubAccountApiKeyAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add IP Restriction for Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="ipAddress">IP address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Restriction result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeIpRestrictionForSubAccountApiKeyAsync(System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable or Disable IP Restriction for Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="ipRestrict">IP restrict</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Restriction result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetIpRestrictionForSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get IP Restriction for Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Restriction result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.DeleteIpRestrictionForSubAccountApiKeyAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delete IP Restriction for Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="ipAddress">IP address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Restriction result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeSubAccountCommissionAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Commission
            <para>This request will change the commission for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>If margin disabled, it is not allowed to send marginMakerCommission or marginTakerCommission</para>
            <para>If margin enabled, marginMakerCommission or marginTakerCommission has default value as spotMakerCommission or spotTakerCommission</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="makerCommission">Maker commission</param>
            <param name="takerCommission">Taker commission</param>
            <param name="marginMakerCommission">Margin maker commission</param>
            <param name="marginTakerCommission">Margin taker commission</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account USDT-Ⓜ Futures Commission Adjustment
            <para>This request will change the USDT-Ⓜ futures commission for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>The sub-account's USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If futures disabled, it is not allowed to set subaccount's USDT-Ⓜ futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="makerAdjustment">Maker adjustment (100 for 0.01%)</param>
            <param name="takerAdjustment">Taker adjustment (100 for 0.01%)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account USDT-Ⓜ futures commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account USDT-Ⓜ Futures Commission Adjustment
            <para>The sub-account's USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If symbol not sent, commission adjustment of all symbols will be returned</para>
            <para>If futures disabled, it is not allowed to set subaccount's USDT-Ⓜ futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account USDT-Ⓜ futures commissions result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeSubAccountCoinFuturesCommissionAdjustmentAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account COIN-Ⓜ Futures Commission Adjustment
            <para>This request will change the COIN-Ⓜ futures commission for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>The sub-account's COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If futures disabled, it is not allowed to set subaccount's COIN-Ⓜ futures commission adjustment on any symbol</para>
            <para>Different symbols have the same commission for the same pair</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="pair">Pair</param>
            <param name="makerAdjustment">Maker adjustment (100 for 0.01%)</param>
            <param name="takerAdjustment">Taker adjustment (100 for 0.01%)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account coin futures commission result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountCoinFuturesCommissionAdjustmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account COIN-Ⓜ Futures Commission Adjustment
            <para>The sub-account's COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If pair not sent, commission adjustment of all symbols will be returned</para>
            <para>If futures disabled, it is not allowed to set subaccount's COIN-Ⓜ futures commission adjustment on any symbol</para>
            <para>Different symbols have the same commission for the same pair</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="pair">Pair</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account coin futures commissions result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetBrokerAccountInfoAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Broker Account Information
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Broker information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.TransferUniversalAsync(System.String,System.Decimal,System.String,Binance.Net.Enums.BrokerageAccountType,System.String,Binance.Net.Enums.BrokerageAccountType,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer Universal
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            <para>Transfer between futures account is not supported</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="fromId">From id</param>
            <param name="fromAccountType">From type</param>
            <param name="toId">To id</param>
            <param name="toAccountType">To type</param>
            <param name="clientTransferId">Client transfer id, must be unique</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetTransferHistoryUniversalAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History Universal
            <para>Either fromId or toId must be sent. Return fromId equal master account by default</para>
            <para>Only get the latest history of past 30 days</para>
            <para>If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE</para>
            </summary>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page</param>
            <param name="limit">Limit (default 500, max 500)</param>
            <param name="showAllStatus">Show all status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.TransferAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer (Spot)
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id, must be unique</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.TransferFuturesAsync(System.String,System.Decimal,Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer (Futures)
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            <para>Each master account could transfer 5000 times/min</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="futuresType">Futures type</param>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetTransferHistoryAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History (Spot)
            <para>If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE</para>
            <para>If showAllStatus is false, the status in response will show three types: INIT,PROCESS,SUCCESS</para>
            </summary>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page</param>
            <param name="limit">Limit (default 500, max 500)</param>
            <param name="showAllStatus">Show all status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetTransferFuturesHistoryAsync(System.String,Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History (Futures)
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="futuresType">Futures type</param>
            <param name="startDate">From date (default 30 days records)</param>
            <param name="endDate">To date (default 30 days records)</param>
            <param name="page">Page (default 1)</param>
            <param name="limit">Limit (default 50, max 500)</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountDepositHistoryAsync(System.String,System.String,System.Nullable{Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub Account Deposit History
            <para>Please notice the default startDate and endDate to make sure that time interval is within 0-7 days</para>
            <para>If both startDate and endDate are sent, time between startDate and endDate must be less than 7 days</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="coin">Coin</param>
            <param name="status">Status</param>
            <param name="startDate">From date (default 7 days from current timestamp)</param>
            <param name="endDate">To date (default present timestamp)</param>
            <param name="limit">Limit (default 500)</param>
            <param name="offset">Offset (default 0)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetBrokerCommissionRebatesRecentAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate Recent Record (Spot)
            <para>Only get the latest history of past 7 days</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 500, max 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Rebates history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetBrokerFuturesCommissionRebatesHistoryAsync(Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Futures Commission Rebate Record
            </summary>
            <param name="futuresType">Futures type</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 10, max 100)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Rebate records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeBnbBurnForSubAccountSpotAndMarginAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="spotBnbBurn">"true" or "false", spot and margin whether use BNB to pay for transaction fees or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.ChangeBnbBurnForSubAccountMarginInterestAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account Margin Interest
            <para>Sub account must be enabled margin before using this switch</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="interestBnbBurn">"true" or "false", margin loan whether uses BNB to pay for margin interest or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetBnbBurnStatusForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get BNB Burn Status for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountSpotAssetInfoAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Spot Asset info
            <para>If subAccountId is not sent, the size must be sent</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 10, max 20)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountMarginAssetInfoAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Margin Asset info
            <para>If subAccountId is not sent, the size must be sent</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 10, max 20)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientBrokerage.GetSubAccountFuturesAssetInfoAsync(Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Futures Asset info
            <para>If subAccountId is not sent, the size must be sent</para>
            </summary>
            <param name="futuresType">Futures type</param>
            <param name="subAccountId">Sub account id</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 10, max 20)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset info</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientFiat">
            <summary>
            Fiat endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientFiat.GetFiatPaymentHistoryAsync(Binance.Net.Enums.OrderSide,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Fiat payment history
            </summary>
            <param name="side">Filter by side</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Return a specific page</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientFiat.GetFiatDepositWithdrawHistoryAsync(Binance.Net.Enums.TransactionType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Fiat deposit/withdrawal history
            </summary>
            <param name="side">Filter by side</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Return a specific page</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral">
            <summary>
            General endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetDailySpotAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (balances)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetDailyMarginAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetDailyFutureAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets and positions)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetAccountStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetFundingWalletAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding wallet assets
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="needBtcValuation">Return BTC valuation</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetAPIKeyPermissionsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get permission info for the current API key
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Permission info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetUserCoinsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets information of coins for a user
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetAssetDividendRecordsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="limit">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.DisableFastWithdrawSwitchAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This request will disable fastwithdraw switch under your account.
            You need to enable "trade" option for the api key which requests this endpoint.
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.EnableFastWithdrawSwitchAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
             <summary>
             This request will enable fastwithdraw switch under your account.
             You need to enable "trade" option for the api key which requests this endpoint.
            
             When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly.
             There is no on-chain transaction, no transaction ID and no withdrawal fee.
             </summary>
             <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
             <param name="ct">Cancellation token</param>
             <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetDustLogAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.DustTransferAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetBnbBurnStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the BNB burn switch for spot trading and margin interest
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.SetBnbBurnStatusAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the status of the BNB burn switch for spot trading and margin interest
            </summary>
            <param name="spotTrading">If BNB burning should be enabled for spot trading</param>
            <param name="marginInterest">If BNB burning should be enabled for margin interest</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.TransferAsync(Binance.Net.Enums.UniversalTransferType,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers between accounts
            </summary>
            <param name="type">The type of transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The amount to transfer</param>
            <param name="fromSymbol">From symbol when transfering from/to isolated margin</param>
            <param name="toSymbol">To symbol when transfering from/to isolated margin</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetTransfersAsync(Binance.Net.Enums.UniversalTransferType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get transfer history
            </summary>
            <param name="type">The type of transfer</param>
            <param name="startTime">Filter by startTime</param>
            <param name="endTime">Filter by endTime</param>
            <param name="page">The page</param>
            <param name="pageSize">Results per page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientGeneral.GetProductsAsync(System.Threading.CancellationToken)">
            <summary>
            Get general data for the products available on Binance
            NOTE: This is not an official endpoint and might be changed or removed at any point by Binance
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientLending">
            <summary>
            Lending interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFlexibleProductListAsync(System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get product list
            </summary>
            <param name="status">Filter by status</param>
            <param name="featured">Filter by featured</param>
            <param name="page">Page to retrieve</param>
            <param name="pageSize">Page size to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of product</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLeftDailyPurchaseQuotaOfFlexableProductAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the purchase quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.PurchaseFlexibleProductAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="amount">The amount to purchase</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLeftDailyRedemptionQuotaOfFlexibleProductAsync(System.String,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the redemption quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.RedeemFlexibleProductAsync(System.String,System.Decimal,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Redeem flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Redeem type</param>
            <param name="amount">The amount to redeem</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFlexibleProductPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get flexible product position
            </summary>
            <param name="asset">Asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Flexible product position</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetFixedAndCustomizedFixedProjectListAsync(Binance.Net.Enums.ProjectType,System.String,System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get fixed and customized fixed project list
            </summary>
            <param name="type">Type of project</param>
            <param name="asset">Asset</param>
            <param name="status">Filter by status</param>
            <param name="sortAscending">If should sort ascending</param>
            <param name="sortBy">Sort by. Valid values: "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME"</param>
            <param name="currentPage">Result page</param>
            <param name="size">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Project list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.PurchaseCustomizedFixedProjectAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase customized fixed project
            </summary>
            <param name="projectId">Id of the project</param>
            <param name="lot">The lot</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetCustomizedFixedProjectPositionsAsync(System.String,System.String,System.Nullable{Binance.Net.Enums.ProjectStatus},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get customized fixed project position
            </summary>
            <param name="asset">Asset</param>
            <param name="projectId">The project id</param>
            <param name="status">Filter by status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Customized fixed project position</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLendingAccountAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get lending account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Lending account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetPurchaseRecordsAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get purchase records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The purchase records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetRedemptionRecordsAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get redemption records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The redemption records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.GetLendingInterestHistoryAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get interest history
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The interest history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLending.ChangeToDailyPositionAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Changed fixed/activity position to daily position
            </summary>
            <param name="projectId">Id of the project</param>
            <param name="lot">The lot</param>
            <param name="positionId">For fixed position</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientLeveragedTokens">
            <summary>
            Leveraged tokens endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLeveragedTokens.GetBlvtInfoAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get blvt info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLeveragedTokens.SubscribeBlvtAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Subscribe to a token
            </summary>
            <param name="tokenName">Name of the token to subscribe to</param>
            <param name="cost">Cost of the subscription</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLeveragedTokens.GetSubscriptionRecordsAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get subscription records
            </summary>
            <param name="tokenName">Filter by token</param>
            <param name="id">Filter by id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLeveragedTokens.RedeemBlvtAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Redeem a token
            </summary>
            <param name="tokenName">Name of the token to redeem</param>
            <param name="amount">Amount to redeem</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLeveragedTokens.GetRedemptionRecordsAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get redemption records
            </summary>
            <param name="tokenName">Filter by token</param>
            <param name="id">Filter by id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLeveragedTokens.GetHistoricalBlvtKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get's historical klines
            </summary>
            <param name="symbol">The token</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Filter by startTime</param>
            <param name="endTime">Filter by endTime</param>
            <param name="limit">Number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap">
            <summary>
            Liquid swap endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.GetBSwapPoolsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all swap pools
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.GetPoolLiquidityInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get liquidity info for a pool
            </summary>
            <param name="poolId">Get a specific pool</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.AddLiquidityAsync(System.Int32,System.String,System.Decimal,System.Nullable{Binance.Net.Enums.LiquidityType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add liquidity to a pool
            </summary>
            <param name="poolId">The pool</param>
            <param name="asset">The asset</param>
            <param name="type">Add type</param>
            <param name="quantity">Quantity to add</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.RemoveLiquidityAsync(System.Int32,System.String,Binance.Net.Enums.LiquidityType,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Remove liquidity from a pool
            </summary>
            <param name="poolId">The pool</param>
            <param name="asset">The asset</param>
            <param name="type">Remove type</param>
            <param name="shareAmount">Amount to remove</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.GetLiquidityOperationRecordsAsync(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{Binance.Net.Enums.BSwapOperation},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get liquidity operation records
            </summary>
            <param name="operationId">Filter by operationId</param>
            <param name="poolId">Filter by poolId</param>
            <param name="operation">Filter by operation</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.GetQuoteAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Request a quote for swap quote asset (selling asset) for base asset (buying asset), essentially price/exchange rates. quoteQty is quantity of quote asset(to sell).
            Please be noted the quote is for reference only, the actual price will change as the liquidity changes, it's recommended to swap immediate after request a quote for slippage prevention.
            </summary>
            <param name="quoteAsset">Quote asset</param>
            <param name="baseAsset">Base asset</param>
            <param name="quoteQuantity">Quote quantity</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.SwapAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Swap quote asset for base asset
            </summary>
            <param name="quoteAsset">Quote asset</param>
            <param name="baseAsset">Base asset</param>
            <param name="quoteQuantity">Quote quantity</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.GetSwapHistoryAsync(System.Nullable{System.Int64},System.Nullable{Binance.Net.Enums.BSwapStatus},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get swap history records
            </summary>
            <param name="swapId">Filter by swapId</param>
            <param name="status">Filter by status</param>
            <param name="quoteAsset">Filter by quote asset</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.GetBSwapPoolConfigureAsync(System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get pool config
            </summary>
            <param name="poolId">Id of the pool</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.AddLiquidityPreviewAsync(System.Int32,System.String,System.Decimal,Binance.Net.Enums.LiquidityType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Calculate expected share amount for adding liquidity in single or dual token.
            </summary>
            <param name="poolId">The pool</param>
            <param name="asset">The asset</param>
            <param name="quantity">Quantity to add</param>
            <param name="type">Add type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientLiquidSwap.RemoveLiquidityPreviewAsync(System.Int32,System.String,System.Decimal,Binance.Net.Enums.LiquidityType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Calculate expected share amount for removing liquidity in single or dual token.
            </summary>
            <param name="poolId">The pool</param>
            <param name="asset">The asset</param>
            <param name="quantity">Quantity to add</param>
            <param name="type">Add type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientMarket">
            <summary>
            Interface for market data
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetRecentTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetAggregatedTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMarket.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientMining">
            <summary>
            Mining interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningCoinListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets mining coins info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningAlgorithmListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets mining algorithms info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Algorithms info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMinerDetailsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets miner details
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="workerName">Miners name</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMinerListAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{Binance.Net.Enums.MinerStatus},System.Threading.CancellationToken)">
            <summary>
            Gets miner list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="sortAscending">Sort in ascending order</param>
            <param name="sortColumn">Column to sort by</param>
            <param name="workerStatus">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningRevenueListAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets revenue list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="pageSize">Results per page</param>
            <param name="coin">Coin</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningOtherRevenueListAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get other revenue list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="pageSize">Results per page</param>
            <param name="coin">Coin</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningStatisticsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get mining statistics
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">User name</param>
            <param name="ct">Cancellation token</param>
            <returns>Mining statistics</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetMiningAccountListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets mining account list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account user name</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetHashrateResaleListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets hash rate resale list
            </summary>
            <param name="page">Page</param>
            <param name="pageSize">Results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Resale list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.GetHashrateResaleDetailsAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets hash rate resale details
            </summary>
            <param name="configId">The mining id</param>
            <param name="userName">Mining account</param>
            <param name="page">Page</param>
            <param name="pageSize">Results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Resale details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.PlaceHashrateResaleRequestAsync(System.String,System.String,System.DateTime,System.DateTime,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Hashrate resale request
            </summary>
            <param name="userName">Mining account</param>
            <param name="algorithm">Transfer algorithm</param>
            <param name="startDate">Resale start time</param>
            <param name="endDate">Resale end time</param>
            <param name="toUser">To mining account</param>
            <param name="hashRate">Results per page</param>
            <param name="ct">Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)</param>
            <returns>Mining account</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientMining.PlaceHashrateResaleRequestAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel Hashrate Resale Configuration
            </summary>
            <param name="configId">Mining id</param>
            <param name="userName">Mining account</param>
            <param name="ct">Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)</param>
            <returns>Success</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount">
            <summary>
            Sub accounts interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="isFreeze">Is freezed</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountTransferHistoryForMasterAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the master account) 
            </summary>
            <param name="fromEmail">Filter the history by from email</param>
            <param name="toEmail">Filter the history by to email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountAsync(Binance.Net.Enums.TransferAccountType,Binance.Net.Enums.TransferAccountType,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset form/to a sub account. If fromEmail or toEmail is not send it is interpreted as from/to the master account. Transfer between futures accounts is not supported
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="fromAccountType">Account type to transfer from</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="toAccountType">Account type to transfer to</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountAssetsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets list of balances for a sub account
            </summary>
            <param name="email">For which account to get the assets</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountDepositAddressAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a coin to a sub account
            </summary>
            <param name="email">The email of the account to deposit to</param>
            <param name="coin">The coin of the deposit</param>
            <param name="network">The coin network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountDepositHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history for a sub account
            </summary>
            <param name="email">The email of the account to get history for</param>
            <param name="coin">Filter for a coin</param>
            <param name="startTime">Only return deposits placed later this</param>
            <param name="endTime">Only return deposits placed before this</param>
            <param name="limit">Max number of results</param>
            <param name="offset">Offset results by this</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountStatusAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables margin for a sub account
            </summary>
            <param name="email">The email of the account to enable margin for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin enable status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountMarginDetailsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin details for a sub account
            </summary>
            <param name="email">The email of the account to get margin details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsMarginSummaryAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin summary</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables futures for a sub account
            </summary>
            <param name="email">The sub account email to enable futures for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures status</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountFuturesDetailsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures details for a sub account
            </summary>
            <param name="email">The email of the account to get future details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures details</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsFuturesSummaryAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures summary</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountsFuturesPositionRiskAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures position risk for a sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Position risk</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountFuturesAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountFuturesTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a futures sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountMarginAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountMarginTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a margin sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountToSubAccountAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to another sub account of the same master
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.TransferSubAccountToMasterAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to master account
            </summary>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountTransferHistoryForSubAccountAsync(System.String,System.Nullable{Binance.Net.Enums.SubAccountTransferSubAccountType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the sub account)
            </summary>
            <param name="asset">The asset</param>
            <param name="type">Filter by type of transfer</param>
            <param name="startTime">Only return transfers later than this</param>
            <param name="endTime">Only return transfers before this</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetSubAccountBtcValuesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get BTC valued asset summary of subaccounts.
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="page">The page</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Btc asset values</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.CreateVirtualSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create a virtual sub account
            </summary>
            <param name="subAccountString">String based with which a subaccount email will be generated. Should not contain special characters</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.EnableBlvtForSubAccountAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable or disable blvt
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="enable">Enable or disable (only true for now)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetUniversalTransferHistory(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of universal transfers
            </summary>
            <param name="fromEmail">Filter the list by from email (fromEmail and toEmail cannot be present at same time)</param>
            <param name="toEmail">Filter the list by to email (fromEmail and toEmail cannot be present at same time)</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return (Default 500, max 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of universal transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSubAccount.GetUniversalTransferHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of universal transfers
            </summary>
            <param name="fromEmail">Filter the list by from email (fromEmail and toEmail cannot be present at same time)</param>
            <param name="toEmail">Filter the list by to email (fromEmail and toEmail cannot be present at same time)</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return (Default 500, max 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of universal transfers</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientSystem">
            <summary>
            System interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientSystem.GetSystemStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream">
            <summary>
            Interface for user stream
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Futures.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientUserStream.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IBinanceClientWithdrawDeposit">
            <summary>
            Withdraw/deposit endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdrawDeposit.GetAssetDetailsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdrawDeposit.WithdrawAsync(System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="withdrawOrderId">Custom client order id</param>
            <param name="transactionFeeFlag">When making internal transfer, true for returning the fee to the destination account; false for returning the fee back to the departure account. Default false.</param>
            <param name="amount">The amount to withdraw</param>
            <param name="network">The network to use</param>
            <param name="name">Description of the address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdrawDeposit.GetWithdrawalHistoryAsync(System.String,System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="withdrawOrderId">Filter by withdraw order id</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <param name="limit">Add limit. Default: 1000, Max: 1000</param>
            <param name="offset">Add offset</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdrawDeposit.GetDepositHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="coin">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="limit">Amount of results</param>
            <param name="offset">Offset the results</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IBinanceClientWithdrawDeposit.GetDepositAddressAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="coin">Asset to get address for</param>
            <param name="network">Network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream">
            <summary>
            Isolated margin user stream interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.StartIsolatedMarginUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to  BinanceSocketClient.Spot.SubscribeToUserDataUpdates  
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.KeepAliveIsolatedMarginUserStreamAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream for margin account listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.IsolatedMargin.IBinanceClientIsolatedMarginUserStream.CloseIsolatedMarginUserStreamAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin">
            <summary>
            Margin interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.Market">
            <summary>
            Margin market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.Order">
            <summary>
            Margin order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.UserStream">
            <summary>
            Margin user stream endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.IsolatedUserStream">
            <summary>
            Isolated margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.TransferAsync(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.BorrowAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.RepayAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetTransferHistoryAsync(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetLoansAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">The records count size need show</param>
            <param name="archived">Set to true for archived data from 6 months ago</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetRepaysAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Filter by number</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="size">The records count size need show</param>
            <param name="archived">Set to true for archived data from 6 months ago</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetInterestHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="archived">Set to true for archived data from 6 months ago</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetInterestRateHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest rate
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="vipLevel">Vip level</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest rate</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetForceLiquidationHistoryAsync(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMaxBorrowAmountAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetMaxTransferAmountAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetIsolatedMarginAccountTransferHistoryAsync(System.String,System.String,System.Nullable{Binance.Net.Enums.IsolatedMarginTransferDirection},System.Nullable{Binance.Net.Enums.IsolatedMarginTransferDirection},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get history of transfer to and from the isolated margin account
            </summary>
            <param name="symbol">The symbol</param>
            <param name="asset">Filter by asset</param>
            <param name="from">Filter by direction</param>
            <param name="to">Filter by direction</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="current">Current page</param>
            <param name="limit">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetIsolatedMarginAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.GetEnabledIsolatedMarginAccountLimitAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get max number of enabled isolated margin accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.EnableIsolatedMarginAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable an isolated margin account
            </summary>
            <param name="symbol">Symbol to enable isoldated margin account for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.DisableIsolatedMarginAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Disabled an isolated margin account info
            </summary>
            <param name="symbol">Symbol to enable isoldated margin account for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMargin.IsolatedMarginAccountTransferAsync(System.String,System.String,Binance.Net.Enums.IsolatedMarginTransferDirection,Binance.Net.Enums.IsolatedMarginTransferDirection,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfer from or to isolated margin account
            </summary>
            <param name="asset">The asset</param>
            <param name="symbol">Isolated symbol</param>
            <param name="from">From</param>
            <param name="to">To</param>
            <param name="amount">Amount to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket">
            <summary>
            Margin market interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginAssetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin asset
            </summary>
            <param name="asset">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPairAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin pair
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPairsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetMarginPriceIndexAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get margin price index
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin price index</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetIsolatedMarginSymbolAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin symbol info
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginMarket.GetIsolatedMarginSymbolsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin symbol info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders">
            <summary>
            Margin orders interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.PlaceMarginOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{System.Boolean},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderResponseType">Used for the response JSON</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.CancelMarginOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.CancelOpenMarginOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active orders for a symbol
            </summary>
            <param name="symbol">The symbol the to cancel orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMarginAccountOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMarginAccountOpenOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMarginAccountOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMarginAccountUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.PlaceMarginOCOOrderAsync(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new margin OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="sideEffectType">Side effect type</param>
            <param name="isIsolated">Is isolated</param>
            <param name="orderResponseType">Order response type</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>        
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.CancelMarginOcoOrderAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending margin oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMarginOcoOrderAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin oco order. Either orderListId or listClientOrderId should be provided.
            </summary>
            <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderListId">The list order id of the order</param>
            <param name="origClientOrderId">Either orderListId or listClientOrderId must be provided</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetMarginOcoOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of margin oco orders matching the parameters
            </summary>
            <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Margin.IBinanceClientMarginOrders.GetOpenOcoOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open margin oco orders
            </summary>
            <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot">
            <summary>
            Spot interface
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.System">
            <summary>
            Spot system endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.Market">
            <summary>
            Spot market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.Order">
            <summary>
            Spot order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.UserStream">
            <summary>
            Spot user stream endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.Futures">
            <summary>
            Spot/futures endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpot.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction">
            <summary>
            Spot futures endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.TransferFuturesAccountAsync(System.String,System.Decimal,Binance.Net.Enums.FuturesTransferType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Execute a transfer between the spot account and a futures account
            </summary>
            <param name="asset">The asset to transfer</param>
            <param name="amount">Amount to transfer</param>
            <param name="transferType">The transfer direction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The transaction id</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetFuturesTransferHistoryAsync(System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers between spot and futures account
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">The page to return</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>History</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.BorrowForCrossCollateralAsync(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Borrow for cross-collateral
            </summary>
            <param name="coin">The coin to borrow</param>
            <param name="amount">The amount to borrow</param>
            <param name="collateralCoin">The coin to use as collateral</param>
            <param name="collateralAmount">The amount of collateral coin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Borrow result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetCrossCollateralBorrowHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross collateral borrow history
            </summary>
            <param name="coin">The coin to get history for</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>History</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.RepayForCrossCollateralAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Repay for cross-collateral
            </summary>
            <param name="coin">The coin</param>
            <param name="amount">The amount to repay</param>
            <param name="collateralCoin">The collateral coin to repay</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetCrossCollateralRepayHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross collateral borrow history
            </summary>
            <param name="coin">The coin to get history for</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>History</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetCrossCollateralWalletAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross-collateral wallet info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Wallet</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetCrossCollateralInformationAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross-collateral info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetRateAfterAdjustLoanToValueAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.AdjustRateDirection,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Calculate rate after adjust cross-collateral loan to value
            </summary>
            <param name="collateralCoin">The collateral coin</param>
            <param name="loanCoin">The loan coin</param>
            <param name="amount">The amount</param>
            <param name="direction">The direction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>After collateral rate</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetMaxAmountForAdjustCrossCollateralLoanToValueAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get max amount for adjust cross-collateral LTV
            </summary>
            <param name="collateralCoin">The collateral coin</param>
            <param name="loanCoin">The loan coin</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Max amounts</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.AdjustCrossCollateralLoanToValueAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.AdjustRateDirection,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Adjust cross collateral LTV
            </summary>
            <param name="collateralCoin">The collateral coin</param>
            <param name="loanCoin">The loan coin</param>
            <param name="amount">The amount</param>
            <param name="direction">The direction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Adjust result</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetAdjustCrossCollateralLoanToValueHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross collateral LTV adjustment history
            </summary>
            <param name="loanCoin">The loan coin</param>
            <param name="collateralCoin">The collateral coin</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Adjustment history</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotFuturesInteraction.GetCrossCollateralLiquidationHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross collateral liquidation history
            </summary>
            <param name="collateralCoin">The collateral coin</param>
            <param name="loanCoin">The loan coin</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Liquidation history</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket">
            <summary>
            Spot market interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetCurrentAvgPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetTradeFeeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trade fee for a symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotMarket.GetPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder">
            <summary>
            Spot order interface
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceTestOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="orderResponseType">Used for the response JSON</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="orderResponseType">Used for the response JSON</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelAllOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders on a symbol
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.PlaceOcoOrderAsync(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.CancelOcoOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOcoOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either orderListId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="listClientOrderId">The client order id of the list order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOcoOrdersAsync(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetOpenOcoOrdersAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotOrder.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="orderId">Get trades for this order id</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotSystem">
            <summary>
            Spot system endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotSystem.GetExchangeInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and information on the provided symbol
            </summary>
            <param name="symbol">Symbol to get data for token</param>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotSystem.GetExchangeInfoAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and information on the provided symbols
            </summary>
            <param name="symbols">Symbols to get data for token</param>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.Interfaces.SubClients.Spot.IBinanceClientSpotSystem.GetSystemStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="T:Binance.Net.Objects.BinanceClientOptions">
            <summary>
            Options for the binance client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceClientOptions.BaseAddressUsdtFutures">
            <summary>
            The base address for USDT-M futures
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceClientOptions.BaseAddressCoinFutures">
            <summary>
            The base address for Coin-M futures
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceClientOptions.AutoTimestampRecalculationInterval">
            <summary>
            Interval for refreshing the auto timestamp calculation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceClientOptions.TimestampOffset">
            <summary>
            A manual offset for the timestamp. Should only be used if AutoTimestamp and regular time synchronization on the OS is not reliable enough
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceClientOptions.TradeRulesBehaviour">
            <summary>
            Whether to check the trade rules when placing new orders and what to do if the trade isn't valid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceClientOptions.TradeRulesUpdateInterval">
            <summary>
            How often the trade rules should be updated. Only used when TradeRulesBehaviour is not None
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.BinanceClientOptions.#ctor">
            <summary>
            Constructor with default endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.BinanceClientOptions.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Constructor with default endpoints
            </summary>
            <param name="client">HttpClient to use for requests from this client</param>
        </member>
        <member name="M:Binance.Net.Objects.BinanceClientOptions.#ctor(Binance.Net.BinanceApiAddresses)">
            <summary>
            Constructor with custom endpoints
            </summary>
            <param name="addresses">The base addresses to use</param>
        </member>
        <member name="M:Binance.Net.Objects.BinanceClientOptions.#ctor(Binance.Net.BinanceApiAddresses,System.Net.Http.HttpClient)">
            <summary>
            Constructor with custom endpoints
            </summary>
            <param name="addresses">The base addresses to use</param>
            <param name="client">HttpClient to use for requests from this client</param>
        </member>
        <member name="M:Binance.Net.Objects.BinanceClientOptions.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor with custom endpoints
            </summary>
            <param name="spotBaseAddress">Сustom url for the SPOT API</param>
            <param name="futuresUsdtBaseAddress">Сustom url for USDT-M futures API</param>
            <param name="futuresCoinBaseAddress">Сustom url for Coin-M futures API</param>
        </member>
        <member name="M:Binance.Net.Objects.BinanceClientOptions.#ctor(System.String,System.String,System.String,System.Net.Http.HttpClient)">
            <summary>
            Constructor with custom endpoints
            </summary>
            <param name="spotBaseAddress">Сustom url for the SPOT API</param>
            <param name="futuresUsdtBaseAddress">Сustom url for USDT-M futures API</param>
            <param name="futuresCoinBaseAddress">Сustom url for Coin-M futures API</param>
            <param name="client">HttpClient to use for requests from this client</param>
        </member>
        <member name="M:Binance.Net.Objects.BinanceClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.BinanceSocketClientOptions">
            <summary>
            Binance socket client options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSocketClientOptions.BaseAddressUsdtFutures">
            <summary>
            The base address for USDT-M futures
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceSocketClientOptions.BaseAddressCoinFutures">
            <summary>
            The base address for Coin-M futures
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.BinanceSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.BinanceSocketClientOptions.#ctor(Binance.Net.BinanceApiAddresses)">
            <summary>
            ctor
            </summary>
            <param name="addresses">The base addresses to use</param>
        </member>
        <member name="M:Binance.Net.Objects.BinanceSocketClientOptions.#ctor(System.String,System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="address">Custom address for spot API</param>
            <param name="futuresUsdtAddress">Custom address for usdt futures streams</param>
            <param name="futuresCoinAddress">Custom address for coin futures streams</param>
        </member>
        <member name="M:Binance.Net.Objects.BinanceSocketClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.BinanceOrderBookOptions">
            <summary>
            Binance symbol order book options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookOptions.RestClient">
            <summary>
            The rest client to use for requesting the initial order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookOptions.SocketClient">
            <summary>
            The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookOptions.Limit">
            <summary>
            The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookOptions.UpdateInterval">
            <summary>
            Update interval in milliseconds, either 100 or 1000. Defaults to 1000
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.BinanceOrderBookOptions.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},Binance.Net.Interfaces.IBinanceSocketClient,Binance.Net.Interfaces.IBinanceClient)">
            <summary>
            Create new options
            </summary>
            <param name="limit">The top amount of results to keep in sync. If for example limit=10 is used, the order book will contain the 10 best bids and 10 best asks. Leaving this null will sync the full order book</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="socketClient">The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.</param>
            <param name="restClient">The rest client to use for requesting the initial order book.</param>
        </member>
        <member name="T:Binance.Net.Objects.BinanceCombinedStream`1">
            <summary>
            Represents the binance result for combined data on a single socket connection
            See on https://github.com/binance-exchange/binance-official-api-docs/blob/master/web-socket-streams.md
            Combined streams
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Binance.Net.Objects.BinanceCombinedStream`1.Stream">
            <summary>
            The stream combined
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceCombinedStream`1.Data">
            <summary>
            The data of stream
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceOrderBookEntry">
            <summary>
            An entry in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookEntry.Price">
            <summary>
            The price of this order book entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceOrderBookEntry.Quantity">
            <summary>
            The quantity of this price in the order book
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceQueryRecords`1">
            <summary>
            Query results
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Binance.Net.Objects.BinanceQueryRecords`1.Rows">
            <summary>
            The list records
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceQueryRecords`1.Total">
            <summary>
            The total count of the records
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceRateLimit">
            <summary>
            Rate limit info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Interval">
            <summary>
            The interval the rate limit uses to count
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Type">
            <summary>
            The type the rate limit applies to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.IntervalNumber">
            <summary>
            The amount of calls the limit is
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceRateLimit.Limit">
            <summary>
            The amount of calls the limit is
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceResult">
            <summary>
            Query result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceResult.Code">
            <summary>
            Result code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceResult.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceResult`1">
            <summary>
            Query result
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Binance.Net.Objects.BinanceResult`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BinanceStreamEvent">
            <summary>
            A event received by a Binance websocket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceStreamEvent.Event">
            <summary>
            The type of the event
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BinanceStreamEvent.EventTime">
            <summary>
            The time the event happened
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BinanceBlvtInfo">
            <summary>
            Leveraged token info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.TokenName">
            <summary>
            Name of the token
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.Description">
            <summary>
            Description of the token
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.Underlying">
            <summary>
            Underlying asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.TokenIssued">
            <summary>
            Token issued
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.Basket">
            <summary>
            Basket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.Nav">
            <summary>
            Nav
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.RealLeverage">
            <summary>
            Real leverage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.DailyManagementFee">
            <summary>
            Daily management fee
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.CurrentBaskets">
            <summary>
            Current baskets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.RedeemFeePercentage">
            <summary>
            Redeem fee percentage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.DailyRedeemLimit">
            <summary>
            Daily redeem limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.PurchaseFeePercentage">
            <summary>
            Purchase fee percentage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.DailyPurchaseLimit">
            <summary>
            Daily purchase limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfo.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BlvtCurrentBasket">
            <summary>
            Basket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BlvtCurrentBasket.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BlvtCurrentBasket.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BlvtCurrentBasket.NotionalValue">
            <summary>
            Notional value
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate">
            <summary>
            Blvt info update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate.TokenName">
            <summary>
            Token name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate.TokenIssued">
            <summary>
            Token issued
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate.Nav">
            <summary>
            Nav
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate.Baskets">
            <summary>
            Baskets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate.RealLeverage">
            <summary>
            Token issued
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate.TargetLeverage">
            <summary>
            Token issued
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate.FundingRatio">
            <summary>
            Funding ratio
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BlvtBasket">
            <summary>
            Basket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BlvtBasket.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BlvtBasket.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BinanceBlvtKline">
            <summary>
            Blvt kline
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtKline.OpenTime">
            <summary>
            The time this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtKline.Open">
            <summary>
            The price at which this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtKline.High">
            <summary>
            The highest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtKline.Low">
            <summary>
            The lowest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtKline.Close">
            <summary>
            The price at which this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtKline.RealLeverage">
            <summary>
            Real leverage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtKline.CloseTime">
            <summary>
            The time this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtKline.NavUpdates">
            <summary>
            Number of updates
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BinanceBlvtRedeemResult">
            <summary>
            Redeem result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedeemResult.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedeemResult.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedeemResult.TokenName">
            <summary>
            Name of the token
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedeemResult.Amount">
            <summary>
            Redemption value in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedeemResult.RedeemAmount">
            <summary>
            Redemption token amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedeemResult.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BinanceBlvtRedemption">
            <summary>
            Redemption info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedemption.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedemption.TokenName">
            <summary>
            Token name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedemption.Amount">
            <summary>
            Redemption amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedemption.Nav">
            <summary>
            NAV price of redemption
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedemption.Fee">
            <summary>
            Redemption fee in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedemption.NetProceed">
            <summary>
            Net redemption value in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtRedemption.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BinanceBlvtSubscribeResult">
            <summary>
            Subscribe result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtSubscribeResult.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtSubscribeResult.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtSubscribeResult.TokenName">
            <summary>
            Name of the token
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtSubscribeResult.Amount">
            <summary>
            Subscribed token amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtSubscribeResult.Cost">
            <summary>
            Subscription cost in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanceBlvtSubscribeResult.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Blvt.BinanecBlvtSubscription">
            <summary>
            Leveraged token subscription info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanecBlvtSubscription.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanecBlvtSubscription.TokenName">
            <summary>
            Token name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanecBlvtSubscription.Amount">
            <summary>
            Subscription amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanecBlvtSubscription.Nav">
            <summary>
            NAV price of subscription
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanecBlvtSubscription.Fee">
            <summary>
            Subscription fee in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanecBlvtSubscription.TotalCharge">
            <summary>
            Subscription cost in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Blvt.BinanecBlvtSubscription.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions">
            <summary>
            Options for the binance brokerage client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.AutoTimestampRecalculationInterval">
            <summary>
            Interval for refreshing the auto timestamp calculation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.TimestampOffset">
            <summary>
            A manual offset for the timestamp. Should only be used if AutoTimestamp and regular time synchronization on the OS is not reliable enough
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Brokerage.BinanceBrokerageClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo">
            <summary>
            Account Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MaxMakerCommission">
            <summary>
            Max Maker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MinMakerCommission">
            <summary>
            Min Maker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MaxTakerCommission">
            <summary>
            Max Taker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MinTakerCommission">
            <summary>
            Min Taker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.SubAccountQuantity">
            <summary>
            Sub Account Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAccountInfo.MaxSubAccountQuantity">
            <summary>
            Max Sub Account Quantity
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAddIpRestrictionResult">
            <summary>
            Add IP Restriction Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAddIpRestrictionResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAddIpRestrictionResult.ApiKey">
            <summary>
            Api key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAddIpRestrictionResult.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageAddIpRestrictionResult.UpdateDate">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult">
            <summary>
            Api Key Create Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.ApiKey">
            <summary>
            Api Key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.ApiSecret">
            <summary>
            Api Secret
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.IsSpotTradingEnabled">
            <summary>
            Is Spot Trading Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.IsMarginTradingEnabled">
            <summary>
            Is Margin Trading Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageApiKeyCreateResult.IsFuturesTradingEnabled">
            <summary>
            Is Futures Trading Enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageBnbBurnStatus">
            <summary>
            BNB Burn Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageBnbBurnStatus.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageBnbBurnStatus.IsSpotBnbBurn">
            <summary>
            Is Spot BNB Burn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageBnbBurnStatus.IsInterestBnbBurn">
            <summary>
            Is Interest BNB Burn
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnMarginInterestResult">
            <summary>
            Enable Or Disable BNB Burn Margin Interest Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnMarginInterestResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnMarginInterestResult.IsInterestBnbBurn">
            <summary>
            Is Interest BNB Burn
            </summary> 
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnSpotAndMarginResult">
            <summary>
            Enable Or Disable BNB Burn Spot And Margin Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnSpotAndMarginResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageChangeBnbBurnSpotAndMarginResult.IsSpotBnbBurn">
            <summary>
            Is Spot BNB Burn
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableFuturesResult">
            <summary>
            Enable Futures Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableFuturesResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableFuturesResult.IsFuturesEnabled">
            <summary>
            Is Futures Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableFuturesResult.UpdateDate">
            <summary>
            Update Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableLeverageTokenResult">
            <summary>
            Enable Leverage Token Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableLeverageTokenResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableLeverageTokenResult.IsLeverageTokenEnabled">
            <summary>
            Is Leverage Token Enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableMarginResult">
            <summary>
            Enable Margin Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableMarginResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableMarginResult.IsMarginEnabled">
            <summary>
            Is Margin Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageEnableMarginResult.UpdateDate">
            <summary>
            Update Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesAssetInfo">
            <summary>
            Futures Asset Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesAssetInfo.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesAssetInfo.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo">
            <summary>
            Account Futures Asset Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.IsFuturesEnable">
            <summary>
            Futures enable
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.TotalInitialMarginOfUsdt">
            <summary>
            Total Initial Margin Of Usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.TotalMaintenanceMarginOfUsdt">
            <summary>
            Total Maintenance Margin Of Usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.TotalWalletBalanceOfUsdt">
            <summary>
            Total Wallet Balance Of Usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.TotalUnrealizedProfitOfUsdt">
            <summary>
            Total Unrealized Profit Of Usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.TotalMarginBalanceOfUsdt">
            <summary>
            Total Margin Balance Of Usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.TotalPositionInitialMarginOfUsdt">
            <summary>
            Total Position Initial Margin Of Usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesAssetInfo.TotalOpenOrderInitialMarginOfUsdt">
            <summary>
            Total Open Order Initial Margin Of Usdt
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesRebate">
            <summary>
            Futures Commission Rebate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesRebate.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesRebate.Income">
            <summary>
            Income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesRebate.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesRebate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesRebate.TradeId">
            <summary>
            TradeId
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesRebate.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType">
            <summary>
            Futures type
            </summary>
        </member>
        <member name="F:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType.USDT">
            <summary>
            USDT-Ⓜ Futures
            </summary>
        </member>
        <member name="F:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType.COIN">
            <summary>
            COIN-Ⓜ Futures
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageIpRestrictionBase">
            <summary>
            IP Restriction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageIpRestrictionBase.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageIpRestrictionBase.ApiKey">
            <summary>
            Api key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageIpRestrictionBase.IpList">
            <summary>
            IP list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageIpRestrictionBase.UpdateDate">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageIpRestriction">
            <summary>
            IP Restriction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageIpRestriction.IpRestrict">
            <summary>
            Ip Restrict
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageMarginAssetInfo">
            <summary>
            Margin Asset Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageMarginAssetInfo.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageMarginAssetInfo.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountMarginAssetInfo">
            <summary>
            Account Margin Asset Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountMarginAssetInfo.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountMarginAssetInfo.IsMarginEnable">
            <summary>
            Margin enable
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountMarginAssetInfo.TotalAssetOfBtc">
            <summary>
            Total Asset Of Btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountMarginAssetInfo.TotalLiabilityOfBtc">
            <summary>
            Total Liability Of Btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountMarginAssetInfo.TotalNetAssetOfBtc">
            <summary>
            Total Net Asset Of Btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountMarginAssetInfo.MarginLevel">
            <summary>
            Margin level
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate">
            <summary>
            Brokerage Rebate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.Income">
            <summary>
            Income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.TradeId">
            <summary>
            Trade Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageRebate.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSpotAssetInfo">
            <summary>
            Spot Asset Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSpotAssetInfo.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSpotAssetInfo.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountSpotAssetInfo">
            <summary>
            Account Spot Asset Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountSpotAssetInfo.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountSpotAssetInfo.TotalBalanceOfBtc">
            <summary>
            Total Balance Of Btc
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccount">
            <summary>
            Sub Account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccount.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccount.CreateDate">
            <summary>
            Create Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey">
            <summary>
            Sub Account Api Key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.ApiKey">
            <summary>
            Api Key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.IsSpotTradingEnabled">
            <summary>
            Is Spot Trading Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.IsMarginTradingEnabled">
            <summary>
            Is Margin Trading Enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountApiKey.IsFuturesTradingEnabled">
            <summary>
            Is Futures Trading Enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCoinFuturesCommission">
            <summary>
            Sub Account Coin Futures Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCoinFuturesCommission.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCoinFuturesCommission.Pair">
            <summary>
            Pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCoinFuturesCommission.MakerAdjustment">
            <summary>
            COIN-Ⓜ futures commission adjustment for maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCoinFuturesCommission.TakerAdjustment">
            <summary>
            COIN-Ⓜ futures commission adjustment for taker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCoinFuturesCommission.MakerCommission">
            <summary>
            COIN-Ⓜ futures commission (after adjusted) for maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCoinFuturesCommission.TakerCommission">
            <summary>
            COIN-Ⓜ futures commission (after adjusted) for taker
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission">
            <summary>
            Sub Account Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.MakerCommission">
            <summary>
            Maker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.TakerCommission">
            <summary>
            Taker Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.MarginMakerCommission">
            <summary>
            Margin Maker Commission
            <para>If margin disabled, return -1</para>
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCommission.MarginTakerCommission">
            <summary>
            Margin Taker Commission
            <para>If margin disabled, return -1</para>
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCreateResult">
            <summary>
            Sub Account Create Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountCreateResult.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositStatus">
            <summary>
            Sub Account Deposit Status
            </summary>
        </member>
        <member name="F:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositStatus.CreditedButCannotWithdraw">
            <summary>
            Credited but cannot withdraw
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction">
            <summary>
            Sub Account Deposit Transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.AddressTag">
            <summary>
            Address Tag
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.TransactionId">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.SourceAddress">
            <summary>
            Source Address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositTransaction.ConfirmTimes">
            <summary>
            Confirm Times
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission">
            <summary>
            Sub Account Futures Commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.SubAccountId">
            <summary>
            Sub Account Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.MakerAdjustment">
            <summary>
            USDT-Ⓜ futures commission adjustment for maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.TakerAdjustment">
            <summary>
            USDT-Ⓜ futures commission adjustment for taker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.MakerCommission">
            <summary>
            USDT-Ⓜ futures commission (after adjusted) for maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountFuturesCommission.TakerCommission">
            <summary>
            USDT-Ⓜ futures commission (after adjusted) for taker
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesResult">
            <summary>
            Transfer Futures Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesResult.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesResult.ClientTransferId">
            <summary>
            Client Transfer Id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransactions">
            <summary>
            Transfer Futures Transactions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransactions.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransactions.FuturesType">
            <summary>
            Futures type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransactions.Transactions">
            <summary>
            Transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransaction">
            <summary>
            Transfer Futures Transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransaction.FromId">
            <summary>
            From Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransaction.ToId">
            <summary>
            To Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransaction.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransaction.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransaction.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransaction.ClientTransferId">
            <summary>
            Client Transfer Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferFuturesTransaction.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferResult">
            <summary>
            Transfer Result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferResult.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferResult.ClientTransferId">
            <summary>
            Client Transfer Id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction">
            <summary>
            Transfer Transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.ClientTransferId">
            <summary>
            Client Transfer Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.FromId">
            <summary>
            From Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.ToId">
            <summary>
            To Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransaction.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal">
            <summary>
            Transfer Transaction Universal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.Id">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.ClientTransferId">
            <summary>
            Client Transfer Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.ToId">
            <summary>
            To id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.FromAccountType">
            <summary>
            From account type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.ToAccountType">
            <summary>
            To account type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageTransferTransactionUniversal.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapOperation">
            <summary>
            Operation record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapOperation.OperationId">
            <summary>
            Operation id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapOperation.PoolId">
            <summary>
            Pool id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapOperation.PoolName">
            <summary>
            Pool name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapOperation.Operation">
            <summary>
            Operation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapOperation.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapOperation.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapOperation.ShareAmount">
            <summary>
            Share amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapOperationResult">
            <summary>
            Operation result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapOperationResult.OperationId">
            <summary>
            Id of the operation
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapPool">
            <summary>
            Swap pool info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPool.PoolId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPool.PoolName">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPool.Assets">
            <summary>
            Assets in the pool
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapPoolConfig">
            <summary>
            Swap pool config
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolConfig.PoolId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolConfig.PoolName">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolConfig.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolConfig.Liquidity">
            <summary>
            Pool liquidity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolConfig.AssetConfig">
            <summary>
            Asset configuration
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.PoolAssetConfig">
            <summary>
            Asset config
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.PoolAssetConfig.MinAdd">
            <summary>
            Minimal add
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.PoolAssetConfig.MaxAdd">
            <summary>
            Maximal add
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.PoolAssetConfig.MinSwap">
            <summary>
            Minimal swap
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.PoolAssetConfig.MaxSwap">
            <summary>
            Maximal swap
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.PoolLiquidity">
            <summary>
            Liquidity info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.PoolLiquidity.ConstantA">
            <summary>
            Constant a
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.PoolLiquidity.MinRedeemShare">
            <summary>
            Minimal redeem share
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.PoolLiquidity.SlippageTolerance">
            <summary>
            Slippage tolerance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapPoolLiquidity">
            <summary>
            Pool liquidity info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolLiquidity.PoolId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolLiquidity.PoolName">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolLiquidity.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolLiquidity.Liquidity">
            <summary>
            Liquidity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPoolLiquidity.Share">
            <summary>
            Share
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinancePoolShare">
            <summary>
            Pool share info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinancePoolShare.ShareAmount">
            <summary>
            Share amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinancePoolShare.SharePercentage">
            <summary>
            Share percentage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinancePoolShare.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult">
            <summary>
            Preview result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult.QuoteAmount">
            <summary>
            Quote amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult.BaseAmount">
            <summary>
            Base amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult.Share">
            <summary>
            Share
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult.Slippage">
            <summary>
            Slippage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapPreviewResult.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapQuote">
            <summary>
            Quote info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapQuote.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapQuote.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapQuote.QuoteQuantity">
            <summary>
            Quote quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapQuote.BaseQuantity">
            <summary>
            Base quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapQuote.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapQuote.Slippage">
            <summary>
            Slippage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapQuote.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapRecord">
            <summary>
            Swap record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.SwapId">
            <summary>
            Swap id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.SwapTime">
            <summary>
            Time of the swap
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.BaseQuantity">
            <summary>
            Base quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.QuoteQuantity">
            <summary>
            Quote quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapRecord.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.BSwap.BinanceBSwapResult">
            <summary>
            Swap result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.BSwap.BinanceBSwapResult.SwapId">
            <summary>
            Swap id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Fiat.BinanceFiatPayment">
            <summary>
            Fiat payment info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.OrderNumber">
            <summary>
            Order number
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.SourceAmount">
            <summary>
            The input amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.FiatCurrency">
            <summary>
            The fiat currency
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.ObtainAmount">
            <summary>
            The output amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.CryptoCurrency">
            <summary>
            The crypto currency
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.TotalFee">
            <summary>
            The total fee of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatPayment.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit">
            <summary>
            Fiat payment info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.OrderNumber">
            <summary>
            Order number
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.FiatCurrency">
            <summary>
            The used currency
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.IndicatedAmount">
            <summary>
            The indicated amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.Method">
            <summary>
            The crypto currency
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.TotalFee">
            <summary>
            The total fee of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.Status">
            <summary>
            The status 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Fiat.BinanceFiatWithdrawDeposit.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.BinanceFuturesClientOptions">
            <summary>
            Options for the binance client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.AutoTimestamp">
            <summary>
            Whether or not to automatically sync the local time with the server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.AutoTimestampRecalculationInterval">
            <summary>
            Interval for refreshing the auto timestamp calculation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TimestampOffset">
            <summary>
            A manual offset for the timestamp. Should only be used if AutoTimestamp and regular time synchronization on the OS is not reliable enough
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TradeRulesBehaviour">
            <summary>
            Whether to check the trade rules when placing new orders and what to do if the trade isn't valid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.TradeRulesUpdateInterval">
            <summary>
            How often the trade rules should be updated. Only used when TradeRulesBehaviour is not None
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Сustom url to connect via mirror website</param>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions">
            <summary>
            Binance socket client options
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.BaseSocketCombinedAddress">
            <summary>
            The base address for combined data in socket connections
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.SocketSubscriptionsCombineTarget">
            <summary>
            The amount of subscriptions that should be made on a single socket connection. Not all exchanges support multiple subscriptions on a single socket.
            Setting this to a higher number increases subscription speed, but having more subscriptions on a single connection will also increase the amount of traffic on that single connection.
            Not available on Binance.
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress">Сustom url to connect via mirror website</param>
        </member>
        <member name="M:Binance.Net.Objects.Futures.BinanceFuturesSocketClientOptions.Copy">
            <summary>
            Return a copy of these options
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset">
            <summary>
            Information about an account asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.InitialMargin">
            <summary>
            Initial Margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.MaintMargin">
            <summary>
            Maint Margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.MarginBalance">
            <summary>
            Margin Balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.MaxWithdrawAmount">
            <summary>
            Maximum Withdraw Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.OpenOrderInitialMargin">
            <summary>
            Open Order Initial Margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.PositionInitialMargin">
            <summary>
            Position Initial Margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.UnrealizedPnl">
            <summary>
            Unrealized Profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.WalletBalance">
            <summary>
            Wallet Balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.CrossWalletBalance">
            <summary>
            Crossed Wallet Balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.CrossUnrealizedPnl">
            <summary>
            Unrealized profit of crossed positions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountAsset.MarginAvailable">
            <summary>
            Whether the asset can be used as margin in Multi-Assets mode
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.AccountAlias">
            <summary>
            Account alias
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.WalletBalance">
            <summary>
            The total balance of this asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.CrossWalletBalance">
            <summary>
            Crossed wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.CrossUnrealizedPnl">
            <summary>
            Unrealized profit of crossed positions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.MaxWithdrawAmount">
            <summary>
            Maximum amount for transfer out
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountBalance.MarginAvailable">
            <summary>
            Whether the asset can be used as margin in Multi-Assets mode
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.Assets">
            <summary>
            Information about an account assets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.CanDeposit">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.CanTrade">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.CanWithdraw">
            <summary>
            Boolean indicating if this account can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.FeeTier">
            <summary>
            Fee tier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.MaxWithdrawAmount">
            <summary>
            Maximum withdraw amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.Positions">
            <summary>
            Information about an account positions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalMaintMargin">
            <summary>
            Total maint margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalOpenOrderInitialMargin">
            <summary>
            Total open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalPositionInitialMargin">
            <summary>
            Total positional initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalUnrealizedProfit">
            <summary>
            Total unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalWalletBalance">
            <summary>
            Total wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalCrossWalletBalance">
            <summary>
            Total crossed wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.TotalCrossUnPnl">
            <summary>
            Unrealized profit of crossed positions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountInfo.UpdateTime">
            <summary>
            The time of account info was updated
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountUserCommissionRate">
            <summary>
            User commission rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountUserCommissionRate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountUserCommissionRate.MakerCommissionRate">
            <summary>
            Maker commission rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAccountUserCommissionRate.TakerCommissionRate">
            <summary>
            Taker commission rate
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBasis">
            <summary>
            Basis info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBasis.Pair">
            <summary>
            The pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBasis.ContractType">
            <summary>
            Contract type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBasis.FuturesPrice">
            <summary>
            Futures price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBasis.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBasis.Basis">
            <summary>
            Basis
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBasis.BasisRate">
            <summary>
            Basis rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBasis.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder">
            <summary>
            Parameters for a new futures batch order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Symbol">
            <summary>
            Symbol of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Side">
            <summary>
            Side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.PositionSide">
            <summary>
            Default Both for One-way Mode ; Long or Short for Hedge Mode. It must be sent with Hedge Mode.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.ReduceOnly">
            <summary>
            Reduce only, default false
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.NewClientOrderId">
            <summary>
            A unique id among open orders. Automatically generated if not sent.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.StopPrice">
            <summary>
            Used with Stop/StopMarket or TakeProfit/TakeProfitMarket orders.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.ActivationPrice">
            <summary>
            Used with TrailingStopMarket orders, default as the latest price（supporting different workingType)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.CallbackRate">
            <summary>
            Used with TrailingStopMarket orders, min 0.1, max 4 where 1 for 1%
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.WorkingType">
            <summary>
            Stop price triggered by: Mark or Contract. Default Contract
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder.PriceProtect">
            <summary>
            Used with Stop/StopMarket or TakeProfit/TakeProfitMarket orders.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelAllOrders">
            <summary>
            The result of cancel all orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelAllOrders.Code">
            <summary>
            The execution code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelAllOrders.Message">
            <summary>
            The execution message
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder">
            <summary>
            The result of cancel order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.CumulativeQuantity">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.CumulativeQuoteQuantity">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ExecutedQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OriginalQuantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ClosePosition">
            <summary>
            if Close-All
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.OriginalType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.PriceRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.PositionSide">
            <summary>
            The position side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCancelOrder.PriceProtect">
            <summary>
            Price protect
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult">
            <summary>
            Result from a change margin type request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult.Code">
            <summary>
            Response code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesChangeMarginTypeResult.Message">
            <summary>
            Response message
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountBalance">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountBalance.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountInfo">
            <summary>
            Account info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountInfo.CanDeposit">
            <summary>
            Can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountInfo.CanTrade">
            <summary>
            Can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountInfo.CanWithdraw">
            <summary>
            Can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountInfo.FeeTier">
            <summary>
            Fee tier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountInfo.UpdateTier">
            <summary>
            Update tier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountInfo.Assets">
            <summary>
            Account assets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinAccountInfo.Positions">
            <summary>
            Account positions
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinBuySellVolumeRatio">
            <summary>
            Buy/sell volume ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinBuySellVolumeRatio.Pair">
            <summary>
            The pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinBuySellVolumeRatio.ContractType">
            <summary>
            Contract type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinBuySellVolumeRatio.TakerBuyVolume">
            <summary>
            The taker buy volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinBuySellVolumeRatio.TakerSellVolume">
            <summary>
            The taker sell volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinBuySellVolumeRatio.TakerBuyVolumeValue">
            <summary>
            The taker buy value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinBuySellVolumeRatio.TakerSellVolumeValue">
            <summary>
            The taker sell value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinBuySellVolumeRatio.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCountDownResult">
            <summary>
            Result of setting a countdown timer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCountDownResult.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCountDownResult.CountDownTime">
            <summary>
            Count down time in milliseconds
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory">
            <summary>
            Futures income history result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Symbol">
            <summary>
            Symbol for the resulting income history, may be null if not associated with a trading pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.IncomeTypeString">
            <summary>
            Type of income as string
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.IncomeType">
            <summary>
            Type of income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Income">
            <summary>
            Amount of income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Asset">
            <summary>
            Base asset for the income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Info">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.Time">
            <summary>
            Time of the income
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.TransactionId">
            <summary>
            Transaction id if relevant
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesIncomeHistory.TradeId">
            <summary>
            Trade id if existing
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult">
            <summary>
            Response to the change in initial leverage request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.Leverage">
            <summary>
            New leverage multiplier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.MaxNotionalValue">
            <summary>
            Maximum value that can be held
            NOTE: string type, because the value van be 'inf' (infinite)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesInitialLeverageChangeResult.Symbol">
            <summary>
            Symbol the request is for
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult">
            <summary>
            Result of the margin change history request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Amount">
            <summary>
            Request amount of margin used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Asset">
            <summary>
            Base asset used for margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Symbol">
            <summary>
            Symbol margin is placed on
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Time">
            <summary>
            Time of the margin change request
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMarginChangeHistoryResult.Type">
            <summary>
            Direction of the margin change request
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMultiAssetMode">
            <summary>
            Multi asset mode info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMultiAssetMode.MultiAssetMode">
            <summary>
            Is multi assets mode enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMultipleOrderCancelResult">
            <summary>
            Extension to be able to deserialize an error response as well
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesMultipleOrderPlaceResult">
            <summary>
            Extension to be able to deserialize an error response as well
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder">
            <summary>
            The result of query order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.AvgPrice">
            <summary>
            The average price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.QuantityFilled">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.QuoteQuantityFilled">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.LastFilledQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ClosePosition">
            <summary>
            if Close-All
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.OriginalType">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.CallbackRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.CreatedTime">
            <summary>
            The time the order was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.PositionSide">
            <summary>
            The position side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesOrder.PriceProtect">
            <summary>
            Price protect
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.OrderId">
            <summary>
            The order id as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.AvgPrice">
            <summary>
            The average price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.QuantityFilled">
            <summary>
            Cumulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.QuoteQuantityFilled">
            <summary>
            Cumulative amount in quote currency
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.LastFilledQuantity">
            <summary>
            The quantity of the order that is executed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ReduceOnly">
            <summary>
            Reduce Only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.PositionSide">
            <summary>
            The position side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Status">
            <summary>
            The current status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.StopPrice">
            <summary>
            Stop price for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ClosePosition">
            <summary>
            If order is for closing a position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.TimeInForce">
            <summary>
            For what time the order lasts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.OriginalType">
            <summary>
            The original type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.ActivatePrice">
            <summary>
            Activation price, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.PriceRate">
            <summary>
            Callback rate, only return with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.UpdateTime">
            <summary>
            The time the order was updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.WorkingType">
            <summary>
            The working type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPlacedOrder.PriceProtect">
            <summary>
            Price protect
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult">
            <summary>
            Result of the requested margin amount change
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Amount">
            <summary>
            New margin amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Code">
            <summary>
            Request response code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.MaxNotionalValue">
            <summary>
            Maximum margin value
            NOTE: string type, because the value van be 'inf' (infinite)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMarginResult.Type">
            <summary>
            Direction of the requested margin change
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMode">
            <summary>
            User's position mode
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesPositionMode.PositionMode">
            <summary>
            true": Hedge Mode mode; "false": One-way Mode
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesQuantileEstimation">
            <summary>
            Quantile estimation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesQuantileEstimation.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesQuantileEstimation.AdlQuantile">
            <summary>
            Quantile
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAdlQuantile">
            <summary>
            Quantile info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAdlQuantile.Long">
            <summary>
            Long position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAdlQuantile.Short">
            <summary>
            Short position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesAdlQuantile.Hedge">
            <summary>
            Hedge
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.Buyer">
            <summary>
            Is buyer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.Commission">
            <summary>
            Paid commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.CommissionAsset">
            <summary>
            Asset the commission is paid in
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.Maker">
            <summary>
            Is maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.RealizedPnl">
            <summary>
            Realized pnl
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTrade.TradeTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesUsdtTrade">
            <summary>
            Trade details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesUsdtTrade.QuoteQuantity">
            <summary>
            Quote quantity
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinTrade">
            <summary>
            Trade details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinTrade.Pair">
            <summary>
            The pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesCoinTrade.BaseQuantity">
            <summary>
            Base quantity
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatus">
            <summary>
            Trading rules status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatus.Indicators">
            <summary>
            The trading rule indicators
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatus.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatusIndicator">
            <summary>
            Indicator details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatusIndicator.IsLocked">
            <summary>
            Locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatusIndicator.PlannedRecoveryTime">
            <summary>
            Planned time when indicator is unlocked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatusIndicator.Indicator">
            <summary>
            The indicator name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatusIndicator.Value">
            <summary>
            Current value of the indicator
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinanceFuturesTradingStatusIndicator.TriggerValue">
            <summary>
            The trigger value of the indicator
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinancePositionBase">
            <summary>
            Base position info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionBase.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionBase.EntryPrice">
            <summary>
            Entry price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionBase.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionBase.UnrealizedPnl">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionBase.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoBase">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoBase.InitialMargin">
            <summary>
            Initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoBase.MaintMargin">
            <summary>
            Maint margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoBase.PositionInitialMargin">
            <summary>
            Position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoBase.OpenOrderInitialMargin">
            <summary>
            Open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoBase.Isolated">
            <summary>
            Isolated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoBase.Quantity">
            <summary>
            Position amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoBase.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoUsdt">
            <summary>
            Usdt position info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoUsdt.MaxNotional">
            <summary>
            Max notional
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoCoin">
            <summary>
            Coin position info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionInfoCoin.MaxQuantity">
            <summary>
            Max quantity
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsBase">
            <summary>
            Base position details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsBase.MarginType">
            <summary>
            Margin type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsBase.IsAutoAddMargin">
            <summary>
            Is auto add margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsBase.IsolatedMargin">
            <summary>
            Isolated margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsBase.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsBase.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsBase.Quantity">
            <summary>
            Position amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsUsdt">
            <summary>
            Usdt position details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsUsdt.MaxNotional">
            <summary>
            Max notional
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsUsdt.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsCoin">
            <summary>
            Coin position info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.FuturesData.BinancePositionDetailsCoin.MaxQuantity">
            <summary>
            Max quantity
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBookPrice">
            <summary>
            Book price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBookPrice.Pair">
            <summary>
            Pair
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio">
            <summary>
            Buy Sell Volume Ratio Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio.BuySellRatio">
            <summary>
            buy/sell ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio.BuyVolume">
            <summary>
            buy volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio.SellVolume">
            <summary>
            sell volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBuySellVolumeRatio.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoin24HPrice">
            <summary>
            Price statistics of the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoin24HPrice.BaseVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoin24HPrice.QuoteVolume">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinKline">
            <summary>
            Candlestick information for symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinKline.BaseVolume">
            <inheritdoc/>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinKline.QuoteVolume">
            <inheritdoc/>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinKline.TakerBuyBaseVolume">
            <inheritdoc/>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinKline.TakerBuyQuoteVolume">
            <inheritdoc/>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterestHistory">
            <summary>
            Open Interest History info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterestHistory.Pair">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterestHistory.ContractType">
            <summary>
            Contract type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterestHistory.SumOpenInterest">
            <summary>
            Total open interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterestHistory.SumOpenInterestValue">
            <summary>
            Total open interest value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterestHistory.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfo">
            <summary>
            Index info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfo.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfo.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfo.Component">
            <summary>
            Component asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfo.BaseAssets">
            <summary>
            Base asset list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfoAsset">
            <summary>
            Composite index asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfoAsset.BaseAsset">
            <summary>
            Base asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfoAsset.QuoteAsset">
            <summary>
            Quote asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfoAsset.WeightInQuantity">
            <summary>
            Weight in quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCompositeIndexInfoAsset.WeightInPercentage">
            <summary>
            Weight in percentage
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo">
            <summary>
            Exchange info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.TimeZone">
            <summary>
            The timezone the server uses
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.ServerTime">
            <summary>
            The current server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.RateLimits">
            <summary>
            The rate limits used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesExchangeInfo.ExchangeFilters">
            <summary>
            Filters
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtExchangeInfo">
            <summary>
            Exchange info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtExchangeInfo.Symbols">
            <summary>
            All symbols supported
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtExchangeInfo.Assets">
            <summary>
            All assets
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinExchangeInfo">
            <summary>
            Exchange info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinExchangeInfo.Symbols">
            <summary>
            All symbols supported
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory">
            <summary>
            Funding rate information for Futures trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.FundingRate">
            <summary>
            The finding rate for the given symbol and time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesFundingRateHistory.FundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.LastQuantityFilled">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.QuantityFilled">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Type">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLiquidation.Time">
            <summary>
            Forced time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio">
            <summary>
            Long Short Ratio Info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.SymbolPair">
            <summary>
            The symbol or pair the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.LongShortRatio">
            <summary>
            long/short ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.LongAccount">
            <summary>
            longs percentage (in decimal form)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.ShortAccount">
            <summary>
            shorts percentage (in decimal form)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesLongShortRatio.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice">
            <summary>
            Mark Price and Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.MarkPrice">
            <summary>
            The current market price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.IndexPrice">
            <summary>
            The current index price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.FundingRate">
            <summary>
            The last funding rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.NextFundingTime">
            <summary>
            The time the funding rate is applied
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesMarkPrice.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinMarkPrice">
            <summary>
            Mark price for Coin-M future
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinMarkPrice.Pair">
            <summary>
            The pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinMarkPrice.EstimatedSettlePrice">
            <summary>
            Estimated settle price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest.OpenInterest">
            <summary>
            Open Interest info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterest.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterest.Pair">
            <summary>
            The pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinOpenInterest.ContractType">
            <summary>
            The contract type
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory">
            <summary>
            Open Interest History info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory.SumOpenInterest">
            <summary>
            Total open interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory.SumOpenInterestValue">
            <summary>
            Total open interest value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesOpenInterestHistory.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol">
            <summary>
            Information about a futures symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Filters">
            <summary>
            Filters for order on this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.ContractType">
            <summary>
            Contract type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaintMarginPercent">
            <summary>
            The maintenance margin percent
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PricePrecision">
            <summary>
            The price Precision
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuantityPrecision">
            <summary>
            The quantity precision
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.RequiredMarginPercent">
            <summary>
            The required margin percent
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.BaseAsset">
            <summary>
            The base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MarginAsset">
            <summary>
            Margin asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuoteAsset">
            <summary>
            The quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.BaseAssetPrecision">
            <summary>
            The precision of the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.QuoteAssetPrecision">
            <summary>
            The precision of the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.OrderTypes">
            <summary>
            Allowed order types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Name">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.Pair">
            <summary>
            Pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.DeliveryDate">
            <summary>
            Delivery Date
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.ListingDate">
            <summary>
            Delivery Date
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.TriggerProtect">
            <summary>
            Trigger protect
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.UnderlyingType">
            <summary>
            Currently Empty
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.LiquidationFee">
            <summary>
            Liquidation fee
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MarketTakeBound">
            <summary>
            The max price difference rate (from mark price) a market order can make
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.UnderlyingSupType">
            <summary>
            Currently Empty
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.TimeInForce">
            <summary>
            Allowed order time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PriceFilter">
            <summary>
            Filter for the max accuracy of the price for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.LotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MarketLotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol, specifically for market orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaxOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MaxAlgoOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.PricePercentFilter">
            <summary>
            Filter for the maximum deviation of the price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbol.MinNotionalFilter">
            <summary>
            Filter for the maximum deviation of the price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtSymbol">
            <summary>
            Information about a futures symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtSymbol.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtSymbol.SettlePlan">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinSymbol">
            <summary>
            Information about a futures symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinSymbol.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinSymbol.ContractSize">
            <summary>
            Contract size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesCoinSymbol.EqualQuantityPrecision">
            <summary>
            Equal quantity precision
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket">
            <summary>
            Notional and Leverage Brackets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket.Symbol">
            <summary>
            Symbol or pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolBracket.Brackets">
            <summary>
            Brackets
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket">
            <summary>
            Bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.Bracket">
            <summary>
            Bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.InitialLeverage">
            <summary>
            Max initial leverage for this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.Cap">
            <summary>
            Cap of this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.Floor">
            <summary>
            Floor of this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.MaintenanceMarginRatio">
            <summary>
            Maintenance ratio for this bracket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesBracket.MaintAmount">
            <summary>
            Auxiliary number for quick calculation 
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolFilter">
            <summary>
            A filter for order placed on a symbol. Can be either a <see cref="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter"/>, <see cref="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter"/>, <see cref="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter"/>
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesSymbolFilter.FilterType">
            <summary>
            The type of this filter
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter.MinPrice">
            <summary>
            The minimal price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter.MaxPrice">
            <summary>
            The max price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPriceFilter.TickSize">
            <summary>
            The tick size of the price. The price can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMarketLotSizeFilter">
            <summary>
            Market lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMarketLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMarketLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMarketLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxOrdersFilter">
             <summary>
            Max orders filter
             </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxOrdersFilter.MaxNumberOrders">
            <summary>
            The max number of orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter">
            <summary>
            Max algo orders filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter.MaxNumberAlgorithmicOrders">
            <summary>
            The max number of Algorithmic orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPercentPriceFilter">
            <summary>
            Price percentage filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPercentPriceFilter.MultiplierUp">
            <summary>
            The max factor the price can deviate up
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPercentPriceFilter.MultiplierDown">
            <summary>
            The max factor the price can deviate down
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolPercentPriceFilter.MultiplierDecimal">
            <summary>
            The amount of minutes the average price of trades is calculated over. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMinNotionalFilter">
            <summary>
            Min notional filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceSymbolMinNotionalFilter.MinNotional">
            <summary>
            The minimal total size of an order. This is calculated by Price * Quantity.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtAsset">
            <summary>
            Asset info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtAsset.Asset">
            <summary>
            Name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtAsset.MarginAvailable">
            <summary>
            Whether the asset can be used as margin in Multi-Assets mode
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtAsset.AutoAssetExchange">
            <summary>
            Auto-exchange threshold in Multi-Assets margin mode
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtKline">
            <summary>
            Candlestick information for symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtKline.BaseVolume">
            <inheritdoc/>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtKline.QuoteVolume">
            <inheritdoc/>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtKline.TakerBuyBaseVolume">
            <inheritdoc/>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketData.BinanceFuturesUsdtKline.TakerBuyQuoteVolume">
            <inheritdoc/>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamBookPrice">
            <summary>
            Futures book price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamBookPrice.TransactionTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamBookPrice.EventTime">
            <summary>
            The time the event happened
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKlineData">
            <summary>
            Wrapper for kline information for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKlineData.Symbol">
            <summary>
            The symbol the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKlineData.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline">
            <summary>
            The kline data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.OpenTime">
            <summary>
            The open time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.BaseVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.QuoteVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.Symbol">
            <summary>
            The symbol this candlestick is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.Interval">
            <summary>
            The interval of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.FirstTrade">
            <summary>
            The first trade id in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.LastTrade">
            <summary>
            The last trade id in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.Open">
            <summary>
            The open price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.Close">
            <summary>
            The close price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.High">
            <summary>
            The highest price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.Low">
            <summary>
            The lowest price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.TakerBuyBaseVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.TakerBuyQuoteVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.Final">
            <summary>
            Boolean indicating whether this candlestick is closed
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCoinKline.ToKline">
            <summary>
            Casts this object to a <see cref="T:Binance.Net.Objects.Spot.MarketData.BinanceSpotKline"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndex">
            <summary>
            Composite index info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndex.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndex.Price">
            <summary>
            The price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndex.Composition">
            <summary>
            Composition
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndexAsset">
            <summary>
            Composite index asset info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndexAsset.Asset">
            <summary>
            Base asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndexAsset.QuoteAsset">
            <summary>
            Quote asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndexAsset.WeightInQuantity">
            <summary>
            Weight in quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndexAsset.WeightInPercentage">
            <summary>
            Weight in percentage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndexAsset.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData">
            <summary>
            Wrapper for kline information for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData.Symbol">
            <summary>
            The symbol the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline">
            <summary>
            Index kline
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.CloseTime">
            <summary>
            Close time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Ignore1">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Interval">
            <summary>
            Kline interval
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Ignore2">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Ignore3">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Open">
            <summary>
            Open price of the kline
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Close">
            <summary>
            Close price of the kline
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.High">
            <summary>
            High price of the kline
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Low">
            <summary>
            Low price of the kline
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Ignore4">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.NumberOfBasicData">
            <summary>
            Number of basic data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Closed">
            <summary>
            Is the kline closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Ignore5">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Ignore6">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Ignore7">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexKline.Ignore8">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexPrice">
            <summary>
            Index price update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexPrice.Pair">
            <summary>
            The pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexPrice.IndexPrice">
            <summary>
            The index price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidationData">
            <summary>
            A event received by a Binance websocket
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidationData.Data">
            <summary>
            The data of the event
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Side">
            <summary>
            Liquidation Sided
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Type">
            <summary>
            Liquidation order type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.TimeInForce">
            <summary>
            Liquidation Time in Force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Quantity">
            <summary>
            Liquidation Original Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Price">
            <summary>
            Liquidation order price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.AveragePrice">
            <summary>
            Liquidation Average Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Status">
            <summary>
            Liquidation Order Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.LastQuantityFilled">
            <summary>
            Liquidation Last Filled Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.QuantityFilled">
            <summary>
            Liquidation Accumulated fill quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation.Time">
            <summary>
            Liquidation Trade Time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice">
            <summary>
            Mark price update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.MarkPrice">
            <summary>
            Mark Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.EstimatedSettlePrice">
            <summary>
            Estimated Settle Price, only useful in the last hour before the settlement starts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.FundingRate">
            <summary>
            Next Funding Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice.NextFundingTime">
            <summary>
            Next Funding Time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesUsdtStreamMarkPrice">
            <summary>
            Mark price update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesUsdtStreamMarkPrice.IndexPrice">
            <summary>
            Mark Price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesCoinStreamMarkPrice">
            <summary>
            Mark price update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesCoinStreamMarkPrice.EstimatedSettlePrice">
            <summary>
            Mark Price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Symbol">
            <summary>
            The symbol of the order book (only filled from stream updates)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.TransactionTime">
            <summary>
            The time the event happened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.FirstUpdateId">
            <summary>
            The ID of the first update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.LastUpdateIdStream">
            <summary>
            The ID of the last update Id in last stream
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Bids">
            <summary>
            The list of diff bids
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamOrderBookDepth.Asks">
            <summary>
            The list of diff asks
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdate">
            <summary>
            Account update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdate.UpdateData">
            <summary>
            The update data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdate.TransactionTime">
            <summary>
            Transaction time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdateData">
            <summary>
            Account update data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdateData.Reason">
            <summary>
            Account update reason type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdateData.Balances">
            <summary>
            Balances
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdateData.Positions">
            <summary>
            Positions
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.WalletBalance">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamBalance.CrossWalletBalance">
            <summary>
            The amount that is locked in a trade
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition">
            <summary>
            Information about an asset position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.Symbol">
            <summary>
            The symbol this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.Quantity">
            <summary>
            The amount of the position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.EntryPrice">
            <summary>
            The entry price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.RealizedPnl">
            <summary>
            The accumulated realized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.UnrealizedPnl">
            <summary>
            The Unrealized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.MarginType">
            <summary>
            The margin type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.IsolatedMargin">
            <summary>
            The isolated wallet (if isolated position)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamPosition.PositionSide">
            <summary>
            Position Side
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamConfigUpdate">
            <summary>
            Information about leverage of symbol changed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamConfigUpdate.LeverageUpdateData">
            <summary>
            Leverage Update data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamConfigUpdate.ConfigUpdateData">
            <summary>
            Position mode Update data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamConfigUpdate.TransactionTime">
            <summary>
            Transaction time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamLeverageUpdateData">
            <summary>
            Config update data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamLeverageUpdateData.Symbol">
            <summary>
            The symbol this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamLeverageUpdateData.Leverage">
            <summary>
            The symbol this leverage is for
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamConfigUpdateData">
            <summary>
            Position mode update data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamConfigUpdateData.PositionMode">
            <summary>
            Multi-Assets Mode
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate">
            <summary>
            Margin update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.CrossWalletBalance">
            <summary>
            Cross Wallet Balance. Only pushed with crossed position margin call
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate.Positions">
            <summary>
            Positions
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition">
            <summary>
            Update data about an margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition.PositionSide">
            <summary>
            Position Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition.PositionAmount">
            <summary>
            Position Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition.MarginType">
            <summary>
            Margin type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition.IsolatedWallet">
            <summary>
            Isolated Wallet (if isolated position)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition.MarkPrice">
            <summary>
            Mark Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition.UnrealizedPnl">
            <summary>
            Unrealized PnL
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginPosition.MaintMargin">
            <summary>
            Maintenance Margin Required
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate">
            <summary>
            Order update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.UpdateData">
            <summary>
            Update data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate.TransactionTime">
            <summary>
            Transaction time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData">
            <summary>
            Update data about an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.ClientOrderId">
            <summary>
            The new client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.TimeInForce">
            <summary>
            The timespan the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.AveragePrice">
            <summary>
            The average price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.StopPrice">
            <summary>
            The stop price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.ExecutionType">
            <summary>
            The execution type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.OrderId">
            <summary>
            The id of the order as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.QuantityOfLastFilledTrade">
            <summary>
            The quantity of the last filled trade of this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.AccumulatedQuantityOfFilledTrades">
            <summary>
            The quantity of all trades that were filled for this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.PriceLastFilledTrade">
            <summary>
            The price of the last filled trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.Commission">
            <summary>
            The commission payed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.CommissionAsset">
            <summary>
            The asset the commission was taken from
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.UpdateTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.TradeId">
            <summary>
            The trade id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.BidNotional">
            <summary>
            Bid Notional
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.AskNotional">
            <summary>
            Ask Notional
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.BuyerIsMaker">
            <summary>
            Whether the buyer is the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.IsReduce">
            <summary>
            Is this reduce only
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.StopPriceWorking">
            <summary>
            Stop price working type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.OriginalType">
            <summary>
            Original Order Type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.PositionSide">
            <summary>
            Position side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.PushedConditionalOrder">
            <summary>
            If Close-All, only pushed with conditional order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.ActivationPrice">
            <summary>
            Activation Price, only pushed with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.CallbackRate">
            <summary>
            Callback Rate, only pushed with TRAILING_STOP_MARKET order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdateData.RealizedProfit">
            <summary>
            Realized profit of the trade
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Other.BinanceAPIKeyPermissions">
            <summary>
            Permissions of the current API key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.IpRestrict">
            <summary>
            Whether the key is restricted to certain IP's or not
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.CreateTime">
            <summary>
            Creation time of the key
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.EnableWithdrawals">
            <summary>
            This option allows you to withdraw via API. You must apply the IP Access Restriction filter in order to enable withdrawals
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.PermitUniversalTransfer">
            <summary>
            This option authorizes this key to transfer funds between your master account and your sub account instantly
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.EnableInternalTransfer">
            <summary>
            Authorizes this key to be used for a dedicated universal transfer API to transfer multiple supported currencies. Each business's own transfer API rights are not affected by this authorization
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.EnableVanillaOptions">
            <summary>
            Authorizes this key to Vanilla options trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.EnableReading">
            <summary>
            Authorizes the reading of account info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.EnableFutures">
            <summary>
            Authorizes futures trading. API Key created before your futures account opened does not support futures API service
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.EnableMargin">
            <summary>
            Authorizes margin. This option can be adjusted after the Cross Margin account transfer is completed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.EnableSpotAndMarginTrading">
            <summary>
            Spot and margin trading allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceAPIKeyPermissions.TradingAuthorityExpirationTime">
            <summary>
            Expiration time for spot and margin trading permission
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Other.BinanceProduct">
            <summary>
            Info on a product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.Symbol">
            <summary>
            Name of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.Status">
            <summary>
            Status of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.BaseAsset">
            <summary>
            Name of the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.QuoteAsset">
            <summary>
            Name of the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.BaseAssetChar">
            <summary>
            Char of the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.QuoteAssetChar">
            <summary>
            Char of the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.BaseAssetName">
            <summary>
            Base asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.QuoteAssetName">
            <summary>
            Quote asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.Open">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.High">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.Low">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.Close">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.BaseVolume">
            <summary>
            Base volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Other.BinanceProduct.CirculatingSupply">
            <summary>
            Amount of coins in circulation
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Shared.Binance24HPriceBase">
            <summary>
            24 hour rolling window price data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.Symbol">
            <summary>
            The symbol the price is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.PriceChange">
            <summary>
            The actual price change in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.PriceChangePercent">
            <summary>
            The price change in percentage in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.WeightedAveragePrice">
            <summary>
            The weighted average price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.LastPrice">
            <summary>
            The most recent trade price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.OpenPrice">
            <summary>
            The open price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.HighPrice">
            <summary>
            The highest price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.LowPrice">
            <summary>
            The lowest price in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.BaseVolume">
            <summary>
            The base volume traded in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.QuoteVolume">
            <summary>
            The quote asset volume traded in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.OpenTime">
            <summary>
            Time at which this 24 hours opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.CloseTime">
            <summary>
            Time at which this 24 hours closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.FirstTradeId">
            <summary>
            The first trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.LastTradeId">
            <summary>
            The last trade ID in the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.Binance24HPriceBase.TotalTrades">
            <summary>
            The amount of trades made in the last 24 hours
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Shared.BinanceKlineBase">
            <summary>
            Candlestick information for symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.OpenTime">
            <summary>
            The time this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.Open">
            <summary>
            The price at which this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.High">
            <summary>
            The highest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.Low">
            <summary>
            The lowest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.Close">
            <summary>
            The price at which this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.BaseVolume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.QuoteVolume">
            <summary>
            The volume traded during this candlestick in the asset form
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.TakerBuyBaseVolume">
            <summary>
            Taker buy base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceKlineBase.TakerBuyQuoteVolume">
            <summary>
            Taker buy quote asset volume
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Shared.BinanceOrderBase">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.OrderId">
            <summary>
            The order id generated by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.OrderListId">
            <summary>
            Id of the order list this order belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.OriginalClientOrderId">
            <summary>
            Original order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.ClientOrderId">
            <summary>
            The order id as assigned by the client
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.Quantity">
            <summary>
            The original quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.QuantityFilled">
            <summary>
            The currently executed quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.QuoteQuantity">
            <summary>
            The original quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.TimeInForce">
            <summary>
            How long the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.StopPrice">
            <summary>
            The stop price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.IcebergQuantity">
            <summary>
            The iceberg quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.CreateTime">
            <summary>
            The time the order was submitted
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.UpdateTime">
            <summary>
            The time the order was last updated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.IsWorking">
            <summary>
            Is working
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.QuantityRemaining">
            <summary>
            Quantity which is still open to be filled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Shared.BinanceOrderBase.AverageFillPrice">
            <summary>
            The average price the order was filled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory">
            <summary>
            Adjust history
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory.CollateralCoin">
            <summary>
            Collateral coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory.PreCollateralRate">
            <summary>
            Pre adjustment rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory.AfterCollateralRate">
            <summary>
            After adjustment rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory.Direction">
            <summary>
            Direction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvHistory.AdjustTime">
            <summary>
            Time of adjustment
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvResult">
            <summary>
            Adjust result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvResult.CollateralCoin">
            <summary>
            Collateral coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvResult.LoanCoin">
            <summary>
            Loan coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvResult.Direction">
            <summary>
            The direction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvResult.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustLtvResult.Time">
            <summary>
            The time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustMaxAmounts">
            <summary>
            Max amounts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustMaxAmounts.MaxInAmount">
            <summary>
            The max in amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAdjustMaxAmounts.MaxOutAmount">
            <summary>
            The max out amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAfterAdjust">
            <summary>
            After adjustment rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralAfterAdjust.AfterCollateralRate">
            <summary>
            The rate after adjustment
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory">
            <summary>
            Borrow history
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.BorrowId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.ConfirmedTime">
            <summary>
            Time of confirmation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.CollateralRate">
            <summary>
            The collateral rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.LeftTotal">
            <summary>
            Total left
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.LeftPrincipal">
            <summary>
            Principal left
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.DeadLine">
            <summary>
            Dead line
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.CollateralCoin">
            <summary>
            Collateral coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.CollateralAmount">
            <summary>
            Collateral amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowHistory.Status">
            <summary>
            The status of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowResult">
            <summary>
            Borrow result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowResult.BorrowId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowResult.Coin">
            <summary>
            The coin borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowResult.CollateralCoin">
            <summary>
            The coin used for collateral
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowResult.Amount">
            <summary>
            The amount borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowResult.CollateralAmount">
            <summary>
            The collateral amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralBorrowResult.Timestamp">
            <summary>
            The timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralInformation">
            <summary>
            Collateral info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralInformation.LoanCoin">
            <summary>
            The loan coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralInformation.CollateralCoin">
            <summary>
            The collateral coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralInformation.Rate">
            <summary>
            Rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralInformation.MarginCallCollateralRate">
            <summary>
            Margin call collateral rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralInformation.LiquidationCollateralRate">
            <summary>
            Liquidation collateal rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralInformation.CurrentCollateralRate">
            <summary>
            Current collateral rate
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralLiquidationHistory">
            <summary>
            Liquidation history
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralLiquidationHistory.CollateralAmountForLiquidation">
            <summary>
            Amount for liquidation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralLiquidationHistory.CollateralCoin">
            <summary>
            Collateral coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralLiquidationHistory.ForceLiquidationStartTime">
            <summary>
            Start time of liquidation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralLiquidationHistory.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralLiquidationHistory.RestCollateralAmountAfterLiquidation">
            <summary>
            Rest collateral amount after liquidation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralLiquidationHistory.RestLoanAmount">
            <summary>
            Rest loan amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralLiquidationHistory.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory">
            <summary>
            Repay history
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory.RepayId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory.ConfirmedTime">
            <summary>
            Time of confirmation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory.UpdateTime">
            <summary>
            Time of last update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory.CollateralCoin">
            <summary>
            Collateral coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory.Amount">
            <summary>
            Collateral amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory.ReleasedCollateral">
            <summary>
            Released collateral amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayHistory.Status">
            <summary>
            The status of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayResult">
            <summary>
            Repay result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayResult.RepayId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayResult.Coin">
            <summary>
            The coin borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayResult.CollateralCoin">
            <summary>
            The coin used for collateral
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralRepayResult.Amount">
            <summary>
            The amount borrowed
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWallet">
            <summary>
            Cross colateral wallet info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWallet.TotalCrossCollateral">
            <summary>
            Total cross collateral
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWallet.TotalBorrowed">
            <summary>
            Total borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWallet.TotalInterest">
            <summary>
            Total interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWallet.InterestFreeLimit">
            <summary>
            Interest free limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWallet.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWallet.CrossCollaterals">
            <summary>
            Cross collaterals
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry">
            <summary>
            Cross collateral data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry.LoanCoin">
            <summary>
            Loan coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry.CollateralCoin">
            <summary>
            Collateral coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry.Locked">
            <summary>
            Amount locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry.LoanAmount">
            <summary>
            Loan amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry.CurrentCollateralRate">
            <summary>
            Current collateral rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry.InterestFreeLimitUsed">
            <summary>
            Used interest free limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry.PrincipalForInterest">
            <summary>
            Principal interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Futures.BinanceCrossCollateralWalletEntry.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol">
            <summary>
            Isolated margin symbol info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.Base">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.Quote">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.IsMarginTrade">
            <summary>
            Margin trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.IsBuyAllowed">
            <summary>
            Is buy allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginSymbol.IsSellAllowed">
            <summary>
            Is sell allowed
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer">
            <summary>
            Isolated margin transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.Amount">
            <summary>
            Amount of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.Asset">
            <summary>
            Transfer asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.Status">
            <summary>
            Status of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.Timestamp">
            <summary>
            Timestamp of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.From">
            <summary>
            From
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginTransfer.To">
            <summary>
            To
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.CreateIsolatedMarginAccountResult">
            <summary>
            Result of creating isolated margin account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.CreateIsolatedMarginAccountResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.CreateIsolatedMarginAccountResult.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount">
            <summary>
            Isolated margin account info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount.Assets">
            <summary>
            Account assets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount.TotalAssetOfBtc">
            <summary>
            Total btc asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount.TotalLiabilityOfBtc">
            <summary>
            Total liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccount.TotalNetAssetOfBtc">
            <summary>
            Total net asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol">
            <summary>
            Isolated margin account symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.BaseAsset">
            <summary>
            Base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.QuoteAsset">
            <summary>
            Quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.IsolatedCreated">
            <summary>
            Isolated created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.MarginLevel">
            <summary>
            The margin level
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.MarginLevelStatus">
            <summary>
            Margin level status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.MarginRatio">
            <summary>
            Margin ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.LiquidatePrice">
            <summary>
            Liquidate price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.LiquidateRate">
            <summary>
            Liquidate rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.TradeEnabled">
            <summary>
            If trading is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountSymbol.Enabled">
            <summary>
            Account is enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset">
            <summary>
            Isolated margin account asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.BorrowEnabled">
            <summary>
            If borrow is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Borrowed">
            <summary>
            Borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Free">
            <summary>
            Free
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.Locked">
            <summary>
            Locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.NetAsset">
            <summary>
            Net asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.NetAssetOfBtc">
            <summary>
            Net asset in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.RepayEnabled">
            <summary>
            Is repay enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.BinanceIsolatedMarginAccountAsset.TotalAsset">
            <summary>
            Total asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.IsolatedMarginData.IsolatedMarginAccountLimit">
            <summary>
            Enabled account limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.IsolatedMarginAccountLimit.EnabledAccount">
            <summary>
            Current enabled accounts
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.IsolatedMarginData.IsolatedMarginAccountLimit.MaxAccount">
            <summary>
            Max accounts
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition">
            <summary>
            Customized fixed project position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.CanTransfer">
            <summary>
            Can transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.CreateTimestamp">
            <summary>
            Create timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.InterestRate">
            <summary>
            Interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Lot">
            <summary>
            Lot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.PositionId">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Principal">
            <summary>
            Principal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.ProjectId">
            <summary>
            Project id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.ProjectName">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.PurchaseTime">
            <summary>
            Time of purchase
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.RedeemDate">
            <summary>
            Redeem date
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceCustomizedFixedProjectPosition.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition">
            <summary>
            Flexible product position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.AnnualInterestRate">
            <summary>
            Annual interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.AverageAnnualInterestRate">
            <summary>
            Average annual interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.CanRedeem">
            <summary>
            Can redeem
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.DailyInterestRate">
            <summary>
            Daily interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.FreeAmount">
            <summary>
            Amount free
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.FreezeAmount">
            <summary>
            Amount frozen
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.LockedAmount">
            <summary>
            Amount locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.ProductId">
            <summary>
            The product id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.ProductName">
            <summary>
            The product name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.RedeemingAmount">
            <summary>
            Redeeming amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.TodayPurchasedAmount">
            <summary>
            Amount purchased today
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.TotalAmount">
            <summary>
            Total amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceFlexibleProductPosition.TotalInterest">
            <summary>
            Total interest
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory">
            <summary>
            Interest record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.LendingType">
            <summary>
            Lending type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingInterestHistory.ProductName">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount">
            <summary>
            Lending account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalAmountInBTC">
            <summary>
            Total amount in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalAmountInUSDT">
            <summary>
            Total amount in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalFixedAmountInBTC">
            <summary>
            Total fixed amount in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalFixedAmountInUSDT">
            <summary>
            Total fixed amount in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalFlexibleInBTC">
            <summary>
            Total flexible in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.TotalFlexibleInUSDT">
            <summary>
            Total flexible in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingAccount.PositionAmounts">
            <summary>
            Position amounts
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount">
            <summary>
            Lending position amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount.Amount">
            <summary>
            Amount of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount.AmountInBTC">
            <summary>
            Amount in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount.AmountInUSDT">
            <summary>
            Amount in usdt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPositionAmount.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceLendingPurchaseResult">
            <summary>
            Purchase result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceLendingPurchaseResult.PurchaseId">
            <summary>
            The id of the purchase
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceProject">
            <summary>
            Binance project info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.DisplayPriority">
            <summary>
            Display priority
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.Duration">
            <summary>
            Duration
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.InterestPerLot">
            <summary>
            Interest per lot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.InterestRate">
            <summary>
            Interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.LotSize">
            <summary>
            Lot size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.LotsLowLimit">
            <summary>
            Lots low limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.LotsPurchased">
            <summary>
            Lots purchased
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.LotsUpLimit">
            <summary>
            Lots upper limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.MaxLotsPerUser">
            <summary>
            Max number of lots per user
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.NeedsKYC">
            <summary>
            Needs know your customer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.ProjectId">
            <summary>
            Project id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.ProjectName">
            <summary>
            Project name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceProject.WithAreaLimitation">
            <summary>
            Has area limitation
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinancePurchaseQuotaLeft">
            <summary>
            Purchase quota left
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseQuotaLeft.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseQuotaLeft.LeftQuota">
            <summary>
            The quota left
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord">
            <summary>
            Purchase record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.Amount">
            <summary>
            Amount purchased
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.CreateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.LendingType">
            <summary>
            Lending type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.ProductName">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.PurchaseId">
            <summary>
            Purchase id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinancePurchaseRecord.Status">
            <summary>
            Purchase status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft">
            <summary>
            Redemption quota left
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft.DailyQuota">
            <summary>
            Daily quota
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft.LeftQuota">
            <summary>
            Left quota
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionQuotaLeft.MinimalRedemptionAmount">
            <summary>
            Minimal redemption amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord">
            <summary>
            Redemption record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Amount">
            <summary>
            Amount purchased
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.CreateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Type">
            <summary>
            Redeem type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.ProductName">
            <summary>
            Name of the product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Principal">
            <summary>
            Principal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceRedemptionRecord.Status">
            <summary>
            Purchase status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct">
            <summary>
            Savings product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.AverageAnnualInterestRate">
            <summary>
            Average annual interest rage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.CanPurchase">
            <summary>
            Can purchase
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.CanRedeem">
            <summary>
            Can redeem
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.DailyInterestPerThousand">
            <summary>
            Daily interest per thousand
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.Featured">
            <summary>
            Is featured
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.MinimalPurchaseAmount">
            <summary>
            Minimal amount to purchase
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.ProductId">
            <summary>
            Product id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.PurchasedAmount">
            <summary>
            Purchased amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.Status">
            <summary>
            Status of the product
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.UpperLimit">
            <summary>
            Upper limit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.LendingData.BinanceSavingsProduct.UpperLimitPerUser">
            <summary>
            Upper limit per user
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation">
            <summary>
            Forced liquidation info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.AveragePrice">
            <summary>
            Average price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.ExecutedQuantity">
            <summary>
            The executed quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Quantity">
            <summary>
            Total quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceForcedLiquidation.IsIsolated">
            <summary>
            Is isolated margin
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory">
            <summary>
            Interest history entry info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestAmount">
            <summary>
            The amount of interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestAccuredTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.InterestRate">
            <summary>
            Interest rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Principal">
            <summary>
            Principal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestHistory.Type">
            <summary>
            Type of interest
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceInterestRateHistory">
            <summary>
            Interest rate history
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestRateHistory.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestRateHistory.DailyInterest">
            <summary>
            The daily interest
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestRateHistory.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceInterestRateHistory.VipLevel">
            <summary>
            Vip level
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount">
            <summary>
            Information about margin account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.BorrowEnabled">
            <summary>
            Boolean indicating if this account can borrow
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TradeEnabled">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TransferEnabled">
            <summary>
            Boolean indicating if this account can transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.MarginLevel">
            <summary>
            Aggregate level of margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalAssetOfBtc">
            <summary>
            Aggregate total balance as BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalLiabilityOfBtc">
            <summary>
            Aggregate total liability balance of BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.TotalNetAssetOfBtc">
            <summary>
            Aggregate total available net balance of BTC
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccount.Balances">
            <summary>
            Balance list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Borrowed">
            <summary>
            The amount that was borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Interest">
            <summary>
            Commission to need pay by borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.NetAsset">
            <summary>
            The amount that is netAsset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshot">
            <summary>
            Margin account snapshot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshot.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshot.Type">
            <summary>
            Account type the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshot.Data">
            <summary>
            Snapshot data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData">
            <summary>
            Margin snapshot data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.MarginLevel">
            <summary>
            The margin level
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.TotalAssetOfBtc">
            <summary>
            Total BTC asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.TotalLiabilityOfBtc">
            <summary>
            Total BTC liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.TotalNetAssetOfBtc">
            <summary>
            Total net BTC asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAccountSnapshotData.UserAssets">
            <summary>
            Assets
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAmount">
            <summary>
            The result amount of getting maxBorrowable or maxTransferable 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAmount.Amount">
            <summary>
            The amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAmount.BorrowLimit">
            <summary>
            The borrow limit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset">
            <summary>
            Margin asset info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.FullName">
            <summary>
            Full name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.Name">
            <summary>
            Short name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.IsBorrowable">
            <summary>
            Is borrowable
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.IsMortgageable">
            <summary>
            Is mortgageable
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.MinimalBorrowAmount">
            <summary>
            Minimal amount which can be borrowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginAsset.MinimalRepayAmount">
            <summary>
            Minimal amount which can be repaid
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginOrderOcoList">
            <summary>
            Oco info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginOrderOcoList.MarginBuyBorrowAmount">
            <summary>
            Margin buy borrow amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginOrderOcoList.MarginBuyBorrowAsset">
            <summary>
            Margin buy borrow asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginOrderOcoList.IsIsolated">
            <summary>
            Is isolated margin
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair">
            <summary>
            Margin pair info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.BaseAsset">
            <summary>
            Base asset of the pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.QuoteAsset">
            <summary>
            Quote asset of the pair
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsBuyAllowed">
            <summary>
            Is buying allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsSellAllowed">
            <summary>
            Is selling allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.IsMarginTrade">
            <summary>
            Is margin trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPair.Symbol">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceMarginPriceIndex">
            <summary>
            Price index for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPriceIndex.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPriceIndex.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceMarginPriceIndex.CalculationTime">
            <summary>
            Time of calculation
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceTransaction">
            <summary>
            The result of transferring
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransaction.TransactionId">
            <summary>
            The Transaction id as assigned by Binance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceLoan">
            <summary>
            Loan info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Asset">
            <summary>
            The asset of the loan
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.TransactionId">
            <summary>
            The transaction id of the loan
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Principal">
            <summary>
            Principal repaid 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Time">
            <summary>
            Time of repay completed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceLoan.Status">
            <summary>
            The status of the loan
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceRepay">
            <summary>
            Repay info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Asset">
            <summary>
            The asset of the repay
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.TransactionId">
            <summary>
            The transaction id of the repay
            </summary>`
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Amount">
            <summary>
            Total amount repaid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Interest">
            <summary>
            Interest repaid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Principal">
            <summary>
            Principal repaid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Time">
            <summary>
            Time of repay completed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceRepay.Status">
            <summary>
            The status of the repay
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory">
            <summary>
            Transfer history entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Amount">
            <summary>
            Amount of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Asset">
            <summary>
            Asset of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Status">
            <summary>
            Status of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Timestamp">
            <summary>
            Timestamp of the transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarginData.BinanceTransferHistory.Direction">
            <summary>
            Direction of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.Binance24HPrice">
            <summary>
            Price statistics of the last 24 hours
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.PrevDayClosePrice">
            <summary>
            The close price 24 hours ago
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.BaseVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.Binance24HPrice.QuoteVolume">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade">
            <summary>
            Compressed aggregated trade information. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.Price">
            <summary>
            The price of trades in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.Quantity">
            <summary>
            The total quantity of trades in the aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.TradeTime">
            <summary>
            The timestamp of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAggregatedTrade.WasBestPriceMatch">
            <summary>
            Whether the trade was matched at the best price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice">
            <summary>
            Current average price details for a symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice.Minutes">
            <summary>
            Duration in minutes
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceAveragePrice.Price">
            <summary>
            The average price
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice">
            <summary>
            Information about the best price/quantity available for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.Symbol">
            <summary>
            The symbol the information is about
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestBidPrice">
            <summary>
            The highest bid price for the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestBidQuantity">
            <summary>
            The quantity of the highest bid price currently in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestAskPrice">
            <summary>
            The lowest ask price for the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.BestAskQuantity">
            <summary>
            The quantity of the lowest ask price currently in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceBookPrice.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook">
            <summary>
            Stream order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.FirstUpdateId">
            <summary>
            The id of this update, can be synced with BinanceClient.Spot.GetOrderBook to update the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.LastUpdateIdStream">
            <summary>
            Setter for last update id, need for Json.Net
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.EventTime">
            <summary>
            Event time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.BidsStream">
            <summary>
            Setter for bids (needed forJson.Net)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceEventOrderBook.AsksStream">
            <summary>
            Setter for asks (needed forJson.Net)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo">
            <summary>
            Exchange info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.TimeZone">
            <summary>
            The timezone the server uses
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.ServerTime">
            <summary>
            The current server time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.RateLimits">
            <summary>
            The rate limits used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.Symbols">
            <summary>
            All symbols supported
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceExchangeInfo.ExchangeFilters">
            <summary>
            Filters
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceMarkIndexKline">
            <summary>
            Kline for mark or index price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceMarkIndexKline.OpenTime">
            <summary>
            The time this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceMarkIndexKline.Open">
            <summary>
            The price at which this candlestick opened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceMarkIndexKline.High">
            <summary>
            The highest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceMarkIndexKline.Low">
            <summary>
            The lowest price in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceMarkIndexKline.Close">
            <summary>
            The price at which this candlestick closed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceMarkIndexKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceMarkIndexKline.BasicDataCount">
            <summary>
            Number of basic data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook">
            <summary>
            The order book for a asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Symbol">
            <summary>
            The symbol of the order book 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.LastUpdateId">
            <summary>
            The ID of the last update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Bids">
            <summary>
            The list of bids
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceOrderBook.Asks">
            <summary>
            The list of asks
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinancePrice">
            <summary>
            The price of a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinancePrice.Symbol">
            <summary>
            The symbol the price is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinancePrice.Price">
            <summary>
            The price of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinancePrice.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceFuturesCoinPrice">
            <summary>
            Futures-Coin price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceFuturesCoinPrice.Pair">
            <summary>
            Name of the pair
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade">
            <summary>
            Recent trade info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.OrderId">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.BaseQuantity">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.QuoteQuantity">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.TradeTime">
            <summary>
            The timestamp of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.BuyerIsMaker">
            <summary>
            Whether the buyer is maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTrade.IsBestMatch">
            <summary>
            Whether the trade was made at the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceRecentTradeQuote">
            <summary>
            Recent trade with quote quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTradeQuote.QuoteQuantity">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTradeQuote.BaseQuantity">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceRecentTradeBase">
            <summary>
            Recent trade with base quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTradeBase.QuoteQuantity">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceRecentTradeBase.BaseQuantity">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSpotKline">
            <summary>
            Candlestick information for symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSpotKline.BaseVolume">
            <summary>
            The volume traded during this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSpotKline.QuoteVolume">
            <summary>
            The volume traded during this candlestick in the asset form
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSpotKline.TakerBuyBaseVolume">
            <summary>
            Taker buy base asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSpotKline.TakerBuyQuoteVolume">
            <summary>
            Taker buy quote asset volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSpotKline.Ignore">
            <summary>
            Ignore
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbol">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Name">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Status">
            <summary>
            The status of the symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseAsset">
            <summary>
            The base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseAssetPrecision">
            <summary>
            The precision of the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteAsset">
            <summary>
            The quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteAssetPrecision">
            <summary>
            The precision of the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.OrderTypes">
            <summary>
            Allowed order types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IceBergAllowed">
            <summary>
            Ice berg orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IsSpotTradingAllowed">
            <summary>
            Spot trading orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IsMarginTradingAllowed">
            <summary>
            Margin trading orders allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.OCOAllowed">
            <summary>
            If OCO(One Cancels Other) orders are allowed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteOrderQuantityMarketAllowed">
            <summary>
            Whether or not it is allowed to specify the quantity of a market order in the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.BaseCommissionPrecision">
            <summary>
            The precision of the base asset commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.QuoteCommissionPrecision">
            <summary>
            The precision of the quote asset commission
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Permissions">
            <summary>
            Permissions types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.Filters">
            <summary>
            Filters for order on this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.IceBergPartsFilter">
            <summary>
            Filter for max amount of iceberg parts for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.LotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MarketLotSizeFilter">
            <summary>
            Filter for max accuracy of the quantity for this symbol, specifically for market orders
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxOrdersFilter">
            <summary>
            Filter for max number of orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxAlgorithmicOrdersFilter">
            <summary>
            Filter for max algorithmic orders for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MinNotionalFilter">
            <summary>
            Filter for the minimal size of an order for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.PriceFilter">
            <summary>
            Filter for the max accuracy of the price for this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.PricePercentFilter">
            <summary>
            Filter for the maximum deviation of the price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbol.MaxPositionFilter">
            <summary>
            Filter for the maximum position on a symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolFilter">
            <summary>
            A filter for order placed on a symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolFilter.FilterType">
            <summary>
            The type of this filter
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPriceFilter">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPriceFilter.MinPrice">
            <summary>
            The minimal price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPriceFilter.MaxPrice">
            <summary>
            The max price the order can be for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPriceFilter.TickSize">
            <summary>
            The tick size of the price. The price can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPercentPriceFilter">
            <summary>
            Price percentage filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPercentPriceFilter.MultiplierUp">
            <summary>
            The max factor the price can deviate up
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPercentPriceFilter.MultiplierDown">
            <summary>
            The max factor the price can deviate down
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolPercentPriceFilter.AveragePriceMinutes">
            <summary>
            The amount of minutes the average price of trades is calculated over. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolLotSizeFilter">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMarketLotSizeFilter">
            <summary>
            Market lot size filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMarketLotSizeFilter.MinQuantity">
            <summary>
            The minimal quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMarketLotSizeFilter.MaxQuantity">
            <summary>
            The maximum quantity of an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMarketLotSizeFilter.StepSize">
            <summary>
            The tick size of the quantity. The quantity can not have more precision as this and can only be incremented in steps of this.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMinNotionalFilter">
            <summary>
            Min notional filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMinNotionalFilter.MinNotional">
            <summary>
            The minimal total size of an order. This is calculated by Price * Quantity.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMinNotionalFilter.ApplyToMarketOrders">
            <summary>
            Whether or not this filter is applied to market orders. If so the average trade price is used.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMinNotionalFilter.AveragePriceMinutes">
            <summary>
            The amount of minutes the average price of trades is calculated over for market orders. 0 means the last price is used
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxOrdersFilter">
             <summary>
            Max orders filter
             </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxOrdersFilter.MaxNumberOrders">
            <summary>
            The max number of orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter">
            <summary>
            Max algo orders filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxAlgorithmicOrdersFilter.MaxNumberAlgorithmicOrders">
            <summary>
            The max number of Algorithmic orders for this symbol
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolIcebergPartsFilter">
            <summary>
            Max iceberg parts filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolIcebergPartsFilter.Limit">
            <summary>
            The max parts of an iceberg order for this symbol.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxPositionFilter">
            <summary>
            Max position filter
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketData.BinanceSymbolMaxPositionFilter.MaxPosition">
            <summary>
            The MaxPosition filter defines the allowed maximum position an account can have on the base asset of a symbol.
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade">
            <summary>
            Aggregated information about trades for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Symbol">
            <summary>
            The symbol the trade was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.AggregateTradeId">
            <summary>
            The id of this aggregated trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Price">
            <summary>
            The price of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Quantity">
            <summary>
            The combined quantity of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.FirstTradeId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.LastTradeId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.TradeTime">
            <summary>
            The time of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade.Ignore">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice">
            <summary>
            Book tick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.UpdateId">
            <summary>
            Update id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestBidPrice">
            <summary>
            Price of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestBidQuantity">
            <summary>
            Quantity of the best bid
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestAskPrice">
            <summary>
            Price of the best ask
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice.BestAskQuantity">
            <summary>
            Quantity of the best ask
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData">
            <summary>
            Wrapper for kline information for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData.Symbol">
            <summary>
            The symbol the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline">
            <summary>
            The kline data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.OpenTime">
            <summary>
            The open time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.BaseVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.CloseTime">
            <summary>
            The close time of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.QuoteVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Symbol">
            <summary>
            The symbol this candlestick is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Interval">
            <summary>
            The interval of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.FirstTrade">
            <summary>
            The first trade id in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.LastTrade">
            <summary>
            The last trade id in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Open">
            <summary>
            The open price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Close">
            <summary>
            The close price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.High">
            <summary>
            The highest price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Low">
            <summary>
            The lowest price of this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TradeCount">
            <summary>
            The amount of trades in this candlestick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TakerBuyBaseVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.TakerBuyQuoteVolume">
            <inheritdoc />
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.Final">
            <summary>
            Boolean indicating whether this candlestick is closed
            </summary>
        </member>
        <member name="M:Binance.Net.Objects.Spot.MarketStream.BinanceStreamKline.ToKline">
            <summary>
            Casts this object to a <see cref="T:Binance.Net.Objects.Spot.MarketData.BinanceSpotKline"/> object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTickBase">
            <summary>
            MiniTick info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTickBase.Symbol">
            <summary>
            The symbol this data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTickBase.LastPrice">
            <summary>
            The current day close price. This is the latest price for this symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTickBase.OpenPrice">
            <summary>
            Todays open price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTickBase.HighPrice">
            <summary>
            Todays high price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTickBase.LowPrice">
            <summary>
            Todays low price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTickBase.BaseVolume">
            <summary>
            Total traded volume
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTickBase.QuoteVolume">
            <summary>
            Total traded quote volume
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick">
            <summary>
            Stream mini tick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.BaseVolume">
            <inheritdoc/>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamMiniTick.QuoteVolume">
            <inheritdoc/>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamCoinMiniTick">
            <summary>
            Stream mini tick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamCoinMiniTick.BaseVolume">
            <inheritdoc/>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamCoinMiniTick.QuoteVolume">
            <inheritdoc/>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase">
            <summary>
            Tick info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.Symbol">
            <summary>
            The symbol this data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.PriceChange">
            <summary>
            The price change of this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.PriceChangePercent">
            <summary>
            The price change percentage of this symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.WeightedAveragePrice">
            <summary>
            The weighted average
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.PrevDayClosePrice">
            <summary>
            The close price of the previous day
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.LastPrice">
            <summary>
            The current day close price. This is the latest price for this symbol.
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.LastQuantity">
            <summary>
            The most recent trade quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.BidPrice">
            <summary>
            The best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.BidQuantity">
            <summary>
            The size of the best bid price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.AskPrice">
            <summary>
            The best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.AskQuantity">
            <summary>
            The size of the best ask price in the order book
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.OpenPrice">
            <summary>
            Todays open price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.HighPrice">
            <summary>
            Todays high price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.LowPrice">
            <summary>
            Todays low price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.BaseVolume">
            <summary>
            Total traded volume in the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.QuoteVolume">
            <summary>
            Total traded volume in the quote asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.FirstTradeId">
            <summary>
            The first trade id of today
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.LastTradeId">
            <summary>
            The last trade id of today
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.TotalTrades">
            <summary>
            The total trades of id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.OpenTime">
            <summary>
            The open time of these stats
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTickBase.CloseTime">
            <summary>
            The close time of these stats
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick">
            <summary>
            Stream tick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.BaseVolume">
            <summary>
            Total traded volume in the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTick.QuoteVolume">
            <summary>
            Total traded volume in the quote asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamCoinTick">
            <summary>
            Stream tick
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamCoinTick.BaseVolume">
            <summary>
            Total traded volume in the base asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamCoinTick.QuoteVolume">
            <summary>
            Total traded volume in the quote asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade">
            <summary>
            Aggregated information about trades for a symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Symbol">
            <summary>
            The symbol the trade was for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.OrderId">
            <summary>
            The id of this aggregated trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Price">
            <summary>
            The price of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.Quantity">
            <summary>
            The combined quantity of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.BuyerOrderId">
            <summary>
            The first trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.SellerOrderId">
            <summary>
            The last trade id in this aggregation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.TradeTime">
            <summary>
            The time of the trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.BuyerIsMaker">
            <summary>
            Whether the buyer was the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade.IsBestMatch">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetails">
            <summary>
            Resale list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetails.TotalNum">
            <summary>
            Total number of results
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetails.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetails.ProfitTransferDetails">
            <summary>
            Transfer details
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetailsItem">
            <summary>
            Resale item
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetailsItem.PoolUserName">
            <summary>
            From user
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetailsItem.ToPoolUserName">
            <summary>
            To user
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetailsItem.AlgoName">
            <summary>
            Algorithm
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetailsItem.Hashrate">
            <summary>
            Hash rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetailsItem.Day">
            <summary>
            Start day
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetailsItem.Coin">
            <summary>
            Coin name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleDetailsItem.Amount">
            <summary>
            Transferred income
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleList">
            <summary>
            Resale list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleList.TotalNum">
            <summary>
            Total number of results
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleList.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleList.AccountProfits">
            <summary>
            Revenue items
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem">
            <summary>
            Resale item
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem.ConfigId">
            <summary>
            Mining id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem.PoolUserName">
            <summary>
            From user
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem.ToPoolUserName">
            <summary>
            To user
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem.AlgoName">
            <summary>
            Algorithm
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem.Hashrate">
            <summary>
            Hash rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem.StartDay">
            <summary>
            Start day
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem.EndDay">
            <summary>
            End day
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashrateResaleItem.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMinerList">
            <summary>
            Miner list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerList.TotalNum">
            <summary>
            Total number of entries
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerList.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerList.WorkerDatas">
            <summary>
            Worker data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo">
            <summary>
            Miner details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.WorkerId">
            <summary>
            Worker id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.WorkerName">
            <summary>
            Worker name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.HashRate">
            <summary>
            Hash rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.DayHashRate">
            <summary>
            Day hash rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.RejectRate">
            <summary>
            Reject rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerInfo.LastShareTime">
            <summary>
            Last share time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMinerDetails">
            <summary>
            Miner details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerDetails.WorkerName">
            <summary>
            Name of the worker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerDetails.Type">
            <summary>
            Data type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMinerDetails.HashRateDatas">
            <summary>
            Hash rate data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceHashRate">
            <summary>
            Hash rate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashRate.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashRate.HashRate">
            <summary>
            Hashrate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceHashRate.Reject">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMiningAccount">
            <summary>
            Mining account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAccount.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAccount.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAccount.Hashrates">
            <summary>
            Hash rates
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm">
            <summary>
            Mining coin info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm.AlgorithmName">
            <summary>
            The name of the algorithm
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm.AlgorithmId">
            <summary>
            The id of the algorithm
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm.PoolIndex">
            <summary>
            The pool index
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningAlgorithm.Unit">
            <summary>
            The unit of measurement
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin">
            <summary>
            Mining coin info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.CoinName">
            <summary>
            The name of the coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.CoinId">
            <summary>
            The id of the coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.PoolIndex">
            <summary>
            The pool index
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.AlgorithmId">
            <summary>
            Algorithm id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningCoin.AlgorithmName">
            <summary>
            Algorithm name
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic">
            <summary>
            Mining statistics
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.FifteenMinuteHashRate">
            <summary>
            Hashrate last fifteen minutes
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.DayHashRate">
            <summary>
            Day hashrate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.ValidShares">
            <summary>
            Valid shares
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.InvalidShares">
            <summary>
            Invalid shares
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.ProfitToday">
            <summary>
            Todays profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.ProfitYesterday">
            <summary>
            Yesterdays profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.UserName">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.Unit">
            <summary>
            Hashrate unit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceMiningStatistic.Algorithm">
            <summary>
            Algorithm
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueList">
            <summary>
            Revenue list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueList.TotalNum">
            <summary>
            Total number of results
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueList.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueList.AccountProfits">
            <summary>
            Revenue items
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueItem">
            <summary>
            Revenue
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueItem.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueItem.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueItem.Type">
            <summary>
            Earning type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueItem.ProfitAmount">
            <summary>
            Profit amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceOtherRevenueItem.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceRevenueList">
            <summary>
            Revenue list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueList.TotalNum">
            <summary>
            Total number of results
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueList.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueList.AccountProfits">
            <summary>
            Revenue items
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem">
            <summary>
            Revenue
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.Time">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.Coin">
            <summary>
            Coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.Type">
            <summary>
            Earning type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.DayHashRate">
            <summary>
            Day hashrate
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.ProfitAmount">
            <summary>
            Profit amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.HashTransfer">
            <summary>
            Hash transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.TransferAmount">
            <summary>
            Transfer amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.Mining.BinanceRevenueItem.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.MakerCommission">
            <summary>
            Commission percentage to pay when making trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.TakerCommission">
            <summary>
            Commission percentage to pay when taking trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.BuyerCommission">
            <summary>
            Commission percentage to buy when buying
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.SellerCommission">
            <summary>
            Commission percentage to buy when selling
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanTrade">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanWithdraw">
            <summary>
            Boolean indicating if this account can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.CanDeposit">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.UpdateTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.AccountType">
            <summary>
            The type of account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.Permissions">
            <summary>
            Permissions types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceAccountInfo.Balances">
            <summary>
            List of assets with their current balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceBnbBurnStatus">
            <summary>
            Bnb burn status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBnbBurnStatus.SpotBnbBurn">
            <summary>
            If spot trading BNB burn is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceBnbBurnStatus.InterestBnbBurn">
            <summary>
            If margin interest BNB burn is enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceCanceledOrder">
            <summary>
            Information about a canceled order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceCancelledId">
            <summary>
            Ids of a canceled order, either OCO or normal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCancelledId.Id">
            <summary>
            Id of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCancelledId.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceCancelledId.OcoOrder">
            <summary>
            Whether or not it is an OCO order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshot">
            <summary>
            Snapshot data of a futures account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshot.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshot.Type">
            <summary>
            Account type the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshot.Data">
            <summary>
            Snapshot data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshotData">
            <summary>
            Data of the snapshot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshotData.Assets">
            <summary>
            List of assets
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAccountSnapshotData.Positions">
            <summary>
            List of positions
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAsset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAsset.Asset">
            <summary>
            Name of the asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAsset.MarginBalance">
            <summary>
            Margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesAsset.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition">
            <summary>
            Position
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.EntryPrice">
            <summary>
            Entry price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.PositionAmt">
            <summary>
            PositionAmt
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceFuturesSnapshotPosition.UnrealizedProfit">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrder">
            <summary>
            Information regarding a specific order
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList">
            <summary>
            The result of placing a new OCO order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.OrderListId">
            <summary>
            The id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ContingencyType">
            <summary>
            The contingency type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListStatusType">
            <summary>
            The order list status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListOrderStatus">
            <summary>
            The order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.ListClientOrderId">
            <summary>
            The client id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.TransactionTime">
            <summary>
            The transaction time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.Symbol">
            <summary>
            The symbol of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.Orders">
            <summary>
            The order in this list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderOcoList.OrderReports">
            <summary>
            The order details
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderId">
            <summary>
            Order reference
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderId.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOcoOrder.CreateTime">
            <summary>
            The time the order was placed
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.TradeId">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Price">
            <summary>
            Price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Quantity">
            <summary>
            Quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.Commission">
            <summary>
            Commission paid over this trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceOrderTrade.CommissionAsset">
            <summary>
            The asset the commission is paid in
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder">
            <summary>
            The result of placing a new order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.CreateTime">
            <summary>
            The time the order was placed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.Fills">
            <summary>
            Fills for the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.MarginBuyBorrowAmount">
            <summary>
            Only present if a margin trade happened
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinancePlacedOrder.MarginBuyBorrowAsset">
            <summary>
            Only present if a margin trade happened
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshot">
            <summary>
            Snapshot data of a spot account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshot.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshot.Type">
            <summary>
            Account type the data is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshot.Data">
            <summary>
            Snapshot data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshotData">
            <summary>
            Data of the snapshot
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshotData.TotalAssetOfBtc">
            <summary>
            The total value of assets in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceSpotAccountSnapshotData.Balances">
            <summary>
            List of balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SpotData.BinanceTrade">
            <summary>
            Information about a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Symbol">
            <summary>
            The symbol the trade is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Id">
            <summary>
            The id of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.OrderId">
            <summary>
            The order id the trade belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.OrderListId">
            <summary>
            Id of the order list this order belongs to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Price">
            <summary>
            The price of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Quantity">
            <summary>
            The quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.QuoteQuantity">
            <summary>
            The quote quantity of the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.Commission">
            <summary>
            The commission paid for the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.CommissionAsset">
            <summary>
            The asset the commission is paid in
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.TradeTime">
            <summary>
            The time the trade was made
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsBuyer">
            <summary>
            Whether account was the buyer in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsMaker">
            <summary>
            Whether account was the maker in the trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SpotData.BinanceTrade.IsBestMatch">
            <summary>
            Whether trade was made with the best match
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount">
            <summary>
            Sub account details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.Email">
            <summary>
            The email associated with the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.IsFreeze">
            <summary>
            Is account frozen
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccount.CreateTime">
            <summary>
            The time the sub account was created
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountBlvt">
            <summary>
            Sub account details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountBlvt.Email">
            <summary>
            The email associated with the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountBlvt.EnableBlvt">
            <summary>
            Blvt enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit">
            <summary>
            Information about a deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.InsertTime">
            <summary>
            Time the deposit was added to Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.Amount">
            <summary>
            The amount deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.Coin">
            <summary>
            The coin deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.Address">
            <summary>
            The address of the deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDeposit.Status">
            <summary>
            The status of the deposit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress">
            <summary>
            Deposit address info for a sub-account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress.Address">
            <summary>
            The deposit address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress.Coin">
            <summary>
            Coin type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress.Tag">
            <summary>
            Tag for the deposit address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountDepositAddress.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountEmail">
            <summary>
            Sub account details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountEmail.Email">
            <summary>
            The email associated with the sub account
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails">
            <summary>
            Sub account futures details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.Email">
            <summary>
            Email of the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.Assets">
            <summary>
            List of asset details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.CanDeposit">
            <summary>
            Can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.CanTrade">
            <summary>
            Can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.CanWithdraw">
            <summary>
            Can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.FeeTier">
            <summary>
            Fee tier
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.MaxWithdrawAmount">
            <summary>
            Max amount which can be withdrawn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalMaintenanceMargin">
            <summary>
            Total maintenance margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalOpenOrderInitialMargin">
            <summary>
            Total open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalPositionInitialMargin">
            <summary>
            Total position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalUnrealizedProfit">
            <summary>
            Total unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.TotalWalletBalance">
            <summary>
            Total wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesDetails.UpdateTime">
            <summary>
            Time of the data
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset">
            <summary>
            Sub account future asset details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.InitialMargin">
            <summary>
            Initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.MaintenanceMargin">
            <summary>
            Maintenance margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.MarginBalance">
            <summary>
            Margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.MaxWithdrawAmount">
            <summary>
            Max amount which can be withdrawn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.OpenOrderInitialMargin">
            <summary>
            Open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.PositionInitialMargin">
            <summary>
            Position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.UnrealizedProfit">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesAsset.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesEnabled">
            <summary>
            Sub account futures trading enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesEnabled.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesEnabled.IsFuturesEnabled">
            <summary>
            Whether futures trading is enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk">
            <summary>
            Sub account position risk
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.EntryPrice">
            <summary>
            The entry price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.MaxNotional">
            <summary>
            Max notional
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.PositionAmount">
            <summary>
            Position amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesPositionRisk.UnrealizedProfit">
            <summary>
            Unrealized profit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails">
            <summary>
            Sub account margin trade details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.MarginLevel">
            <summary>
            Margin level
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.TotalAssetOfBtc">
            <summary>
            Total asset in btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.TotalLiabilityOfBtc">
            <summary>
            Total liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.TotalNetAssetOfBtc">
            <summary>
            Total net asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.MarginTradeCoeff">
            <summary>
            Trade details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginDetails.MarginUserAssets">
            <summary>
            Asset list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceMarginTradeCoeff">
            <summary>
            Margin trade detail
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceMarginTradeCoeff.ForceLiquidationBar">
            <summary>
            Liquidation margin ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceMarginTradeCoeff.MarginCallBar">
            <summary>
            Margin class margin ratio
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceMarginTradeCoeff.NormalBar">
            <summary>
            Initial margin ratio
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginEnabled">
            <summary>
            Sub account margin trading enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginEnabled.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginEnabled.IsMarginEnabled">
            <summary>
            Whether Margin trading is enabled
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary">
            <summary>
            Sub accounts futures summary
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalMaintenanceMargin">
            <summary>
            Total maintenance margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalOpenOrderInitialMargin">
            <summary>
            Total open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalPositionInitialMargin">
            <summary>
            Total position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalUnrealizedProfit">
            <summary>
            Total unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.TotalWalletBalance">
            <summary>
            Total wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsFuturesSummary.SubAccounts">
            <summary>
            Sub accounts info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo">
            <summary>
            Sub account future details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.Email">
            <summary>
            Email of the sub account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalInitialMargin">
            <summary>
            Total initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalMaintenanceMargin">
            <summary>
            Total maintenance margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalMarginBalance">
            <summary>
            Total margin balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalOpenOrderInitialMargin">
            <summary>
            Total open order initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalPositionInitialMargin">
            <summary>
            Total position initial margin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalUnrealizedProfit">
            <summary>
            Total unrealized profit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.TotalWalletBalance">
            <summary>
            Total wallet balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountFuturesInfo.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary">
            <summary>
            Sub accounts margin summary
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary.TotalAssetOfBtc">
            <summary>
            Total btc asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary.TotalLiabilityOfBtc">
            <summary>
            Total liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary.TotalNetAssetOfBtc">
            <summary>
            Total net btc
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountsMarginSummary.SubAccounts">
            <summary>
            Sub account details
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo">
            <summary>
            Sub account margin info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo.Email">
            <summary>
            Sub account email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo.TotalAssetOfBtc">
            <summary>
            Total btc asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo.TotalLiabilityOfBtc">
            <summary>
            Total liability
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountMarginInfo.TotalNetAssetOfBtc">
            <summary>
            Total net btc
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountSpotAssetsSummary">
            <summary>
            Sub accounts btc value summary
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountSpotAssetsSummary.TotalCount">
            <summary>
            Total records
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountSpotAssetsSummary.MasterAccountTotalAsset">
            <summary>
            Master account total asset value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountSpotAssetsSummary.SubAccountsBtcValues">
            <summary>
            Sub account values
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountBtcValue">
            <summary>
            Sub account btc value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountBtcValue.Email">
            <summary>
            Sub account email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountBtcValue.TotalAsset">
            <summary>
            Sub account total asset 
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus">
            <summary>
            Sub-account Status on Margin/Futures
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.Email">
            <summary>
            User email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsAccountEnabled">
            <summary>
            Sub account user enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsActive">
            <summary>
            Sub account user active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.CreateTime">
            <summary>
            The time the sub account was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsMarginEnabled">
            <summary>
            Is Margin enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.IsFutureEnabled">
            <summary>
            Is Futures enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountStatus.MobileNumber">
            <summary>
            User mobile number
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransaction">
            <summary>
            Transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransaction.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer">
            <summary>
            Sub account transfer info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.From">
            <summary>
            From which email the transfer originated
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.To">
            <summary>
            To which email the transfer was to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Asset">
            <summary>
            The asset of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Quantity">
            <summary>
            The quantity of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Timestamp">
            <summary>
            The timestamp of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.Status">
            <summary>
            Status of the transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransfer.TransactionId">
            <summary>
            Transaction Id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult">
            <summary>
            Sub account transfer result
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult.Success">
            <summary>
            Whether the transfer was successful
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferResult.TransactionId">
            <summary>
            The transaction id of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount">
            <summary>
            Sub account historic transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.CounterParty">
            <summary>
            Counter party of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Type">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountTransferSubAccount.Timestamp">
            <summary>
            Timestamp of the transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransfersList.Transactions">
            <summary>
            Transactions
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction">
            <summary>
            Binance sub account universal transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.FromEmail">
            <summary>
            From email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.ToEmail">
            <summary>
            To email
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.FromAccountType">
            <summary>
            From account type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.ToAccountType">
            <summary>
            To account type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.SubAccountData.BinanceSubAccountUniversalTransferTransaction.CreateTime">
            <summary>
            The time the universal transaction was created
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo">
            <summary>
            Information about an account
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.Time">
            <summary>
            Time of last account update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.MakerCommission">
            <summary>
            Commission percentage to pay when making trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.TakerCommission">
            <summary>
            Commission percentage to pay when taking trades
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.BuyerCommission">
            <summary>
            Commission percentage to buy when buying
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.SellerCommission">
            <summary>
            Commission percentage to buy when selling
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanTrade">
            <summary>
            Boolean indicating if this account can trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanWithdraw">
            <summary>
            Boolean indicating if this account can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.CanDeposit">
            <summary>
            Boolean indicating if this account can deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.Permissions">
            <summary>
            Permissions types
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamAccountInfo.Balances">
            <summary>
            List of assets with their current balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance">
            <summary>
            Information about an asset balance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Asset">
            <summary>
            The asset this balance is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Free">
            <summary>
            The amount that isn't locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Locked">
            <summary>
            The amount that is currently locked in a trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalance.Total">
            <summary>
            The total balance of this asset (Free + Locked)
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate">
            <summary>
            Update when asset is withdrawn/deposited 
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.Asset">
            <summary>
            The asset which changed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.BalanceDelta">
            <summary>
            The balance delta
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate.ClearTime">
            <summary>
            The time the deposit/withdrawal was cleared
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList">
            <summary>
            Order list info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.OrderListId">
            <summary>
            The id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ContingencyType">
            <summary>
            The contingency type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListStatusType">
            <summary>
            The order list status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListOrderStatus">
            <summary>
            The order status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.ListClientOrderId">
            <summary>
            The client id of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.TransactionTime">
            <summary>
            The transaction time
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.Symbol">
            <summary>
            The symbol of the order list
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList.Orders">
            <summary>
            The order in this list
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId">
            <summary>
            Order reference
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.Symbol">
            <summary>
            The symbol of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.OrderId">
            <summary>
            The id of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderId.ClientOrderId">
            <summary>
            The client order id
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate">
            <summary>
            Update data about an order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Symbol">
            <summary>
            The symbol the order is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.ClientOrderId">
            <summary>
            The new client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Side">
            <summary>
            The side of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Type">
            <summary>
            The type of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.TimeInForce">
            <summary>
            The timespan the order is active
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Quantity">
            <summary>
            The quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Price">
            <summary>
            The price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.StopPrice">
            <summary>
            The stop price of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.IcebergQuantity">
            <summary>
            The iceberg quantity of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OriginalClientOrderId">
            <summary>
            The original client order id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.ExecutionType">
            <summary>
            The execution type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Status">
            <summary>
            The status of the order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.RejectReason">
            <summary>
            The reason the order was rejected
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OrderId">
            <summary>
            The id of the order as assigned by Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastQuantityFilled">
            <summary>
            The quantity of the last filled trade of this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuantityFilled">
            <summary>
            The quantity of all trades that were filled for this order
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastPriceFilled">
            <summary>
            The price of the last filled trade
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.Commission">
            <summary>
            The commission payed
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.CommissionAsset">
            <summary>
            The asset the commission was taken from
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.UpdateTime">
            <summary>
            The time of the update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.TradeId">
            <summary>
            The trade id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.IsWorking">
            <summary>
            Is working
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.BuyerIsMaker">
            <summary>
            Whether the buyer is the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.CreateTime">
            <summary>
            Time the order was created
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuoteQuantityFilled">
            <summary>
            Cummulative amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.QuoteQuantity">
            <summary>
            Quote order quantity
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.LastQuoteQuantity">
            <summary>
            Last quote asset transacted quantity (i.e. LastPrice * LastQuantity)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.OrderListId">
            <summary>
            This id of the corresponding order list. (-1 if not part of an order list)
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate.I">
            <summary>
            Unused
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.UserStream.BinanceStreamPositionsUpdate">
            <summary>
            Positions update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamPositionsUpdate.Time">
            <summary>
            Time of last account update
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.UserStream.BinanceStreamPositionsUpdate.Balances">
            <summary>
            Balances
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus">
            <summary>
            Account status info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAccountStatus.Data">
            <summary>
            The result status
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress">
            <summary>
            Deposit address info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Address">
            <summary>
            The deposit address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Url">
            <summary>
            Url
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Tag">
            <summary>
            Address tag
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDepositAddress.Coin">
            <summary>
            Coin the address is for
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDeposit">
            <summary>
            Information about a deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.InsertTime">
            <summary>
            Time the deposit was added to Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Amount">
            <summary>
            The amount deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Coin">
            <summary>
            The coin deposited
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Address">
            <summary>
            The address of the deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Tag">
            <summary>
            The tag of the address of the deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Network">
            <summary>
            The network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Status">
            <summary>
            The status of the deposit
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.TransferType">
            <summary>
            The transfer type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.Confirmations">
            <summary>
            Confirmations
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDeposit.ConfirmationsForUnlock">
            <summary>
            Network confirmations for unlocking
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord">
            <summary>
            Dividend record
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Timestamp">
            <summary>
            Timestamp of the transaction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDividendRecord.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustLogList">
            <summary>
            Dust log response details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogList.Total">
            <summary>
            Total counts of exchange
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogList.UserAssetDribblets">
            <summary>
            Rows
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustLog">
            <summary>
            Dust log details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.TransferredTotal">
            <summary>
            Total transferred
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.ServiceChargeTotal">
            <summary>
            Total service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.Logs">
            <summary>
            Detail logs
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLog.OperateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails">
            <summary>
            Dust log entry details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.ServiceChargeAmount">
            <summary>
            Service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.Amount">
            <summary>
            Amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.OperateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.TransferredAmount">
            <summary>
            Transferred amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustLogDetails.FromAsset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult">
            <summary>
            Result of dust transfer
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TotalServiceCharge">
            <summary>
            Total service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TotalTransferred">
            <summary>
            Total transferred
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResult.TransferResult">
            <summary>
            Transfer entries
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry">
            <summary>
            Dust transfer entry
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.Amount">
            <summary>
            Amount of dust
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.FromAsset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.Timestamp">
            <summary>
            Timestamp of conversion
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.ServiceChargeAmount">
            <summary>
            Service charge
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceDustTransferResultEntry.TransferredAmount">
            <summary>
            BNB result amount
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceFundingAsset">
            <summary>
            Funding wallet asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceFundingAsset.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceFundingAsset.Free">
            <summary>
            Amount available
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceFundingAsset.Locked">
            <summary>
            Amount locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceFundingAsset.Freeze">
            <summary>
            Amount frozen
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceFundingAsset.Withdrawing">
            <summary>
            Amount withdrawing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceFundingAsset.BtcValuation">
            <summary>
            Value in btc
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceSpotFuturesTransfer">
            <summary>
            Transfer info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSpotFuturesTransfer.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSpotFuturesTransfer.TransactionId">
            <summary>
            The transaction id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSpotFuturesTransfer.Amount">
            <summary>
            The amount transferred
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSpotFuturesTransfer.Type">
            <summary>
            The transfer direction
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSpotFuturesTransfer.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSpotFuturesTransfer.Status">
            <summary>
            The status of the transfer
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus">
            <summary>
            The status of Binance
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceSystemStatus.Message">
            <summary>
            Additional info
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee">
            <summary>
            Trade fee info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.Symbol">
            <summary>
            The symbol this fee is for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.MakerFee">
            <summary>
            The fee for trades where you're the maker
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradeFee.TakerFee">
            <summary>
            The fee for trades where you're the taker
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus">
            <summary>
            Trade status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.IsLocked">
            <summary>
            Is locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.PlannedRecoverTime">
            <summary>
            Planned time of recovery
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.TriggerConditions">
            <summary>
            Conditions
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.Indicators">
            <summary>
            Dictionary of indicator lists for symbols
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTradingStatus.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceIndicator">
            <summary>
            Indicator info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.IndicatorType">
            <summary>
            Indicator name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.CurrentValue">
            <summary>
            Current value
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceIndicator.TriggerValue">
            <summary>
            Trigger value
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceTransfer">
            <summary>
            Transfer info
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTransfer.Asset">
            <summary>
            The asset which was transfered
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTransfer.Amount">
            <summary>
            Amount transfered
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTransfer.Type">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTransfer.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTransfer.TransactionId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceTransfer.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin">
            <summary>
            Information about a coin for a user
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Coin">
            <summary>
            Coin code
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.DepositAllEnable">
            <summary>
            Deposit all is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Free">
            <summary>
            Amount free
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Freeze">
            <summary>
            Amount frozen
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Ipoable">
            <summary>
            Ipo-able
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Ipoing">
            <summary>
            Ipo-ing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.IsLegalMoney">
            <summary>
            Is the coin legally money
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Locked">
            <summary>
            Amount locked
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Storage">
            <summary>
            Storage
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Trading">
            <summary>
            Is trading
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.WithdrawAllEnable">
            <summary>
            Withdraw all enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Name">
            <summary>
            Name of the coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.Withdrawing">
            <summary>
            Currently withdrawing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceUserCoin.NetworkList">
            <summary>
            Networks
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceNetwork">
            <summary>
            Network for a coin
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.AddressRegex">
            <summary>
            Regex for an address on the network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.Coin">
            <summary>
            Coin name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.DepositDescription">
            <summary>
            Deposit description
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.DepositEnabled">
            <summary>
            Deposit enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.IsDefault">
            <summary>
            Is default network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.MemoRegex">
            <summary>
            Regex for a memo
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.MinConfirmations">
            <summary>
            Minimal confirmations for balance confirmation
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.ResetAddressStatus">
            <summary>
            Reset address status
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.SpecialTips">
            <summary>
            Tips
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.UnlockConfirm">
            <summary>
            Confirmation number for balance unlock
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawDescription">
            <summary>
            Withdraw description
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawEnabled">
            <summary>
            Withdraw is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawFee">
            <summary>
            Fee for withdrawing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawMin">
            <summary>
            Minimal withdraw amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawIntegerMultiple">
            <summary>
            Min withdraw step
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.WithdrawMax">
            <summary>
            Max withdraw amount
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceNetwork.SameAddress">
            <summary>
            If the coin needs to provide memo to withdraw
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails">
            <summary>
            Asset details
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.MinimalWithdrawAmount">
            <summary>
            Minimal amount you can withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.DepositStatus">
            <summary>
            Whether deposits are enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.WithdrawStatus">
            <summary>
            Whether withdrawing is enabled
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.WithdrawFee">
            <summary>
            Fee for withdrawing
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceAssetDetails.DepositTip">
            <summary>
            Status string for deposit
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal">
            <summary>
            Information about a withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Id">
            <summary>
            The id of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.ApplyTime">
            <summary>
            The time the withdrawal was applied for
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Amount">
            <summary>
            The amount of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Address">
            <summary>
            The address the asset was withdrawn to
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.AddressTag">
            <summary>
            Tag for the address
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.TransactionId">
            <summary>
            The transaction id of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.TransactionFee">
            <summary>
            Transaction fee for the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Asset">
            <summary>
            The asset that was withdrawn
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Network">
            <summary>
            Network that was used
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.ConfirmTimes">
            <summary>
            Confirm times for withdraw
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.Status">
            <summary>
            The status of the withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawal.TransferType">
            <summary>
            Transfer type: 1 for internal transfer, 0 for external transfer 
            </summary>
        </member>
        <member name="T:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced">
            <summary>
            Result of placing a withdrawal
            </summary>
        </member>
        <member name="P:Binance.Net.Objects.Spot.WalletData.BinanceWithdrawalPlaced.Id">
            <summary>
            The id
            </summary>
        </member>
        <member name="T:Binance.Net.SocketSubClients.BinanceSocketClientBlvt">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientBlvt.SubscribeToBlvtInfoUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate}})">
            <summary>
            Subscribes to leveraged token info updates
            </summary>
            <param name="token">The token to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientBlvt.SubscribeToBlvtInfoUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Blvt.BinanceBlvtInfoUpdate}})">
            <summary>
            Subscribes to leveraged token info updates
            </summary>
            <param name="tokens">The tokens to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientBlvt.SubscribeToBlvtKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData}})">
            <summary>
            Subscribes to leveraged token kline updates
            </summary>
            <param name="token">The token to subscribe to</param>
            <param name="interval">The kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientBlvt.SubscribeToBlvtKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData}})">
            <summary>
            Subscribes to leveraged token kline updates
            </summary>
            <param name="tokens">The tokens to subscribe to</param>
            <param name="interval">The kline interval</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.SocketSubClients.BinanceSocketClientFutures">
            <summary>
            Futures subscriptions
            </summary>
        </member>
        <member name="F:Binance.Net.SocketSubClients.BinanceSocketClientFutures.Log">
            <summary>
            Log
            </summary>
        </member>
        <member name="F:Binance.Net.SocketSubClients.BinanceSocketClientFutures.BaseClient">
            <summary>
            BaseClient
            </summary>
        </member>
        <member name="P:Binance.Net.SocketSubClients.BinanceSocketClientFutures.BaseAddress">
            <summary>
            Base address
            </summary>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade}})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade}})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToKlineUpdatesAsync(System.String,System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceMiniTick}}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceTick}}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllBookTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice}})">
            <summary>
            Subscribes to all book ticker update streams
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation}})">
            <summary>
            Subscribes to specific symbol forced liquidations stream
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation}})">
            <summary>
            Subscribes to list of symbol forced liquidations stream
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToAllLiquidationUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamLiquidation}})">
            <summary>
            Subscribes to all forced liquidations stream
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceFuturesEventOrderBook}})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100, 250 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceFuturesEventOrderBook}})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100, 250 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceFuturesEventOrderBook}})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100, 250 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceFuturesEventOrderBook}})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 100, 250 or 500. Defaults to 250</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.SubscribeToUserDataUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamConfigUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamMarginUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamAccountUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.UserStream.BinanceFuturesStreamOrderUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.BinanceStreamEvent}})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Futures.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onConfigUpdate">The event handler for leverage changed update</param>
            <param name="onMarginUpdate">The event handler for whenever a margin has changed</param>
            <param name="onAccountUpdate">The event handler for whenever an account update is received</param>
            <param name="onOrderUpdate">The event handler for whenever an order status update is received</param>
            <param name="onListenKeyExpired">Responds when the listen key for the stream has expired. Initiate a new instance of the stream here</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFutures.Subscribe``1(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{``0}})">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="topics"></param>
            <param name="onData"></param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin">
            <summary>
            COIN-M futures streams
            </summary>
        </member>
        <member name="P:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.BaseAddress">
            <summary>
            Base address
            </summary>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol and interval
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToKlineUpdatesAsync(System.String,System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol and intervals
            </summary>
            <param name="symbol">The symbol</param>
            <param name="intervals">The intervals of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols and interval
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols and intervals
            </summary>
            <param name="symbols">The symbols</param>
            <param name="intervals">The intervals of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToIndexPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexPrice}}})">
            <summary>
            Subscribes to the Index price update stream for a single pair
            </summary>
            <param name="pair">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToIndexPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamIndexPrice}}})">
            <summary>
            Subscribes to the Index price update stream for a list of pairs
            </summary>
            <param name="pairs">The pairs</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesCoinStreamMarkPrice}}})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesCoinStreamMarkPrice}}})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToContinuousContractKlineUpdatesAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData}})">
            <summary>
            Subscribes to the continuous contract candlestick update stream for the provided pair
            </summary>
            <param name="pair">The pair</param>
            <param name="contractType">The contract type</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToContinuousContractKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.ContractType,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamKlineData}})">
            <summary>
            Subscribes to the continuous contract candlestick update stream for the provided pairs
            </summary>
            <param name="pairs">The pairs</param>
            <param name="contractType">The contract type</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToIndexKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData}})">
            <summary>
            Subscribes to the index candlestick update stream for the provided pair
            </summary>
            <param name="pair">The pair</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToIndexKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData}})">
            <summary>
            Subscribes to the index candlestick update stream for the provided pairs
            </summary>
            <param name="pairs">The pairs</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToMarkPriceKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData}})">
            <summary>
            Subscribes to the mark price candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToMarkPriceKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceStreamIndexKlineData}})">
            <summary>
            Subscribes to the mark price candlestick update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceMiniTick}}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesCoin.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceTick}}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt">
            <summary>
            USDT-M futures streams
            </summary>
        </member>
        <member name="P:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.BaseAddress">
            <summary>
            Base address
            </summary>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToMarkPriceUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesUsdtStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a single symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToMarkPriceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesUsdtStreamMarkPrice}})">
            <summary>
            Subscribes to the Mark price update stream for a list of symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToAllMarkPriceUpdatesAsync(System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamMarkPrice}}})">
            <summary>
            Subscribes to the Mark price update stream for a all symbols
            </summary>
            /// <param name="updateInterval">Update interval in milliseconds, either 1000 or 3000. Defaults to 3000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToKlineUpdatesAsync(System.String,System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol and intervals
            </summary>
            <param name="symbol">The symbol</param>
            <param name="intervals">The intervals of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols and interval
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols and intervals
            </summary>
            <param name="symbols">The symbols</param>
            <param name="intervals">The intervals of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a list of symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceMiniTick}}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToCompositeIndexUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Futures.MarketStream.BinanceFuturesStreamCompositeIndex}})">
            <summary>
            Subscribes to composite index updates stream for a symbol
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientFuturesUsdt.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceTick}}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.SocketSubClients.BinanceSocketClientSpot">
            <summary>
            Spot streams
            </summary>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAggregatedTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade}})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAggregatedTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamAggregatedTrade}})">
            <summary>
            Subscribes to the aggregated trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade}})">
            <summary>
            Subscribes to the trades update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamTrade}})">
            <summary>
            Subscribes to the trades update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToKlineUpdatesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToKlineUpdatesAsync(System.String,System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbol and intervals
            </summary>
            <param name="symbol">The symbol</param>
            <param name="intervals">The intervals of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Binance.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols and interval
            </summary>
            <param name="symbols">The symbols</param>
            <param name="interval">The interval of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Binance.Net.Enums.KlineInterval},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceStreamKlineData}})">
            <summary>
            Subscribes to the candlestick update stream for the provided symbols and intervals
            </summary>
            <param name="symbols">The symbols</param>
            <param name="intervals">The intervals of the candlesticks</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolMiniTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolMiniTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceMiniTick}})">
            <summary>
            Subscribes to mini ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllSymbolMiniTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceMiniTick}}})">
            <summary>
            Subscribes to mini ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToBookTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToBookTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllBookTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.MarketStream.BinanceStreamBookPrice}})">
            <summary>
            Subscribes to the book ticker update stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToPartialOrderBookUpdatesAsync(System.String,System.Int32,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceOrderBook}})">
            <summary>
            Subscribes to the depth updates for the provided symbol
            </summary>
            <param name="symbol">The symbol to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToPartialOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceOrderBook}})">
            <summary>
            Subscribes to the depth updates for the provided symbols
            </summary>
            <param name="symbols">The symbols to subscribe on</param>
            <param name="levels">The amount of entries to be returned in the update of each symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.String,System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceEventOrderBook}})">
            <summary>
            Subscribes to the order book updates for the provided symbol
            </summary>
            <param name="symbol">The symbol</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceEventOrderBook}})">
            <summary>
            Subscribes to the depth update stream for the provided symbols
            </summary>
            <param name="symbols">The symbols</param>
            <param name="updateInterval">Update interval in milliseconds, either 100 or 1000. Defaults to 1000</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbol">The symbol to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToSymbolTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Interfaces.IBinanceTick}})">
            <summary>
            Subscribes to ticker updates stream for a specific symbol
            </summary>
            <param name="symbols">The symbols to subscribe to</param>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToAllSymbolTickerUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Binance.Net.Interfaces.IBinanceTick}}})">
            <summary>
            Subscribes to ticker updates stream for all symbols
            </summary>
            <param name="onMessage">The event handler for the received data</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Binance.Net.SocketSubClients.BinanceSocketClientSpot.SubscribeToUserDataUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.UserStream.BinanceStreamOrderList}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.UserStream.BinanceStreamPositionsUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Binance.Net.Objects.Spot.UserStream.BinanceStreamBalanceUpdate}})">
            <summary>
            Subscribes to the account update stream. Prior to using this, the BinanceClient.Spot.UserStreams.StartUserStream method should be called.
            </summary>
            <param name="listenKey">Listen key retrieved by the StartUserStream method</param>
            <param name="onOrderUpdateMessage">The event handler for whenever an order status update is received</param>
            <param name="onOcoOrderUpdateMessage">The event handler for whenever an oco order status update is received</param>
            <param name="onAccountPositionMessage">The event handler for whenever an account position update is received. Account position updates are a list of changed funds</param>
            <param name="onAccountBalanceUpdate">The event handler for whenever a deposit or withdrawal has been processed and the account balance has changed</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientBrokerage">
            <summary>
            Brokerage endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.CreateSubAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create a Sub Account
            <para>This request will generate a sub account under your brokerage master account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Created sub-account id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub accounts</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Margin for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Margin result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Futures for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Futures result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.EnableLeverageTokenForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Leverage Token for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Enable Leverage Token result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.CreateApiKeyForSubAccountAsync(System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create Api Key for Sub Account
            <para>This request will generate a api key for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="isSpotTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.DeleteSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delete Sub Account Api Key
            <para>This request will delete a api key for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 500, max 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeSubAccountApiKeyPermissionAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Api Permission
            <para>This request will change the api permission for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>Sub account should be enable margin before its api-key's marginTrade being enabled</para>
            <para>Sub account should be enable futures before its api-key's futuresTrade being enabled</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="isSpotTradingEnabled">Is spot trading enabled</param>
            <param name="isMarginTradingEnabled">Is margin trading enabled</param>
            <param name="isFuturesTradingEnabled">Is futures trading enabled</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Api key result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.AddIpRestrictionForSubAccountApiKeyAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add IP Restriction for Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="ipAddress">IP address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Restriction result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeIpRestrictionForSubAccountApiKeyAsync(System.String,System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable or Disable IP Restriction for Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="ipRestrict">IP restrict</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Restriction result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetIpRestrictionForSubAccountApiKeyAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get IP Restriction for Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Restriction result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.DeleteIpRestrictionForSubAccountApiKeyAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Delete IP Restriction for Sub Account Api Key
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="apiKey">Api key</param>
            <param name="ipAddress">IP address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Restriction result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeSubAccountCommissionAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account Commission
            <para>This request will change the commission for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>If margin disabled, it is not allowed to send marginMakerCommission or marginTakerCommission</para>
            <para>If margin enabled, marginMakerCommission or marginTakerCommission has default value as spotMakerCommission or spotTakerCommission</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="makerCommission">Maker commission</param>
            <param name="takerCommission">Taker commission</param>
            <param name="marginMakerCommission">Margin maker commission</param>
            <param name="marginTakerCommission">Margin taker commission</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account commission result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account USDT-Ⓜ Futures Commission Adjustment
            <para>This request will change the USDT-Ⓜ futures commission for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>The sub-account's USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If futures disabled, it is not allowed to set subaccount's USDT-Ⓜ futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="makerAdjustment">Maker adjustment (100 for 0.01%)</param>
            <param name="takerAdjustment">Taker adjustment (100 for 0.01%)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account USDT-Ⓜ futures commission result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountFuturesCommissionAdjustmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account USDT-Ⓜ Futures Commission Adjustment
            <para>The sub-account's USDT-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If symbol not sent, commission adjustment of all symbols will be returned</para>
            <para>If futures disabled, it is not allowed to set subaccount's USDT-Ⓜ futures commission adjustment on any symbol</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account USDT-Ⓜ futures commissions result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeSubAccountCoinFuturesCommissionAdjustmentAsync(System.String,System.String,System.Int32,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Change Sub Account COIN-Ⓜ Futures Commission Adjustment
            <para>This request will change the COIN-Ⓜ futures commission for a sub account</para>
            <para>You need to enable "trade" option for the api key which requests this endpoint</para>
            <para>The sub-account's COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If futures disabled, it is not allowed to set subaccount's COIN-Ⓜ futures commission adjustment on any symbol</para>
            <para>Different symbols have the same commission for the same pair</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="pair">Pair</param>
            <param name="makerAdjustment">Maker adjustment (100 for 0.01%)</param>
            <param name="takerAdjustment">Taker adjustment (100 for 0.01%)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account coin futures commission result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountCoinFuturesCommissionAdjustmentAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account COIN-Ⓜ Futures Commission Adjustment
            <para>The sub-account's COIN-Ⓜ futures commission of a symbol equals to the base commission of the symbol on the sub-account's fee tier plus the commission adjustment</para>
            <para>If pair not sent, commission adjustment of all symbols will be returned</para>
            <para>If futures disabled, it is not allowed to set subaccount's COIN-Ⓜ futures commission adjustment on any symbol</para>
            <para>Different symbols have the same commission for the same pair</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="pair">Pair</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Sub account coin futures commissions result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountSpotAssetInfoAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Spot Asset info
            <para>If subAccountId is not sent, the size must be sent</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 10, max 20)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountMarginAssetInfoAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Margin Asset info
            <para>If subAccountId is not sent, the size must be sent</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 10, max 20)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountFuturesAssetInfoAsync(Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Futures Asset info
            <para>If subAccountId is not sent, the size must be sent</para>
            </summary>
            <param name="futuresType">Futures type</param>
            <param name="subAccountId">Sub account id</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 10, max 20)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeBnbBurnForSubAccountSpotAndMarginAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account SPOT and MARGIN
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="spotBnbBurn">"true" or "false", spot and margin whether use BNB to pay for transaction fees or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.ChangeBnbBurnForSubAccountMarginInterestAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable Or Disable BNB Burn for Sub Account Margin Interest
            <para>Sub account must be enabled margin before using this switch</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="interestBnbBurn">"true" or "false", margin loan whether uses BNB to pay for margin interest or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetBnbBurnStatusForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get BNB Burn Status for Sub Account
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.TransferUniversalAsync(System.String,System.Decimal,System.String,Binance.Net.Enums.BrokerageAccountType,System.String,Binance.Net.Enums.BrokerageAccountType,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer Universal
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            <para>Transfer between futures account is not supported</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="fromId">From id</param>
            <param name="fromAccountType">From type</param>
            <param name="toId">To id</param>
            <param name="toAccountType">To type</param>
            <param name="clientTransferId">Client transfer id, must be unique</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetTransferHistoryUniversalAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History Universal
            <para>Either fromId or toId must be sent. Return fromId equal master account by default</para>
            <para>Only get the latest history of past 30 days</para>
            <para>If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE</para>
            </summary>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page</param>
            <param name="limit">Limit (default 500, max 500)</param>
            <param name="showAllStatus">Show all status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.TransferAsync(System.String,System.Decimal,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer (Spot)
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id, must be unique</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.TransferFuturesAsync(System.String,System.Decimal,Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType,System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sub Account Transfer (Futures)
            <para>You need to enable "internal transfer" option for the api key which requests this endpoint</para>
            <para>Transfer from master account if fromId not sent</para>
            <para>Transfer to master account if toId not sent</para>
            <para>Each master account could transfer 5000 times/min</para>
            </summary>
            <param name="asset">Asset</param>
            <param name="amount">Amount</param>
            <param name="futuresType">Futures type</param>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetTransferHistoryAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History (Spot)
            <para>If showAllStatus is true, the status in response will show four types: INIT,PROCESS,SUCCESS,FAILURE</para>
            <para>If showAllStatus is false, the status in response will show three types: INIT,PROCESS,SUCCESS</para>
            </summary>
            <param name="fromId">From id</param>
            <param name="toId">To id</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page</param>
            <param name="limit">Limit (default 500, max 500)</param>
            <param name="showAllStatus">Show all status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetTransferFuturesHistoryAsync(System.String,Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Sub Account Transfer History (Futures)
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="futuresType">Futures type</param>
            <param name="startDate">From date (default 30 days records)</param>
            <param name="endDate">To date (default 30 days records)</param>
            <param name="page">Page (default 1)</param>
            <param name="limit">Limit (default 50, max 500)</param>
            <param name="clientTransferId">Client transfer id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetSubAccountDepositHistoryAsync(System.String,System.String,System.Nullable{Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageSubAccountDepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub Account Deposit History
            <para>Please notice the default startDate and endDate to make sure that time interval is within 0-7 days</para>
            <para>If both startDate and endDate are sent, time between startDate and endDate must be less than 7 days</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="coin">Coin</param>
            <param name="status">Status</param>
            <param name="startDate">From date (default 7 days from current timestamp)</param>
            <param name="endDate">To date (default present timestamp)</param>
            <param name="limit">Limit (default 500)</param>
            <param name="offset">Offset (default 0)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetBrokerAccountInfoAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Broker Account Information
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Broker information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetBrokerCommissionRebatesRecentAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Commission Rebate Recent Record (Spot)
            <para>Only get the latest history of past 7 days</para>
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="startDate">From date</param>
            <param name="endDate">To date</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 500, max 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Rebates history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientBrokerage.GetBrokerFuturesCommissionRebatesHistoryAsync(Binance.Net.Objects.Brokerage.SubAccountData.BinanceBrokerageFuturesType,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Query Broker Futures Commission Rebate Record
            </summary>
            <param name="futuresType">Futures type</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="page">Page (default 1)</param>
            <param name="size">Size (default 10, max 100)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Rebate records</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientFiat">
            <summary>
            Liquid swap endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientFiat.GetFiatPaymentHistoryAsync(Binance.Net.Enums.OrderSide,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Fiat payment history
            </summary>
            <param name="side">Filter by side</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Return a specific page</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientFiat.GetFiatDepositWithdrawHistoryAsync(Binance.Net.Enums.TransactionType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Fiat deposit/withdrawal history
            </summary>
            <param name="side">Filter by side</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">Return a specific page</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientGeneral">
            <summary>
            General endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetDailySpotAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (balances)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetDailyMarginAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetDailyFutureAccountSnapshotAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a daily account snapshot (assets and positions)
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="limit">The amount of days to retrieve</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetAccountStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the account associated with the api key/secret
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Account status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetFundingWalletAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding wallet assets
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="needBtcValuation">Return BTC valuation</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of assets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetAPIKeyPermissionsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get permission info for the current API key
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Permission info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetUserCoinsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets information of coins for a user
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetAssetDividendRecordsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get asset dividend records
            </summary>
            <param name="asset">Filter by asset</param>
            /// <param name="startTime">Filter by start time from</param>
            <param name="endTime">Filter by end time till</param>
            <param name="limit">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dividend records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.DisableFastWithdrawSwitchAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            This request will disable fastwithdraw switch under your account.
            You need to enable "trade" option for the api key which requests this endpoint.
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.EnableFastWithdrawSwitchAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
             <summary>
             This request will enable fastwithdraw switch under your account.
             You need to enable "trade" option for the api key which requests this endpoint.
            
             When Fast Withdraw Switch is on, transferring funds to a Binance account will be done instantly.
             There is no on-chain transaction, no transaction ID and no withdrawal fee.
             </summary>
             <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
             <param name="ct">Cancellation token</param>
             <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetDustLogAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the history of dust conversions
            </summary>
            <param name="startTime">The start time</param>
            <param name="endTime">The end time</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The history of dust conversions</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.DustTransferAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Converts dust (small amounts of) assets to BNB 
            </summary>
            <param name="assets">The assets to convert to BNB</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Dust transfer result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetBnbBurnStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the status of the BNB burn switch for spot trading and margin interest
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.SetBnbBurnStatusAsync(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Sets the status of the BNB burn switch for spot trading and margin interest
            </summary>
            <param name="spotTrading">If BNB burning should be enabled for spot trading</param>
            <param name="marginInterest">If BNB burning should be enabled for margin interest</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.TransferAsync(Binance.Net.Enums.UniversalTransferType,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers between accounts
            </summary>
            <param name="type">The type of transfer</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The amount to transfer</param>
            <param name="fromSymbol">From symbol when transfering from/to isolated margin</param>
            <param name="toSymbol">To symbol when transfering from/to isolated margin</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetTransfersAsync(Binance.Net.Enums.UniversalTransferType,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get transfer history
            </summary>
            <param name="type">The type of transfer</param>
            <param name="startTime">Filter by startTime</param>
            <param name="endTime">Filter by endTime</param>
            <param name="page">The page</param>
            <param name="pageSize">Results per page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientGeneral.GetProductsAsync(System.Threading.CancellationToken)">
            <summary>
            Get general data for the products available on Binance
            NOTE: This is not an official endpoint and might be changed or removed at any point by Binance
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientLending">
            <summary>
            Lending endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFlexibleProductListAsync(System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get product list
            </summary>
            <param name="status">Filter by status</param>
            <param name="featured">Filter by featured</param>
            <param name="page">Page to retrieve</param>
            <param name="pageSize">Page size to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of product</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLeftDailyPurchaseQuotaOfFlexableProductAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the purchase quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.PurchaseFlexibleProductAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="amount">The amount to purchase</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLeftDailyRedemptionQuotaOfFlexibleProductAsync(System.String,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get the redemption quota left for a product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Quota left</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.RedeemFlexibleProductAsync(System.String,System.Decimal,Binance.Net.Enums.RedeemType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Redeem flexible product
            </summary>
            <param name="productId">Id of the product</param>
            <param name="type">Redeem type</param>
            <param name="amount">The amount to redeem</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFlexibleProductPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get flexible product position
            </summary>
            <param name="asset">Asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Flexible product position</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetFixedAndCustomizedFixedProjectListAsync(Binance.Net.Enums.ProjectType,System.String,System.Nullable{Binance.Net.Enums.ProductStatus},System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get fixed and customized fixed project list
            </summary>
            <param name="type">Type of project</param>
            <param name="asset">Asset</param>
            <param name="status">Filter by status</param>
            <param name="sortAscending">If should sort ascending</param>
            <param name="sortBy">Sort by. Valid values: "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME"</param>
            <param name="currentPage">Result page</param>
            <param name="size">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Project list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.PurchaseCustomizedFixedProjectAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Purchase customized fixed project
            </summary>
            <param name="projectId">Id of the project</param>
            <param name="lot">The lot</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetCustomizedFixedProjectPositionsAsync(System.String,System.String,System.Nullable{Binance.Net.Enums.ProjectStatus},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get customized fixed project position
            </summary>
            <param name="asset">Asset</param>
            <param name="projectId">The project id</param>
            <param name="status">Filter by status</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Customized fixed project position</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLendingAccountAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get lending account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Lending account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetPurchaseRecordsAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get purchase records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The purchase records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetRedemptionRecordsAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get redemption records
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The redemption records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.GetLendingInterestHistoryAsync(Binance.Net.Enums.LendingType,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get interest history
            </summary>
            <param name="lendingType">Lending type</param>
            <param name="asset">Asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The interest history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLending.ChangeToDailyPositionAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Changed fixed/activity position to daily position
            </summary>
            <param name="projectId">Id of the project</param>
            <param name="lot">The lot</param>
            <param name="positionId">For fixed position</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Purchase id</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientLeveragedTokens">
            <summary>
            Leveraged token (BLVT) endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLeveragedTokens.GetBlvtInfoAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get blvt info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLeveragedTokens.SubscribeBlvtAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Subscribe to a token
            </summary>
            <param name="tokenName">Name of the token to subscribe to</param>
            <param name="cost">Cost of the subscription</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLeveragedTokens.GetSubscriptionRecordsAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get subscription records
            </summary>
            <param name="tokenName">Filter by token</param>
            <param name="id">Filter by id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLeveragedTokens.RedeemBlvtAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Redeem a token
            </summary>
            <param name="tokenName">Name of the token to redeem</param>
            <param name="amount">Amount to redeem</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLeveragedTokens.GetRedemptionRecordsAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get redemption records
            </summary>
            <param name="tokenName">Filter by token</param>
            <param name="id">Filter by id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLeveragedTokens.GetHistoricalBlvtKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get's historical klines
            </summary>
            <param name="symbol">The token</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Filter by startTime</param>
            <param name="endTime">Filter by endTime</param>
            <param name="limit">Number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientLiquidSwap">
            <summary>
            Liquid swap endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.GetBSwapPoolsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get all swap pools
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.GetPoolLiquidityInfoAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get liquidity info for a pool
            </summary>
            <param name="poolId">Get a specific pool</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.AddLiquidityAsync(System.Int32,System.String,System.Decimal,System.Nullable{Binance.Net.Enums.LiquidityType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add liquidity to a pool
            </summary>
            <param name="poolId">The pool</param>
            <param name="asset">The asset</param>
            <param name="quantity">Quantity to add</param>
            <param name="type">Add type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.RemoveLiquidityAsync(System.Int32,System.String,Binance.Net.Enums.LiquidityType,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Remove liquidity from a pool
            </summary>
            <param name="poolId">The pool</param>
            <param name="asset">The asset</param>
            <param name="type">Remove type</param>
            <param name="shareAmount">Amount to remove</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.GetLiquidityOperationRecordsAsync(System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{Binance.Net.Enums.BSwapOperation},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get liquidity operation records
            </summary>
            <param name="operationId">Filter by operationId</param>
            <param name="poolId">Filter by poolId</param>
            <param name="operation">Filter by operation</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.GetQuoteAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Request a quote for swap quote asset (selling asset) for base asset (buying asset), essentially price/exchange rates. quoteQty is quantity of quote asset(to sell).
            Please be noted the quote is for reference only, the actual price will change as the liquidity changes, it's recommended to swap immediate after request a quote for slippage prevention.
            </summary>
            <param name="quoteAsset">Quote asset</param>
            <param name="baseAsset">Base asset</param>
            <param name="quoteQuantity">Quote quantity</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.SwapAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Swap quote asset for base asset
            </summary>
            <param name="quoteAsset">Quote asset</param>
            <param name="baseAsset">Base asset</param>
            <param name="quoteQuantity">Quote quantity</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.GetSwapHistoryAsync(System.Nullable{System.Int64},System.Nullable{Binance.Net.Enums.BSwapStatus},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get swap history records
            </summary>
            <param name="swapId">Filter by swapId</param>
            <param name="status">Filter by status</param>
            <param name="quoteAsset">Filter by quote asset</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.GetBSwapPoolConfigureAsync(System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get pool config
            </summary>
            <param name="poolId">Id of the pool</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.AddLiquidityPreviewAsync(System.Int32,System.String,System.Decimal,Binance.Net.Enums.LiquidityType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Calculate expected share amount for adding liquidity in single or dual token.
            </summary>
            <param name="poolId">The pool</param>
            <param name="asset">The asset</param>
            <param name="quantity">Quantity to add</param>
            <param name="type">Add type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientLiquidSwap.RemoveLiquidityPreviewAsync(System.Int32,System.String,System.Decimal,Binance.Net.Enums.LiquidityType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Calculate expected share amount for adding liquidity in single or dual token.
            </summary>
            <param name="poolId">The pool</param>
            <param name="asset">The asset</param>
            <param name="quantity">Quantity to add</param>
            <param name="type">Add type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientMining">
            <summary>
            Mining endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningCoinListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets mining coins info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Coins info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningAlgorithmListAsync(System.Threading.CancellationToken)">
            <summary>
            Gets mining algorithms info
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Algorithms info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMinerDetailsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets miner details
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="workerName">Miners name</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMinerListAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.String,System.Nullable{Binance.Net.Enums.MinerStatus},System.Threading.CancellationToken)">
            <summary>
            Gets miner list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="sortAscending">Sort in ascending order</param>
            <param name="sortColumn">Column to sort by</param>
            <param name="workerStatus">Filter by status</param>
            <param name="ct">Cancellation token</param>
            <returns>Miner list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningRevenueListAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets revenue list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="pageSize">Results per page</param>
            <param name="coin">Coin</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningOtherRevenueListAsync(System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get other revenue list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account</param>
            <param name="page">Result page</param>
            <param name="pageSize">Results per page</param>
            <param name="coin">Coin</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningStatisticsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get mining statistics
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">User name</param>
            <param name="ct">Cancellation token</param>
            <returns>Mining statistics</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetMiningAccountListAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets mining account list
            </summary>
            <param name="algorithm">Algorithm</param>
            <param name="userName">Mining account user name</param>
            <param name="ct">Cancellation token</param>
            <returns>Revenue list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetHashrateResaleListAsync(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets hash rate resale list
            </summary>
            <param name="page">Page</param>
            <param name="pageSize">Results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Resale list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.GetHashrateResaleDetailsAsync(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets hash rate resale details
            </summary>
            <param name="configId">The mining id</param>
            <param name="userName">Mining account</param>
            <param name="page">Page</param>
            <param name="pageSize">Results per page</param>
            <param name="ct">Cancellation token</param>
            <returns>Resale details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.PlaceHashrateResaleRequestAsync(System.String,System.String,System.DateTime,System.DateTime,System.String,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Hashrate resale request
            </summary>
            <param name="userName">Mining account</param>
            <param name="algorithm">Transfer algorithm</param>
            <param name="startDate">Resale start time</param>
            <param name="endDate">Resale end time</param>
            <param name="toUser">To mining account</param>
            <param name="hashRate">Results per page</param>
            <param name="ct">Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)</param>
            <returns>Mining account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientMining.PlaceHashrateResaleRequestAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel Hashrate Resale Configuration
            </summary>
            <param name="configId">Mining id</param>
            <param name="userName">Mining account</param>
            <param name="ct">Resale hashrate h/s must be transferred (BTC is greater than 500000000000 ETH is greater than 500000)</param>
            <returns>Success</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientSubAccount">
            <summary>
            Sub accounts endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Gets a list of sub accounts associated with this master account
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="isFreeze">Is freezed</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountTransferHistoryForMasterAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the master account) 
            </summary>
            <param name="fromEmail">Filter the history by from email</param>
            <param name="toEmail">Filter the history by to email</param>
            <param name="startTime">Filter the history by startTime</param>
            <param name="endTime">Filter the history by endTime</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountAsync(Binance.Net.Enums.TransferAccountType,Binance.Net.Enums.TransferAccountType,System.String,System.Decimal,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers an asset form/to a sub account. If fromEmail or toEmail is not send it is interpreted as from/to the master account. Transfer between futures accounts is not supported
            </summary>
            <param name="fromEmail">From which account to transfer</param>
            <param name="fromAccountType">Account type to transfer from</param>
            <param name="toEmail">To which account to transfer</param>
            <param name="toAccountType">Account type to transfer to</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountAssetsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets list of balances for a sub account
            </summary>
            <param name="email">For which account to get the assets</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of balances</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountDepositAddressAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for a coin to a sub account
            </summary>
            <param name="email">The email of the account to deposit to</param>
            <param name="coin">The coin of the deposit</param>
            <param name="network">The coin network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit address</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountDepositHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history for a sub account
            </summary>
            <param name="email">The email of the account to get history for</param>
            <param name="coin">Filter for a coin</param>
            <param name="startTime">Only return deposits placed later this</param>
            <param name="endTime">Only return deposits placed before this</param>
            <param name="limit">Max number of results</param>
            <param name="offset">Offset results by this</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The deposit history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountStatusAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Sub-account's Status on Margin/Futures(For Master Account)
            </summary>
            <param name="email">Filter the list by email</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of sub accounts status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.EnableMarginForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables margin for a sub account
            </summary>
            <param name="email">The email of the account to enable margin for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin enable status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountMarginDetailsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin details for a sub account
            </summary>
            <param name="email">The email of the account to get margin details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsMarginSummaryAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets margin summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin summary</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.EnableFuturesForSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enables futures for a sub account
            </summary>
            <param name="email">The sub account email to enable futures for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures status</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountFuturesDetailsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures details for a sub account
            </summary>
            <param name="email">The email of the account to get future details for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures details</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsFuturesSummaryAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures summary for sub accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Futures summary</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountsFuturesPositionRiskAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets futures position risk for a sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Position risk</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountFuturesAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountFuturesTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a futures sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountMarginAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.SubAccountMarginTransferType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers from or to a margin sub account
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountToSubAccountAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to another sub account of the same master
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.TransferSubAccountToMasterAsync(System.String,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfers to master account
            </summary>
            <param name="asset">The asset to transfer</param>
            <param name="amount">The quantity to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The result of the transfer</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountTransferHistoryForSubAccountAsync(System.String,System.Nullable{Binance.Net.Enums.SubAccountTransferSubAccountType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the transfer history of a sub account (from the sub account)
            </summary>
            <param name="asset">The asset</param>
            <param name="type">Filter by type of transfer</param>
            <param name="startTime">Only return transfers later than this</param>
            <param name="endTime">Only return transfers before this</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transfer history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetSubAccountBtcValuesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get BTC valued asset summary of subaccounts.
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="page">The page</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Btc asset values</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.CreateVirtualSubAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Create a virtual sub account
            </summary>
            <param name="subAccountString">String based with which a subaccount email will be generated. Should not contain special characters</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.EnableBlvtForSubAccountAsync(System.String,System.Boolean,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable or disable blvt
            </summary>
            <param name="email">Email of the sub account</param>
            <param name="enable">Enable or disable (only true for now)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetUniversalTransferHistory(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of universal transfers
            </summary>
            <param name="fromEmail">Filter the list by from email (fromEmail and toEmail cannot be present at same time)</param>
            <param name="toEmail">Filter the list by to email (fromEmail and toEmail cannot be present at same time)</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return (Default 500, max 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of universal transfers</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientSubAccount.GetUniversalTransferHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of universal transfers
            </summary>
            <param name="fromEmail">Filter the list by from email (fromEmail and toEmail cannot be present at same time)</param>
            <param name="toEmail">Filter the list by to email (fromEmail and toEmail cannot be present at same time)</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">The page of the results</param>
            <param name="limit">The max amount of results to return (Default 500, max 500)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of universal transfers</returns>
        </member>
        <member name="T:Binance.Net.SubClients.BinanceClientWithdrawDeposit">
            <summary>
            Withdraw/Deposit endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdrawDeposit.GetAssetDetailsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdraw/deposit details for an asset
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Asset detail</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdrawDeposit.WithdrawAsync(System.String,System.String,System.Decimal,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Withdraw assets from Binance to an address
            </summary>
            <param name="asset">The asset to withdraw</param>
            <param name="address">The address to send the funds to</param>
            <param name="addressTag">Secondary address identifier for coins like XRP,XMR etc.</param>
            <param name="withdrawOrderId">Custom client order id</param>
            <param name="amount">The amount to withdraw</param>
            <param name="transactionFeeFlag">When making internal transfer, true for returning the fee to the destination account; false for returning the fee back to the departure account. Default false.</param>
            <param name="network">The network to use</param>
            <param name="name">Description of the address</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Withdrawal confirmation</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdrawDeposit.GetWithdrawalHistoryAsync(System.String,System.String,System.Nullable{Binance.Net.Enums.WithdrawalStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the withdrawal history
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="withdrawOrderId">Filter by withdraw order id</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="limit">Add limit. Default: 1000, Max: 1000</param>
            <param name="offset">Add offset</param>
            <param name="ct">Cancellation token</param>
            <returns>List of withdrawals</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdrawDeposit.GetDepositHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.DepositStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit history
            </summary>
            <param name="coin">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="limit">Amount of results</param>
            <param name="offset">Offset the results</param>
            <param name="startTime">Filter start time from</param>
            <param name="endTime">Filter end time till</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of deposits</returns>
        </member>
        <member name="M:Binance.Net.SubClients.BinanceClientWithdrawDeposit.GetDepositAddressAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the deposit address for an asset
            </summary>
            <param name="coin">Asset to get address for</param>
            <param name="network">Network</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Deposit address</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFutures">
            <summary>
            Futures endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFutures.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFutures.BaseClient">
            <summary>
            Base client
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFutures._log">
            <summary>
            
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFutures.UserStream">
            <summary>
            Futures user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ModifyPositionModeAsync(System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="dualPositionSide">User position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetPositionModeAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ChangeInitialLeverageAsync(System.String,System.Int32,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests to change the initial leverage of the given symbol
            </summary>
            <param name="symbol">Symbol to change the initial leverage for</param>
            <param name="leverage">The amount of initial leverage to change to</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Result of the initial leverage change request</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ChangeMarginTypeAsync(System.String,Binance.Net.Enums.FuturesMarginType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin type for an open position
            </summary>
            <param name="symbol">Symbol to change the position type for</param>
            <param name="marginType">The type of margin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Whether the request was successful</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.ModifyPositionMarginAsync(System.String,System.Decimal,Binance.Net.Enums.FuturesMarginChangeDirectionType,System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change the margin on an open position
            </summary>
            <param name="symbol">Symbol to adjust the position margin for</param>
            <param name="amount">The amount of margin to be used</param>
            <param name="type">Whether to reduce or add margin to the position</param>
            <param name="positionSide">Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent with Hedge Mode.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The new position margin</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetMarginChangeHistoryAsync(System.String,System.Nullable{Binance.Net.Enums.FuturesMarginChangeDirectionType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Requests the margin change history for a specific symbol
            </summary>
            <param name="symbol">Symbol to get margin history for</param>
            <param name="type">Filter the history by the direction of margin change</param>
            <param name="startTime">Margin changes newer than this date will be retrieved</param>
            <param name="endTime">Margin changes older than this date will be retrieved</param>
            <param name="limit">The max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of all margin changes for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetIncomeHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the income history for the futures account
            </summary>
            <param name="symbol">The symbol to get income history from</param>
            <param name="incomeType">The income type filter to apply to the request</param>
            <param name="startTime">Time to start getting income history from</param>
            <param name="endTime">Time to stop getting income history from</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The income history for the futures account</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetBracketsAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets Notional and Leverage Brackets.
            </summary>
            <param name="symbolOrPair">The symbol or pair to get the data for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Notional and Leverage Brackets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFutures.GetPositionAdlQuantileEstimationAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get position ADL quantile estimations
            </summary>
            <param name="symbol">Only get for this symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount">
            <summary>
            Futures account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount.SignedV2">
            <summary>
            Signed version
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount.BaseClient">
            <summary>
            Base client
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesAccount.FuturesClient">
            <summary>
            Futures client
            </summary>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket">
            <summary>
            Futures market endpoints
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.BaseClient">
            <summary>
            Base client
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.FuturesClient">
            <summary>
            Futures client
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetRecentTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetAggregatedTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetFundingRatesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="startTime">Start time to get funding rate history</param>
            <param name="endTime">End time to get funding rate history</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The funding rate history for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTopLongShortAccountRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Accounts)
            </summary>
            <param name="symbolPair">The symbol or pair to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (accounts)</param>
            <param name="endTime">End time to get top trader long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetTopLongShortPositionRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Top Trader Long/Short Ratio (Positions)
            </summary>
            <param name="symbolPair">The symbol or pair to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get top trader long/short ratio (positions)</param>
            <param name="endTime">End time to get top trader long/short ratio (positions)</param>
            <param name="ct">Cancellation token</param>
            <returns>Top Trader Long/Short Ratio (Positions) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetGlobalLongShortAccountRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Global Long/Short Ratio (Accounts)
            </summary>
            <param name="symbolPair">The symbol or pair to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get global long/short ratio (accounts)</param>
            <param name="endTime">End time to get global long/short ratio (accounts)</param>
            <param name="ct">Cancellation token</param>
            <returns>Global Long/Short Ratio (Accounts) info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetMarkPriceKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Kline/candlestick bars for the mark price of a symbol
            </summary>
            <param name="symbol">The symbol get the data for</param>
            <param name="interval">The interval of the klines</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesMarket.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.SignedVersion">
            <summary>
            Signed version
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.BaseClient">
            <summary>
            Base client
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.FuturesClient">
            <summary>
            Futures client
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.PositionSide},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.WorkingType},System.Nullable{System.Boolean},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the base symbol</param>
            <param name="positionSide">The position side</param>
            <param name="reduceOnly">Specify as true if the order is intended to only reduce the position</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="activationPrice">Used with TRAILING_STOP_MARKET orders, default as the latest price（supporting different workingType)</param>
            <param name="callbackRate">Used with TRAILING_STOP_MARKET orders</param>
            <param name="workingType">stopPrice triggered by: "MARK_PRICE", "CONTRACT_PRICE"</param>
            <param name="closePosition">Close-All，used with STOP_MARKET or TAKE_PROFIT_MARKET.</param>
            <param name="orderResponseType">The response type. Default Acknowledge</param>
            <param name="priceProtect">If true when price reaches stopPrice, difference between "MARK_PRICE" and "CONTRACT_PRICE" cannot be larger than "triggerProtect" of the symbol.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.PlaceMultipleOrdersAsync(Binance.Net.Objects.Futures.FuturesData.BinanceFuturesBatchOrder[],System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Place multiple orders in one call
            </summary>
            <param name="orders">The orders to place</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Returns a list of call results, one for each order. The order the results are in is the order the orders were sent</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelAllOrdersAfterTimeoutAsync(System.String,System.TimeSpan,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all open orders of the specified symbol at the end of the specified countdown. This rest endpoint means to ensure your open orders are canceled in case of an outage. The endpoint should be called repeatedly as heartbeats
            so that the existing countdown time can be canceled and replaced by a new one.
            </summary>
            <param name="symbol">The symbol</param>
            <param name="countDownTime">The time after which all open orders should cancel, or 0 to cancel an existing timer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Countdown result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.CancelMultipleOrdersAsync(System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels multiple orders
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderIdList">The list of order ids to cancel</param>
            <param name="origClientOrderIdList">The list of client order ids to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOpenOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific open order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesOrder.GetForcedOrdersAsync(System.String,System.Nullable{Binance.Net.Enums.AutoCloseType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of users forced orders
            </summary>
            <param name="symbol">The symbol to get forced orders for</param>
            <param name="closeType">Filter by reason for close</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced orders</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem">
            <summary>
            Futures system endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.publicVersion">
            <summary>
            version
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem._baseClient">
            <summary>
            Client
            </summary>
        </member>
        <member name="F:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem._log">
            <summary>
            Log
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance Futures API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream">
            <summary>
            Futures user stream endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Futures.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.BinanceClientFuturesUserStream.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoin">
            <summary>
            Coin-M futures endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoin.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoin.Market">
            <summary>
            Futures market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoin.Order">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoin.Account">
            <summary>
            Futures account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoin.System">
            <summary>
            Coin futures system endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoin.UserStream">
            <summary>
            Coin futures user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoin.GetPositionInformationAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account position information
            </summary>
            <param name="marginAsset">Filter by margin asset</param>
            <param name="pair">Filter by pair</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinAccount">
            <summary>
            COIN-M futures account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinAccount.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinAccount.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinAccount.GetBalanceAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinAccount.GetUserCommissionRateAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account commission rates
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>User commission rate information</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket">
            <summary>
            COIN-M futures market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetRecentTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetMarkPricesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="pair">Filter by pair</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetContinuousContractKlinesAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided pair
            </summary>
            <param name="pair">The symbol to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetIndexPriceKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided pair
            </summary>
            <param name="pair">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetMarkPriceKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided pair
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetTickersAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours change
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="pair">Filter by pair</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetBookPricesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="pair">Filter by pair</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get present open interest of a specific symbol.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetOpenInterestHistoryAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest History
            </summary>
            <param name="pair">The pair to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get open interest history</param>
            <param name="endTime">End time to get open interest history</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest History info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetTakerBuySellVolumeRatioAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Taker Buy/Sell Volume Ratio
            </summary>
            <param name="pair">The pair to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get taker buy/sell volume ratio</param>
            <param name="endTime">End time to get taker buy/sell volume ratio</param>
            <param name="ct">Cancellation token</param>
            <returns>Taker Buy/Sell Volume Ratio info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetBasisAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets basis
            </summary>
            <param name="pair">The pair to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time</param>
            <param name="endTime">End time</param>
            <param name="ct">Cancellation token</param>
            <returns>Basis</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinMarket.GetPricesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="symbol">Retrieve for a symbol</param>
            <param name="pair">Retrieve prices for a specific pair</param>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinOrder">
            <summary>
            COIN-M futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinOrder.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinOrder.GetUserTradesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="pair">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinSystem">
            <summary>
            COIN-M futures system endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinSystem.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinUserStream">
            <summary>
            COIN-M futures account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Coin.BinanceClientFuturesCoinUserStream.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt">
            <summary>
            USDT-M futures endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt.Market">
            <summary>
            Futures market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt.Order">
            <summary>
            Futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt.Account">
            <summary>
            Futures account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt.System">
            <summary>
            System endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt.UserStream">
            <summary>
            User stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt.GetPositionInformationAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of Positions</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdt.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtAccount">
            <summary>
            USDT-M futures account endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtAccount.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtAccount.GetAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account information, including balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtAccount.GetBalanceAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Gets account balances
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtAccount.GetMultiAssetsModeAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Get user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Multi asset mode</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtAccount.SetMultiAssetsModeAsync(System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>.
            Set user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
            </summary>
            <param name="enabled">Enabled or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Succes</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtAccount.GetUserCommissionRateAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets account commission rates
            </summary>
            <param name="symbol">Symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>User commission rate information</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket">
            <summary>
            USDT-M futures market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetRecentTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetMarkPricesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get Mark Price and Funding Rate for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Mark data</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours change
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetBookPricesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetOpenInterestAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get present open interest of a specific symbol.
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetOpenInterestHistoryAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Open Interest History
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get open interest history</param>
            <param name="endTime">End time to get open interest history</param>
            <param name="ct">Cancellation token</param>
            <returns>Open Interest History info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetTakerBuySellVolumeRatioAsync(System.String,Binance.Net.Enums.PeriodInterval,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets Taker Buy/Sell Volume Ratio
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="period">The period timespan</param>
            <param name="limit">Max number of results</param>
            <param name="startTime">Start time to get taker buy/sell volume ratio</param>
            <param name="endTime">End time to get taker buy/sell volume ratio</param>
            <param name="ct">Cancellation token</param>
            <returns>Taker Buy/Sell Volume Ratio info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetCompositeIndexInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets composite index info
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtMarket.GetContinuousContractKlinesAsync(System.String,Binance.Net.Enums.ContractType,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided pair
            </summary>
            <param name="pair">The symbol to get the data for</param>
            <param name="contractType">The contract type</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtOrder">
            <summary>
            USDT-M futures order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtOrder.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtOrder.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtSystem">
            <summary>
            USDT-M futures system endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtSystem.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtUserStream">
            <summary>
            USDT-M futures account user stream endpoint 
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Futures.Usdt.BinanceClientFuturesUsdtUserStream.Api">
            <summary>
            Api path
            </summary>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientMargin">
            <summary>
            Margin endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Margin.BinanceClientMargin.Market">
            <summary>
            Margin market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Margin.BinanceClientMargin.Order">
            <summary>
            Margin order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Margin.BinanceClientMargin.UserStream">
            <summary>
            Margin user stream endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Margin.BinanceClientMargin.IsolatedUserStream">
            <summary>
            Isolated margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.TransferAsync(System.String,System.Decimal,Binance.Net.Enums.TransferDirectionType,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Execute transfer between spot account and margin account.
            </summary>
            <param name="asset">The asset being transferred, e.g., BTC</param>
            <param name="amount">The amount to be transferred</param>
            <param name="type">TransferDirection (MainToMargin/MarginToMain)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.BorrowAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Borrow. Apply for a loan. 
            </summary>
            <param name="asset">The asset being borrow, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.RepayAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Repay loan for margin account.
            </summary>
            <param name="asset">The asset being repay, e.g., BTC</param>
            <param name="amount">The amount to be borrow</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="symbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Transaction Id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetTransferHistoryAsync(Binance.Net.Enums.TransferDirection,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            </summary>
            <param name="direction">The direction of the the transfers to retrieve</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of transfers</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetLoansAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query loan records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of loan transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Number of page records</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">The records count size need show</param>
            <param name="archived">Set to true for archived data from 6 months ago</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Loan records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetRepaysAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query repay records
            </summary>
            <param name="asset">The records asset</param>
            <param name="transactionId">The id of repay transaction</param>
            <param name="startTime">Time to start getting records from</param>
            <param name="endTime">Time to stop getting records to</param>
            <param name="current">Filter by number</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="size">The records count size need show</param>
            <param name="archived">Set to true for archived data from 6 months ago</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay records</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetInterestHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="archived">Set to true for archived data from 6 months ago</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest events</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetInterestRateHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of interest rate
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="vipLevel">Vip level</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of interest rate</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetForceLiquidationHistoryAsync(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of forced liquidations
            </summary>
            <param name="page">Results page</param>
            <param name="startTime">Filter by startTime from</param>
            <param name="endTime">Filter by endTime from</param>
            <param name="isolatedSymbol">Filter by isolated symbol</param>
            <param name="limit">Limit of the amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of forced liquidations</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query margin account details
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The margin account information</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMaxBorrowAmountAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max borrow amount
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetMaxTransferAmountAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query max transfer-out amount 
            </summary>
            <param name="asset">The records asset</param>
            <param name="isolatedSymbol">The isolated symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Return max amount</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetIsolatedMarginAccountTransferHistoryAsync(System.String,System.String,System.Nullable{Binance.Net.Enums.IsolatedMarginTransferDirection},System.Nullable{Binance.Net.Enums.IsolatedMarginTransferDirection},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get history of transfer to and from the isolated margin account
            </summary>
            <param name="symbol">The symbol</param>
            <param name="asset">Filter by asset</param>
            <param name="from">Filter by direction</param>
            <param name="to">Filter by direction</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="current">Current page</param>
            <param name="limit">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetIsolatedMarginAccountAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.DisableIsolatedMarginAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Disabled an isolated margin account
            </summary>
            <param name="symbol">Symbol to enable isoldated margin account for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.EnableIsolatedMarginAccountAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Enable an isolated margin account
            </summary>
            <param name="symbol">Symbol to enable isoldated margin account for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.GetEnabledIsolatedMarginAccountLimitAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get max number of enabled isolated margin accounts
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMargin.IsolatedMarginAccountTransferAsync(System.String,System.String,Binance.Net.Enums.IsolatedMarginTransferDirection,Binance.Net.Enums.IsolatedMarginTransferDirection,System.Decimal,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Transfer from or to isolated margin account
            </summary>
            <param name="asset">The asset</param>
            <param name="symbol">Isolated symbol</param>
            <param name="from">From</param>
            <param name="to">To</param>
            <param name="amount">Amount to transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientIsolatedMarginUserStream">
            <summary>
            Margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientIsolatedMarginUserStream.StartIsolatedMarginUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientIsolatedMarginUserStream.KeepAliveIsolatedMarginUserStreamAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream for margin account listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientIsolatedMarginUserStream.CloseIsolatedMarginUserStreamAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="symbol">The isolated symbol</param>
            <param name="listenKey">The listen key to invalidate</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientMarginMarket">
            <summary>
            Margin market endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginAssetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin asset
            </summary>
            <param name="asset">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPairAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get a margin pair
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginAssetsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all assets available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin assets</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPairsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all asset pairs available for margin trading
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of margin pairs</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetMarginPriceIndexAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get margin price index
            </summary>
            <param name="symbol">The symbol to get</param>
            <param name="ct">Cancellation token</param>
            <returns>Margin price index</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetIsolatedMarginSymbolAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin symbol info
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginMarket.GetIsolatedMarginSymbolsAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Isolated margin symbol info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientMarginOrders">
            <summary>
            Margin order endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.PlaceMarginOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{System.Boolean},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Margin account new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQuantity">Used for iceberg orders</param>
            <param name="sideEffectType">Side effect type for this order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderResponseType">Used for the response JSON</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.CancelMarginOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order for margin account
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.CancelOpenMarginOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active orders for a symbol
            </summary>
            <param name="symbol">The symbol the to cancel orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMarginAccountOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin account order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific margin account order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMarginAccountOpenOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open margin account orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open margin account orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMarginAccountOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all margin account orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMarginAccountUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user margin account trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="limit">The max number of results</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of margin account trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.PlaceMarginOCOOrderAsync(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.SideEffectType},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new margin OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="sideEffectType">Side effect type</param>
            <param name="isIsolated">Is isolated</param>
            <param name="orderResponseType">Order response type</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>        
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.CancelMarginOcoOrderAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending margin oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMarginOcoOrderAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific margin oco order. Either orderListId or listClientOrderId should be provided.
            </summary>
            <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="orderListId">The list order id of the order</param>
            <param name="origClientOrderId">Either orderListId or listClientOrderId must be provided</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetMarginOcoOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of margin oco orders matching the parameters
            </summary>
            <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginOrders.GetOpenOcoOrdersAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open margin oco orders
            </summary>
            <param name="symbol">Mandatory for isolated margin, not supported for cross margin</param>
            <param name="isIsolated">For isolated margin or not</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream">
            <summary>
            Margin user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream  for margin account by requesting a listen key. 
            This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates. 
            The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream for margin account listen key to keep the stream from closing. 
            Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Margin.BinanceClientMarginUserStream.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Close the user stream for margin account
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpot">
            <summary>
            Spot endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Spot.BinanceClientSpot.System">
            <summary>
            Spot system endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Spot.BinanceClientSpot.Market">
            <summary>
            Spot market endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Spot.BinanceClientSpot.Order">
            <summary>
            Spot order endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Spot.BinanceClientSpot.UserStream">
            <summary>
            Spot user stream endpoints
            </summary>
        </member>
        <member name="P:Binance.Net.SubClients.Spot.BinanceClientSpot.Futures">
            <summary>
            Spot/futures endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpot.GetTradingStatusAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trading status for the current account
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The trading status of the account</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction">
            <summary>
            Spot/futures endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.TransferFuturesAccountAsync(System.String,System.Decimal,Binance.Net.Enums.FuturesTransferType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Execute a transfer between the spot account and a futures account
            </summary>
            <param name="asset">The asset to transfer</param>
            <param name="amount">Amount to transfer</param>
            <param name="transferType">The transfer direction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The transaction id</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetFuturesTransferHistoryAsync(System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers between spot and futures account
            </summary>
            <param name="asset">The asset to get history for</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="page">The page to return</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>History</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.BorrowForCrossCollateralAsync(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Borrow for cross-collateral
            </summary>
            <param name="coin">The coin to borrow</param>
            <param name="amount">The amount to borrow</param>
            <param name="collateralCoin">The coin to use as collateral</param>
            <param name="collateralAmount">The amount of collateral coin to use</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Borrow result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetCrossCollateralBorrowHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross collateral borrow history
            </summary>
            <param name="coin">The coin to get history for</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>History</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.RepayForCrossCollateralAsync(System.String,System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Repay for cross-collateral
            </summary>
            <param name="coin">The coin</param>
            <param name="amount">The amount to repay</param>
            <param name="collateralCoin">The collateral coin to repay</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Repay result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetCrossCollateralRepayHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross collateral borrow history
            </summary>
            <param name="coin">The coin to get history for</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>History</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetCrossCollateralWalletAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross-collateral wallet info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Wallet</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetCrossCollateralInformationAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross-collateral info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetRateAfterAdjustLoanToValueAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.AdjustRateDirection,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Calculate rate after adjust cross-collateral loan to value
            </summary>
            <param name="collateralCoin">The collateral coin</param>
            <param name="loanCoin">The loan coin</param>
            <param name="amount">The amount</param>
            <param name="direction">The direction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>After collateral rate</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetMaxAmountForAdjustCrossCollateralLoanToValueAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get max amount for adjust cross-collateral LTV
            </summary>
            <param name="collateralCoin">The collateral coin</param>
            <param name="loanCoin">The loan coin</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Max amounts</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.AdjustCrossCollateralLoanToValueAsync(System.String,System.String,System.Decimal,Binance.Net.Enums.AdjustRateDirection,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Adjust cross collateral LTV
            </summary>
            <param name="collateralCoin">The collateral coin</param>
            <param name="loanCoin">The loan coin</param>
            <param name="amount">The amount</param>
            <param name="direction">The direction</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Adjust result</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetAdjustCrossCollateralLoanToValueHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross collateral LTV adjustment history
            </summary>
            <param name="loanCoin">The loan coin</param>
            <param name="collateralCoin">The collateral coin</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Adjustment history</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotFuturesInteraction.GetCrossCollateralLiquidationHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get cross collateral liquidation history
            </summary>
            <param name="collateralCoin">The collateral coin</param>
            <param name="loanCoin">The loan coin</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Liquidation history</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpotMarket">
            <summary>
            Spot market endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the order book for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the order book for</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The order book for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetRecentTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the recent trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets the historical  trades for a symbol
            </summary>
            <param name="symbol">The symbol to get recent trades for</param>
            <param name="limit">Result limit</param>
            <param name="fromId">From which trade id on results should be retrieved</param>
            <param name="ct">Cancellation token</param>
            <returns>List of recent trades</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetAggregatedTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets compressed, aggregate trades. Trades that fill at the time, from the same order, with the same price will have the quantity aggregated.
            </summary>
            <param name="symbol">The symbol to get the trades for</param>
            <param name="fromId">ID to get aggregate trades from INCLUSIVE.</param>
            <param name="startTime">Time to start getting trades from</param>
            <param name="endTime">Time to stop getting trades from</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The aggregated trades list for the symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetKlinesAsync(System.String,Binance.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get candlestick data for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="interval">The candlestick timespan</param>
            <param name="startTime">Start time to get candlestick data</param>
            <param name="endTime">End time to get candlestick data</param>
            <param name="limit">Max number of results</param>
            <param name="ct">Cancellation token</param>
            <returns>The candlestick data for the provided symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetCurrentAvgPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current average price for a symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for the provided symbol
            </summary>
            <param name="symbol">The symbol to get the data for</param>
            <param name="ct">Cancellation token</param>
            <returns>Data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            Get data regarding the last 24 hours for all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of data over the last 24 hours</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the price of a symbol
            </summary>
            <param name="symbol">The symbol to get the price for</param>
            <param name="ct">Cancellation token</param>
            <returns>Price of symbol</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of the prices of all symbols
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for a symbol.
            </summary>
            <param name="symbol">Symbol to get book price for</param>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetAllBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the best price/quantity on the order book for all symbols.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>List of book prices</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotMarket.GetTradeFeeAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the trade fee for a symbol
            </summary>
            <param name="symbol">Symbol to get withdrawal fee for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Trade fees</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpotOrder">
            <summary>
            Spot order endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceTestOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new test order. Test orders are not actually being executed and just test the functionality.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type (limit/market)</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">User for iceberg orders</param>
            <param name="orderResponseType">Used for the response JSON</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed test order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceOrderAsync(System.String,Binance.Net.Enums.OrderSide,Binance.Net.Enums.OrderType,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.OrderResponseType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="type">The order type</param>
            <param name="timeInForce">Lifetime of the order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="quoteOrderQuantity">The amount of the quote symbol. Only valid for market orders</param>
            <param name="price">The price to use</param>
            <param name="newClientOrderId">Unique id for order</param>
            <param name="stopPrice">Used for stop orders</param>
            <param name="icebergQty">Used for iceberg orders</param>
            <param name="orderResponseType">Used for the response JSON</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for the placed order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="newClientOrderId">Unique identifier for this cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelAllOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels all open orders on a symbol
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific order. Either orderId or origClientOrderId should be provided.
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderId">The order id of the order</param>
            <param name="origClientOrderId">The client order id of the order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOpenOrdersAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets a list of open orders
            </summary>
            <param name="symbol">The symbol to get open orders for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of open orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets all orders for the provided symbol
            </summary>
            <param name="symbol">The symbol to get orders for</param>
            <param name="orderId">If set, only orders with an order id higher than the provided will be returned</param>
            <param name="startTime">If set, only orders placed after this time will be returned</param>
            <param name="endTime">If set, only orders placed before this time will be returned</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of orders</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.PlaceOcoOrderAsync(System.String,Binance.Net.Enums.OrderSide,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Binance.Net.Enums.TimeInForce},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Places a new OCO(One cancels other) order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="side">The order side (buy/sell)</param>
            <param name="stopLimitTimeInForce">Lifetime of the stop order (GoodTillCancel/ImmediateOrCancel/FillOrKill)</param>
            <param name="quantity">The amount of the symbol</param>
            <param name="price">The price to use</param>
            <param name="stopPrice">The stop price</param>
            <param name="stopLimitPrice">The price for the stop limit order</param>
            <param name="stopClientOrderId">Client id for the stop order</param>
            <param name="limitClientOrderId">Client id for the limit order</param>
            <param name="listClientOrderId">Client id for the order list</param>
            <param name="limitIcebergQuantity">Iceberg quantity for the limit order</param>
            <param name="stopIcebergQuantity">Iceberg quantity for the stop order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order list info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.CancelOcoOrderAsync(System.String,System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancels a pending oco order
            </summary>
            <param name="symbol">The symbol the order is for</param>
            <param name="orderListId">The id of the order list to cancel</param>
            <param name="listClientOrderId">The client order id of the order list to cancel</param>
            <param name="newClientOrderId">The new client order list id for the order list</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Id's for canceled order</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOcoOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves data for a specific oco order. Either orderListId or listClientOrderId should be provided.
            </summary>
            <param name="orderListId">The list order id of the order</param>
            <param name="origClientOrderId">Either orderListId or listClientOrderId must be provided</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>The specific order list</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOcoOrdersAsync(System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of oco orders matching the parameters
            </summary>
            <param name="fromId">Only return oco orders with id higher than this</param>
            <param name="startTime">Only return oco orders placed later than this. Only valid if fromId isn't provided</param>
            <param name="endTime">Only return oco orders placed before this. Only valid if fromId isn't provided</param>
            <param name="limit">Max number of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Order lists matching the parameters</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetOpenOcoOrdersAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of open oco orders
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>Open order lists</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotOrder.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Gets all user trades for provided symbol
            </summary>
            <param name="symbol">Symbol to get trades for</param>
            <param name="orderId">Get trades for this order id</param>
            <param name="limit">The max number of results</param>
            <param name="fromId">TradeId to fetch from. Default gets most recent trades</param>
            <param name="startTime">Orders newer than this date will be retrieved</param>
            <param name="endTime">Orders older than this date will be retrieved</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns>List of trades</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpotSystem">
            <summary>
            Spot system endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotSystem.PingAsync(System.Threading.CancellationToken)">
            <summary>
            Pings the Binance API
            </summary>
            <returns>True if successful ping, false if no response</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotSystem.GetServerTimeAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Requests the server for the local time. This function also determines the offset between server and local time and uses this for subsequent API calls
            </summary>
            <param name="resetAutoTimestamp">Whether the response should be used for a new auto timestamp calculation</param>
            <param name="ct">Cancellation token</param>
            <returns>Server time</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotSystem.GetExchangeInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Gets information about the exchange including rate limits and symbol list
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotSystem.GetExchangeInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and information on the provided symbol
            </summary>
            <param name="symbol">Symbol to get data for token</param>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotSystem.GetExchangeInfoAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Get's information about the exchange including rate limits and information on the provided symbols
            </summary>
            <param name="symbols">Symbols to get data for token</param>
            <param name="ct">Cancellation token</param>
            <returns>Exchange info</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotSystem.GetSystemStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the status of the Binance platform
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>The system status</returns>
        </member>
        <member name="T:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream">
            <summary>
            Spot user stream endpoints
            </summary>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.StartUserStreamAsync(System.Threading.CancellationToken)">
            <summary>
            Starts a user stream by requesting a listen key. This listen key can be used in subsequent requests to BinanceSocketClient.Spot.SubscribeToUserDataUpdates. The stream will close after 60 minutes unless a keep alive is send.
            </summary>
            <param name="ct">Cancellation token</param>
            <returns>Listen key</returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.KeepAliveUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a keep alive for the current user stream listen key to keep the stream from closing. Stream auto closes after 60 minutes if no keep alive is send. 30 minute interval for keep alive is recommended.
            </summary>
            <param name="listenKey">The listen key to keep alive</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Binance.Net.SubClients.Spot.BinanceClientSpotUserStream.StopUserStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Stops the current user stream
            </summary>
            <param name="listenKey">The listen key to invalidate</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Binance.Net.SymbolOrderBooks.BinanceFuturesCoinSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesCoinSymbolOrderBook.#ctor(System.String,Binance.Net.Objects.BinanceOrderBookOptions)">
            <summary>
            Create a new instance
            </summary>
            <param name="symbol">The symbol of the order book</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesCoinSymbolOrderBook.DoStartAsync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesCoinSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesCoinSymbolOrderBook.DoResyncAsync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesCoinSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.SymbolOrderBooks.BinanceFuturesUsdtSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesUsdtSymbolOrderBook.#ctor(System.String,Binance.Net.Objects.BinanceOrderBookOptions)">
            <summary>
            Create a new instance
            </summary>
            <param name="symbol">The symbol of the order book</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesUsdtSymbolOrderBook.DoStartAsync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesUsdtSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesUsdtSymbolOrderBook.DoResyncAsync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceFuturesUsdtSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Binance.Net.SymbolOrderBooks.BinanceSpotSymbolOrderBook">
            <summary>
            Implementation for a synchronized order book. After calling Start the order book will sync itself and keep up to date with new data. It will automatically try to reconnect and resync in case of a lost/interrupted connection.
            Make sure to check the State property to see if the order book is synced.
            </summary>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSpotSymbolOrderBook.#ctor(System.String,Binance.Net.Objects.BinanceOrderBookOptions)">
            <summary>
            Create a new instance
            </summary>
            <param name="symbol">The symbol of the order book</param>
            <param name="options">The options for the order book</param>
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSpotSymbolOrderBook.DoStartAsync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSpotSymbolOrderBook.DoReset">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSpotSymbolOrderBook.DoResyncAsync">
            <inheritdoc />
        </member>
        <member name="M:Binance.Net.SymbolOrderBooks.BinanceSpotSymbolOrderBook.Dispose">
            <inheritdoc />
        </member>
    </members>
</doc>
